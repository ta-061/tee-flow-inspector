#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VulnerabilityParser - 型ガード付き改善版

主な改善点:
1. extract_json_from_response: dict型を直接受け入れ、非文字列は安全にNone返却
2. validate_taint_response_format: 非文字列なら即NG
3. 全体的な型安全性の向上
"""

import re
import json
import hashlib
from typing import Dict, List, Tuple, Optional, Union, Any
from pathlib import Path
from .json_repair import JSONRepair
class VulnerabilityParser:
    """
    脆弱性解析結果のパーサー（型ガード付き改善版）
    """
    
    def __init__(self, debug=False):
        self.debug = debug
        self.json_repair = JSONRepair(debug=debug)
        self.stats = {
            "total_parses": 0,
            "parse_failures": 0,
            "vulnerabilities_found": 0,
            "inline_findings_found": 0,
            "end_findings_found": 0,
            "findings_parse_attempts": 0,
            "findings_parse_successes": 0,
            "findings_parse_failures": 0,
            "placeholder_replacements": 0,
            "line_coercions": 0,
            "fallback_extractions": 0,
            "json_extractions": 0,
            "json_extraction_failures": 0,
            "type_guard_rejections": 0,  # 新規追加：型ガードによる拒否
            "dict_inputs_accepted": 0     # 新規追加：dict入力の受け入れ
        }
        self.known_rules = ["unencrypted_output", "weak_input_validation", "shared_memory_overwrite"]
    
    def extract_json_from_response(self, response: Union[str, Dict, Any]) -> Optional[Dict]:
        """
        LLMレスポンスからJSON部分を抽出（型ガード付き改善版）
        
        Args:
            response: LLMのレスポンス（文字列、辞書、その他）
            
        Returns:
            抽出されたJSONオブジェクト、または None
        """
        self.stats["json_extractions"] += 1
        
        # === 型ガード: dict型を直接受け入れ ===
        if isinstance(response, dict):
            self.stats["dict_inputs_accepted"] += 1
            if self.debug:
                print(f"[DEBUG] Received dict input directly, returning as-is")
            # 期待されるキーがあるか確認
            expected_keys = {
                "function", "propagation", "sanitizers", "sinks", 
                "evidence", "rule_matches", "vulnerability_found", 
                "vulnerability", "sink_reached", "receives_tainted"
            }
            if any(key in response for key in expected_keys):
                return response
            # キーがない場合でも辞書なら返す
            return response
        
        # === 型ガード: 非文字列は安全にNone返却 ===
        if not isinstance(response, str):
            self.stats["type_guard_rejections"] += 1
            if self.debug:
                print(f"[DEBUG] Non-string, non-dict input rejected: {type(response)}")
            self.stats["json_extraction_failures"] += 1
            return None
        
        # 空文字列チェック
        if not response:
            self.stats["json_extraction_failures"] += 1
            return None
        
        try:
            # 方法1: 最初の行をJSONとして解析
            lines = response.strip().split('\n')
            if lines:
                first_line = lines[0].strip()
                # コメントや余分な文字を削除
                if first_line.startswith('```'):
                    first_line = first_line[3:]
                if first_line.endswith('```'):
                    first_line = first_line[:-3]
                
                try:
                    result = json.loads(first_line)
                    if isinstance(result, dict):
                        # 期待するキーがあるか確認
                        expected_keys = {
                            "function", "propagation", "sanitizers", "sinks", 
                            "evidence", "rule_matches", "vulnerability_found", 
                            "vulnerability", "sink_reached", "receives_tainted"
                        }
                        if any(key in result for key in expected_keys):
                            return result
                        # 脆弱性判定レスポンスの場合
                        if "vulnerability_found" in result or "vulnerability" in result:
                            return result
                        # シンク解析レスポンスの場合
                        if "sink_reached" in result or "receives_tainted" in result:
                            return result
                except (json.JSONDecodeError, TypeError):
                    pass
            
            # 方法2: レスポンス全体をJSONとして解析
            try:
                result = json.loads(response.strip())
                if isinstance(result, dict):
                    return result
            except (json.JSONDecodeError, TypeError):
                pass
            
            # 方法3: JSONブロックを探す（```json ... ```）
            json_pattern = r'```json\s*(.*?)\s*```'
            matches = re.findall(json_pattern, response, re.DOTALL | re.IGNORECASE)
            if matches:
                for match in matches:
                    try:
                        result = json.loads(match.strip())
                        if isinstance(result, dict):
                            return result
                    except (json.JSONDecodeError, TypeError):
                        continue
            
            # 方法4: 中括弧で囲まれた最初の完全なJSONオブジェクトを探す
            json_obj_pattern = r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}'
            matches = re.finditer(json_obj_pattern, response)
            
            for match in matches:
                try:
                    obj_str = match.group(0)
                    result = json.loads(obj_str)
                    if isinstance(result, dict):
                        # 必要なキーが含まれているか確認
                        if any(key in result for key in [
                            "function", "vulnerability_found", 
                            "sink_reached", "receives_tainted"
                        ]):
                            return result
                except (json.JSONDecodeError, TypeError):
                    continue
            
            # 方法5: JSONRepairを使用（フォールバック）
            if hasattr(self, 'json_repair'):
                result = self.json_repair.safe_json_loads(response, None)
                if isinstance(result, dict):
                    return result
            
            self.stats["json_extraction_failures"] += 1
            return None
            
        except Exception as e:
            if self.debug:
                print(f"[DEBUG] JSON extraction error: {e}")
            self.stats["json_extraction_failures"] += 1
            return None
    
    def validate_taint_response_format(self, response: Union[str, Any]) -> Tuple[bool, str]:
        """
        テイント解析応答の形式を検証（型ガード付き）
        
        Args:
            response: 検証対象のレスポンス
            
        Returns:
            (is_valid, error_message)
        """
        # === 型ガード: 非文字列なら即NG ===
        if not isinstance(response, str):
            self.stats["type_guard_rejections"] += 1
            return False, f"Response must be a string, got {type(response).__name__}"
        
        lines = [l.strip() for l in response.splitlines() if l.strip()]
        if not lines:
            return False, "Empty response"
        
        # 1st line: strict JSON object check
        first_line_data = self.extract_json_from_response(lines[0])
        if not isinstance(first_line_data, dict):
            return False, "First line is not a valid JSON object"
        
        required_keys = {"function", "propagation", "sanitizers", "sinks", "evidence", "rule_matches"}
        missing = required_keys - set(first_line_data.keys())
        if missing:
            return False, f"Missing required keys: {sorted(missing)}"
        
        # type checks
        for k in ("propagation", "sanitizers", "sinks", "evidence"):
            if not isinstance(first_line_data.get(k), list):
                return False, f"'{k}' must be an array"
        
        rm = first_line_data.get("rule_matches")
        if not isinstance(rm, dict):
            return False, "'rule_matches' must be an object with 'rule_id' and 'others'"
        if not isinstance(rm.get("rule_id"), list) or not isinstance(rm.get("others"), list):
            return False, "'rule_matches.rule_id' and 'rule_matches.others' must be arrays"
        
        # 2nd line: FINDINGS= {...} must exist
        if len(lines) < 2:
            return False, "Missing second line: FINDINGS={...}"
        
        if not re.match(r'^FINDINGS\s*=', lines[1]):
            return False, "Second line must begin with 'FINDINGS='"
        
        # Try parsing FINDINGS using JSONRepair patterns
        patterns = [
            r'^FINDINGS\s*=\s*(\{"items"\s*:\s*\[[\s\S]*?\]\})',
            r'^FINDINGS\s*=\s*(\{[\s\S]*"items"[\s\S]*\})'
        ]
        matches = self.json_repair.extract_json_patterns("\n".join(lines[1:]), patterns)
        obj = self.json_repair.parse_best_match(matches, {"items": []})
        if "items" not in obj:
            return False, "FINDINGS does not contain an 'items' array"
        
        return True, ""
    
    def parse_vuln_response(self, resp: Union[str, Dict, Any]) -> Tuple[bool, dict]:
        """
        脆弱性判定レスポンスをパース（型ガード付き）
        
        Args:
            resp: レスポンス（文字列、辞書、その他）
            
        Returns:
            (vulnerability_found, parsed_data)
        """
        self.stats["total_parses"] += 1
        
        # extract_json_from_responseを使用（型ガード含む）
        data = self.extract_json_from_response(resp)
        
        if data:
            flag = str(data.get("vulnerability_found", "")).lower()
            if flag == "yes":
                self.stats["vulnerabilities_found"] += 1
            return flag == "yes", data
        
        # フォールバック: テキスト内のパターンマッチ（文字列の場合のみ）
        if isinstance(resp, str):
            json_pattern = re.search(r'{\s*"vulnerability_found"\s*:\s*"(yes|no)"\s*}', resp)
            if json_pattern:
                flag = json_pattern.group(1).lower()
                if flag == "yes":
                    self.stats["vulnerabilities_found"] += 1
                return flag == "yes", {"vulnerability_found": flag}
        
        # パースに失敗
        self.stats["parse_failures"] += 1
        return False, {}
    
    def parse_first_json_line(self, resp: Union[str, Dict, Any]) -> Optional[dict]:
        """
        応答の最初のJSON行をパース（型ガード付き）
        
        Args:
            resp: レスポンス
            
        Returns:
            パースされた辞書、またはNone
        """
        return self.extract_json_from_response(resp)
    
    def set_known_rules(self, rules_json: dict):
        """CodeQLルールから既知のrule_idリストを設定"""
        ids = []
        for k in ("detection_rules", "rules"):
            for rule in (rules_json.get(k) or []):
                rid = rule.get("rule_id")
                if rid:
                    ids.append(rid)
        if ids:
            self.known_rules = sorted(set(ids))
    
    def make_finding_id(self, file_path: str, function: str, primary_rule_id: str, line: int, bucket: int = 2) -> str:
        """
        脆弱性発見項目のユニークIDを生成
        """
        key = f"{file_path}:{function}:{primary_rule_id}:{line // max(1, bucket)}"
        return hashlib.sha1(key.encode()).hexdigest()[:12]
    
    def _coerce_placeholder_file(self, path: Optional[str], default_file: Optional[str]) -> Optional[str]:
        """
        プレースホルダーを既定ファイルに置換する
        """
        if not path:
            return default_file
        
        path_str = str(path).strip()
        path_lower = path_str.lower()
        
        # よく見られるプレースホルダーのパターン
        placeholders = {
            "unknown", "<path>", "<path|'unknown'>", "n/a", "na",
            "???", "undefined", "null", "none", "<file>", "<unknown>"
        }
        
        # プレースホルダーを検出
        is_placeholder = (
            path_lower in placeholders or
            any(p in path_lower for p in ["unknown", "<path", "<file"]) or
            path_str.startswith("<") and path_str.endswith(">")
        )
        
        if is_placeholder:
            if self.debug:
                print(f"[DEBUG] Replacing placeholder '{path}' with '{default_file}'")
            self.stats["placeholder_replacements"] += 1
            return default_file
        
        return path
    
    def _standardize_finding(
        self,
        item: dict,
        func_name: str,
        phase: str = "middle",
        default_file: Optional[str] = None
    ) -> dict:
        """
        発見項目を標準化し、必須フィールドを補完
        """
        # phaseの補完と正規化
        if "phase" not in item:
            item["phase"] = phase
        else:
            current_phase = str(item["phase"]).lower()
            if current_phase == "start":
                item["phase"] = "middle"
            elif current_phase not in ["middle", "end"]:
                item["phase"] = phase
        
        # functionの補完
        if "function" not in item or not item["function"]:
            item["function"] = func_name
        
        # sink_functionの補完
        if "sink_function" not in item:
            item["sink_function"] = "unknown"
        
        # fileパスの処理（プレースホルダー置換）
        if "file" in item:
            item["file"] = self._coerce_placeholder_file(item["file"], default_file)
        else:
            item["file"] = default_file or "unknown"
        
        # rule_matchesの補完
        if "rule_matches" not in item:
            if "rule" in item and item["rule"]:
                rule = item["rule"]
                rule_ids = []
                known_rules = self.known_rules
                # パイプ区切りも対応
                if "|" in rule:
                    for pr in (x.strip() for x in rule.split("|")):
                        if pr in known_rules:
                            rule_ids.append(pr)
                elif rule in known_rules:
                    rule_ids.append(rule)
                
                if rule_ids:
                    item["rule_matches"] = {"rule_id": sorted(set(rule_ids)), "others": []}
                else:
                    item["rule_matches"] = {"rule_id": [], "others": [rule] if rule else []}
            else:
                item["rule_matches"] = {"rule_id": [], "others": []}
        else:
            # 既存のrule_matchesを正規化
            known_rules = self.known_rules
            rm = item["rule_matches"] if isinstance(item["rule_matches"], dict) else {}
            rids = [r for r in (rm.get("rule_id") or []) if r in known_rules]
            others = (rm.get("others") or []) + [r for r in (rm.get("rule_id") or []) if r not in known_rules]
            item["rule_matches"] = {
                "rule_id": sorted(set(rids)),
                "others": sorted(set(others))
            }
        
        # 行番号の処理
        if "line" not in item:
            item["line"] = 1
        else:
            line = item.get("line", 1)
            # リストの場合は最初の要素を使用
            if isinstance(line, list):
                line = line[0] if line else 1
            try:
                item["line"] = int(line)
            except (ValueError, TypeError):
                item["line"] = 1
            item["line"] = max(1, item["line"])
        
        # primary_rule_idの取得
        primary_rule_id = "none"
        if item["rule_matches"]["rule_id"]:
            primary_rule_id = item["rule_matches"]["rule_id"][0]
        elif item.get("rule"):
            rule = item["rule"]
            if "|" in rule:
                primary_rule_id = rule.split("|")[0].strip()
            else:
                primary_rule_id = rule
        
        # IDの生成
        item["id"] = self.make_finding_id(
            file_path=item.get("file", "unknown"),
            function=item["function"],
            primary_rule_id=primary_rule_id,
            line=item["line"]
        )
        
        return item
    
    def extract_inline_findings(
        self,
        resp: Union[str, Dict, Any],
        func_name: str,
        chain: List[str],
        vd: dict,
        project_root: Optional[Path] = None
    ) -> List[dict]:
        """
        応答からインライン脆弱性情報を抽出（FINDINGS形式）
        型ガード付き
        """
        findings = []
        self.stats["findings_parse_attempts"] += 1
        
        default_file = vd.get('current_file', vd.get('file'))
        
        # 型ガード: 文字列以外は空リストを返す
        if not isinstance(resp, str):
            if self.debug:
                print(f"[DEBUG] Non-string response for FINDINGS extraction: {type(resp)}")
            return findings
        
        if self.debug:
            print(f"[DEBUG] Attempting to extract FINDINGS from response (len={len(resp)})")
        
        # パターンマッチング（既存のロジック）
        patterns = [
            r'FINDINGS\s*=\s*(\{"items"\s*:\s*\[[^\]]*\]\})',
            r'FINDINGS\s*=\s*(\{[^}]*"items"[^}]*\})',
            r'FINDINGS\s*=\s*(\{.*?\})\s*(?:\n|$)',
            r'^\s*FINDINGS\s*=\s*(.+?)$',
            r'FINDINGS\s*=\s*(\{.*?\})',
        ]
        
        matches = self.json_repair.extract_json_patterns(resp, patterns)
        
        if not matches and "FINDINGS" in resp:
            print(f"[WARN] 'FINDINGS' found in response but no patterns matched")
            if self.debug:
                findings_pos = resp.find("FINDINGS")
                snippet = resp[findings_pos:findings_pos+200] if findings_pos >= 0 else ""
                print(f"[DEBUG] Response snippet: {repr(snippet)}")
            self.stats["findings_parse_failures"] += 1
            return findings
        
        obj = self.json_repair.parse_best_match(matches, {"items": []})
        items = obj.get("items", [])
        
        if not items:
            if self.debug:
                print(f"[DEBUG] Successfully parsed FINDINGS with 0 items (no vulnerabilities found)")
            self.stats["findings_parse_successes"] += 1
            return findings
        
        if self.debug:
            print(f"[DEBUG] Successfully parsed FINDINGS with {len(items)} items")
        
        self.stats["findings_parse_successes"] += 1
        
        for item in items:
            if not isinstance(item, dict):
                continue
                
            standardized = self._standardize_finding(
                item.copy(),
                func_name=func_name,
                phase="middle",
                default_file=default_file
            )
            
            line_num = standardized["line"]
            file_path = standardized["file"]
            
            # 行番号検証（緩和版 - 警告のみ）
            if not self._validate_line_number(file_path, line_num, project_root):
                print(f"[WARN] Line number {line_num} may be invalid for {file_path}")
                # フォールバックとして vd の行番号を使用
                if vd.get("line"):
                    standardized["line"] = vd["line"]
                    standardized.setdefault("meta", {})["line_coerced"] = True
                    self.stats["line_coercions"] += 1
            
            findings.append({
                "id": standardized["id"],
                "chain": chain,
                "function": standardized["function"],
                "sink_function": standardized["sink_function"],
                "category": standardized.get("rule"),
                "file": file_path,
                "line": standardized["line"],
                "message": standardized.get("why") or "",
                "phase": standardized["phase"],
                "rule_matches": standardized["rule_matches"],
                "rag_refs": item.get("rag_refs", []),
                "code_excerpt": item.get("code_excerpt"),
                "source": "FINDINGS_JSON",
                "meta": standardized.get("meta", {})
            })
            
            if self.debug:
                print(f"[DEBUG] Added finding: {standardized['function']} at {file_path}:{standardized['line']}")
        
        if findings:
            self.stats["inline_findings_found"] += len(findings)
            if self.debug:
                print(f"[DEBUG] Total findings extracted: {len(findings)}")
        
        return findings
    
    def extract_end_findings(
        self,
        resp: Union[str, Dict, Any],
        func_name: str,
        chain: List[str],
        vd: dict,
        project_root: Optional[Path] = None
    ) -> List[dict]:
        """
        END_FINDINGS抽出（型ガード付き）
        """
        findings = []
        default_file = vd.get('current_file', vd.get('file'))
        
        # 型ガード: 文字列以外は空リストを返す
        if not isinstance(resp, str):
            if self.debug:
                print(f"[DEBUG] Non-string response for END_FINDINGS extraction: {type(resp)}")
            return findings
        
        if self.debug:
            print(f"[DEBUG] Attempting to extract END_FINDINGS from response")
        
        # パターンマッチング
        patterns = [
            r'END_FINDINGS\s*=\s*(\{"items"\s*:\s*\[[^\]]*\]\})',
            r'END_FINDINGS\s*=\s*(\{[^}]*"items"[^}]*\})',
            r'END_FINDINGS\s*=\s*(\{.*?\})\s*(?:\n|$)',
            r'^\s*END_FINDINGS\s*=\s*(\{.*\})\s*$',
            r'^\s*END_FINDINGS\s*:\s*(\{.*\})\s*$',
            r'^\s*END_FINDINGS\s*->\s*(\{.*\})\s*$'
        ]
        
        matches = self.json_repair.extract_json_patterns(resp, patterns)
        
        # END_FINDINGSが見つからない場合、FINDINGSにフォールバック
        if not matches:
            if "END_FINDINGS" in resp:
                print(f"[WARN] 'END_FINDINGS' found but no patterns matched")
            
            # FINDINGSを探す
            if "FINDINGS" in resp:
                print(f"[INFO] Falling back to FINDINGS extraction")
                self.stats["fallback_extractions"] += 1
                return self.extract_inline_findings(resp, func_name, chain, vd, project_root)
            
            return findings
        
        obj = self.json_repair.parse_best_match(matches, {"items": []})
        items = obj.get("items", [])
        
        if self.debug:
            print(f"[DEBUG] Successfully parsed END_FINDINGS with {len(items)} items")
        
        for item in items:
            if not isinstance(item, dict):
                continue
                
            std = self._standardize_finding(
                item.copy(),
                func_name=func_name,
                phase="end",
                default_file=default_file
            )
            
            # 行番号検証を緩和（警告のみ、棄却しない）
            if not self._validate_line_number(std.get("file"), std.get("line"), project_root):
                original_line = std.get("line")
                # vdの行番号をフォールバック
                std["line"] = vd.get("line", 1)
                print(f"[WARN] Invalid line {original_line} for {std.get('file')}, using line {std['line']}")
                std.setdefault("meta", {})["line_coerced"] = True
                self.stats["line_coercions"] += 1
            
            # findingを追加（棄却しない）
            findings.append({
                "id": std["id"],
                "chain": chain,
                "function": std["function"],
                "sink_function": std["sink_function"],
                "category": std.get("rule"),
                "file": std.get("file"),
                "line": std.get("line"),
                "message": item.get("why") or std.get("why") or "",
                "phase": std["phase"],
                "rule_matches": std["rule_matches"],
                "rag_refs": item.get("rag_refs", []),
                "code_excerpt": item.get("code_excerpt"),
                "source": "END_FINDINGS",
                "meta": std.get("meta", {})
            })
        
        if findings:
            self.stats["end_findings_found"] += len(findings)
            print(f"[INFO] Extracted {len(findings)} END_FINDINGS")
        
        return findings
    
    def extract_all_findings(
        self,
        resp: Union[str, Dict, Any],
        func_name: str,
        chain: List[str],
        vd: dict,
        project_root: Optional[Path] = None
    ) -> List[dict]:
        """
        応答からFINDINGSとEND_FINDINGSの両方を抽出（型ガード付き）
        """
        all_findings = []
        
        if self.debug:
            print(f"\n[DEBUG] === Extracting findings for function: {func_name} ===")
        
        # FINDINGS（中間）を抽出
        inline_findings = self.extract_inline_findings(
            resp, func_name, chain, vd, project_root
        )
        all_findings.extend(inline_findings)
        
        # END_FINDINGS（最終）を抽出
        end_findings = self.extract_end_findings(
            resp, func_name, chain, vd, project_root
        )
        all_findings.extend(end_findings)
        
        if self.debug:
            print(f"[DEBUG] Total findings extracted: {len(all_findings)} "
                  f"(inline: {len(inline_findings)}, end: {len(end_findings)})")
        
        return all_findings
    
    def _validate_line_number(self, file_path: str, line_num: int, project_root: Optional[Path] = None) -> bool:
        """行番号が有効かチェック（緩和版）"""
        if line_num <= 0:
            return False
        
        # ファイルが存在する場合のみ厳密にチェック
        try:
            if project_root and not Path(file_path).is_absolute():
                file_path = project_root / file_path
            
            if Path(file_path).exists():
                with open(file_path, 'r') as f:
                    total_lines = sum(1 for _ in f)
                    return 1 <= line_num <= total_lines
        except:
            pass
        
        # ファイルが見つからない場合は、妥当な範囲内ならOKとする
        return 1 <= line_num <= 100000
    
    def get_stats(self) -> dict:
        """統計情報を取得"""
        combined_stats = self.stats.copy()
        if hasattr(self, 'json_repair'):
            combined_stats["json_repair"] = self.json_repair.get_stats()
        return combined_stats
    
    def set_debug(self, debug: bool):
        """デバッグモードの設定"""
        self.debug = debug
        if hasattr(self, 'json_repair'):
            self.json_repair.debug = debug

    def parse_detailed_vuln_response(self, resp):
        """vulnerability詳細を抽出（存在すれば抜き出すだけの軽量版）"""
        data = self.extract_json_from_response(resp)
        if not isinstance(data, dict):
            return {}
        fields = [
            "severity", "details", "sink_reached",
            "tainted_parameter", "vulnerability", "vulnerability_found"
        ]
        return {k: data.get(k) for k in fields if k in data}
    
    def should_retry_for_json(self, 
                            response: str, 
                            parsed: Optional[Dict],
                            context: Dict = None) -> Tuple[bool, str]:
        """
        JSON解析をリトライすべきか判定
        
        Returns:
            (should_retry, reason)
        """
        # 完全に空
        if not response or response.strip() == "":
            return True, "empty_response"
        
        # parseは失敗したがJSONっぽい構造がある
        if parsed is None or "raw_response" in parsed:
            if any(marker in response for marker in ['"function"', '"propagation"', '"sinks"']):
                return True, "partial_json_detected"
        
        # FINDINGSが期待されるが存在しない
        if context and context.get("expects_findings"):
            if "FINDINGS" not in response and "END_FINDINGS" not in response:
                return True, "missing_findings"
        
        # 脆弱性ありだがFindingsなし
        if parsed and parsed.get("vulnerability_found") == "yes":
            if "FINDINGS" not in response:
                return True, "vulnerability_without_findings"
        
        return False, "no_retry_needed"
    
    def validate_json_response(self, parsed: Dict) -> Tuple[bool, List[str]]:
        """
        JSON レスポンスの妥当性を検証
        
        Returns:
            (is_valid, missing_fields)
        """
        required_fields = {
            "function", "propagation", "sanitizers", 
            "sinks", "evidence", "rule_matches"
        }
        
        if not parsed or "raw_response" in parsed:
            return False, list(required_fields)
        
        missing = required_fields - set(parsed.keys())
        return len(missing) == 0, list(missing)