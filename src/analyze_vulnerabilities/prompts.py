#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
prompts.py - LLMプロンプトテンプレート
"""

MIDDLE_PROMPT_EXTERNAL_TEMPLATE = """Continue to analyze the external function according to the above taint analysis results. This is a TEE API function whose implementation is not available, but its behavior is known.

{code}

Based on the function's known behavior and the tainted data flow:
1. Analyze how the tainted parameters affect this function
2. Identify potential security issues
3. Consider the function's typical implementation

Continue the taint analysis:
- Previous taint state: [summary from previous analysis]
- Impact of this function: [how it processes tainted data]
- Security implications: [potential vulnerabilities]
"""

START_PROMPT_TEMPLATE = """As a program analyst, I give you snippets of C code generated by decompilation, using <{source_function}> as the taint source, and the <{param_name}> parameter marked as the taint label to extract the taint data flow. Pay attention to the data alias and tainted data operations. Output in the form of data flows.

<Code to be analyzed>
{code}
</Code to be analyzed>

Please analyze the taint flow step by step:
1. Identify where the tainted parameter enters the function
2. Track how the tainted data propagates through variables and operations
3. Note any data aliases (pointers, references, copies)
4. Identify where the tainted data reaches potentially dangerous operations

Output the taint flow in this format:
- Source: [function name and parameter]
- Flow: [step-by-step propagation]
- Sinks: [dangerous operations reached by tainted data]
"""

MIDDLE_PROMPT_TEMPLATE = """Continue to analyze function according to the above taint analysis results. Pay attention to the data alias and tainted data operations. (Note the new taint source <{source_function}> and the <{param_name}> parameter marked as the taint label.)

<Code to be analyzed>
{code}
</Code to be analyzed>

Continue the taint analysis:
1. Track how the previously identified tainted data flows into this function
2. Follow the taint propagation through this function
3. Identify any new dangerous operations

Output the continued taint flow:
- Previous taint state: [summary from previous analysis]
- Flow in this function: [step-by-step propagation]
- New sinks: [any new dangerous operations]
"""

END_PROMPT_TEMPLATE = """Based on the above taint analysis results, analyze whether the code has vulnerabilities. If there is a vulnerability, please explain what kind of vulnerability according to CWE.

Summary of taint analysis:
{taint_summary}

Please analyze:
1. Does the tainted data from user input reach any dangerous operations without proper validation?
2. What type of vulnerability does this represent?
3. Which CWE (Common Weakness Enumeration) best describes this vulnerability?

Output:
- Vulnerability found: [Yes/No]
- Vulnerability type: [if yes, describe the vulnerability]
- CWE classification: [relevant CWE-ID and name]
- Severity assessment: [High/Medium/Low]
- Exploitation scenario: [brief description of how this could be exploited]
"""

def get_start_prompt(source_function: str, param_name: str, code: str) -> str:
    """スタートプロンプトを生成"""
    return START_PROMPT_TEMPLATE.format(
        source_function=source_function,
        param_name=param_name,
        code=code
    )

def get_middle_prompt(source_function: str, param_name: str, code: str) -> str:
    """中間プロンプトを生成"""
    # 外部関数かどうかをコードから判定
    if "// External function:" in code:
        return MIDDLE_PROMPT_EXTERNAL_TEMPLATE.format(code=code)
    else:
        return MIDDLE_PROMPT_TEMPLATE.format(
            source_function=source_function,
            param_name=param_name,
            code=code
        )

def get_end_prompt(taint_summary: str) -> str:
    """エンドプロンプトを生成"""
    return END_PROMPT_TEMPLATE.format(
        taint_summary=taint_summary
    )