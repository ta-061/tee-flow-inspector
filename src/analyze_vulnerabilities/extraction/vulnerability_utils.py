#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
脆弱性解析ユーティリティ
ID生成とルール管理のみを担当
"""

import hashlib
from typing import Dict, List, Optional, Tuple
from pathlib import Path
from .unified_parser import UnifiedLLMResponseParser


class VulnerabilityUtils:
    """脆弱性解析のユーティリティ機能"""
    
    def __init__(self, debug=False):
        self.debug = debug
        self.parser = UnifiedLLMResponseParser(debug=debug)
        self.known_rules = [
            "unencrypted_output",
            "weak_input_validation", 
            "shared_memory_overwrite"
        ]
        
        # 統計情報（後方互換性のため）
        self.stats = {
            "vulnerabilities_found": 0,
            "total_parses": 0
        }
    
    def set_known_rules(self, rules_json: dict):
        """CodeQLルールから既知のrule_idリストを設定"""
        ids = []
        for k in ("detection_rules", "rules"):
            for rule in (rules_json.get(k) or []):
                rid = rule.get("rule_id")
                if rid:
                    ids.append(rid)
        if ids:
            self.known_rules = sorted(set(ids))
    
    def make_finding_id(self, file_path: str, function: str, 
                        primary_rule_id: str, line: int, bucket: int = 2) -> str:
        """脆弱性発見項目のユニークIDを生成"""
        key = f"{file_path}:{function}:{primary_rule_id}:{line // max(1, bucket)}"
        return hashlib.sha1(key.encode()).hexdigest()[:12]
    
    def parse_vuln_response(self, resp: str) -> Tuple[bool, dict]:
        """脆弱性判定レスポンスをパース（後方互換性）"""
        self.stats["total_parses"] += 1
        result = self.parser.parse_complete_response(resp, "end")
        
        vuln_decision = result.get("vulnerability_decision", {})
        vuln_found = vuln_decision.get("found", False)
        
        if vuln_found:
            self.stats["vulnerabilities_found"] += 1
        
        return vuln_found, vuln_decision.get("raw", {})
    
    def parse_detailed_vuln_response(self, resp: str) -> Dict:
        """vulnerability詳細を抽出（後方互換性）"""
        result = self.parser.parse_complete_response(resp, "end")
        return result.get("vulnerability_details", {})
    
    # 後方互換性のための委譲メソッド
    def extract_json_from_response(self, response):
        return self.parser.extract_json_from_response(response)
    
    def extract_inline_findings(self, resp, func_name, chain, vd, project_root=None):
        result = self.parser.parse_complete_response(resp, "middle")
        return result.get("findings", [])
    
    def extract_end_findings(self, resp, func_name, chain, vd, project_root=None):
        result = self.parser.parse_complete_response(resp, "end")
        return result.get("end_findings", [])
    
    def get_stats(self) -> dict:
        stats = self.stats.copy()
        stats.update(self.parser.get_stats())
        return stats