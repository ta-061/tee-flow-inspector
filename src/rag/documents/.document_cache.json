{
  "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf": {
    "hash": "f64399727f0108b996a0717edc687bde",
    "loaded_at": "2025-07-24T05:00:05.105891",
    "document_type": "TEE_Internal_API",
    "page_count": 375,
    "documents": [
      {
        "page_content": "GlobalPlatform Technology\nTEE Internal Core API Specification\nVersion 1.3.1\nPublic Release\nJuly 2021\nDocument Reference: GPD_SPE_010\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nRecipients of this document are invited to submit, with their comments, notification of any relevant patents\nor other intellectual property rights (collectively, “IPR”) of which they may be aware which might be\nnecessarily infringed by the implementation of the specification or other work product set forth in this\ndocument, and to provide supporting documentation. The technology provided or described herein is\nsubject to updates, revisions, and extensions by GlobalPlatform. Use of this information is governed by\nthe GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 1,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 1",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1\nTHIS SPECIFICATION OR OTHER WORK PRODUCT IS BEING OFFERED WITHOUT ANY WARRANTY\nWHATSOEVER, AND IN PARTICULAR, ANY WARRANTY OF NON-INFRINGEMENT IS EXPRESSLY\nDISCLAIMED. ANY IMPLEMENTATION OF THIS SPECIFICATION OR OTHER WORK PRODUCT SHALL\nBE MADE ENTIRELY AT THE IMPLEMENTER’S OWN RISK, AND NEITHER THE COMPANY, NOR ANY\nOF ITS MEMBERS OR SUBMITTERS, SHALL HAVE ANY LIABILITY WHATSOEVER TO ANY\nIMPLEMENTER OR THIRD PARTY FOR ANY DAMAGES OF ANY NATURE WHATSOEVER DIRECTLY\nOR INDIRECTLY ARISING FROM THE IMPLEMENTATION OF THIS SPECIFICATION OR OTHER\nWORK PRODUCT.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 2,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 2",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 3 / 375\nContents\n1 Introduction .............................................................................................................................1 4\n1.1 Audience ............................................................................................................................................. 14\n1.2 IPR Disclaimer .................................................................................................................................... 15\n1.3 References .......................................................................................................................................... 15\n1.4 Terminology and Definitions ................................................................................................................ 17\n1.5 Abbreviations and Notations ............................................................................................................... 21\n1.6 Revision History .................................................................................................................................. 23\n2 Overview of the TEE Internal Core API Specification ..........................................................2 7\n2.1 Trusted Applications ............................................................................................................................ 28\n2.1.1 TA Interface .................................................................................................................................. 29\n2.1.2 Instances, Sessions, Tasks, and Commands .............................................................................. 30\n2.1.3 Sequential Execution of Entry Points ........................................................................................... 30\n2.1.4 Cancellations ................................................................................................................................ 30\n2.1.5 Unexpected Client Termination .................................................................................................... 31\n2.1.6 Instance Types ............................................................................................................................. 31\n2.1.7 Configuration, Development, and Management .......................................................................... 31\n2.2 TEE Internal Core APIs ....................................................................................................................... 32\n2.2.1 Trusted Core Framework API ...................................................................................................... 32\n2.2.2 Trusted Storage API for Data and Keys ....................................................................................... 32\n2.2.3 Cryptographic Operations API ..................................................................................................... 33\n2.2.4 Time API ....................................................................................................................................... 33\n2.2.5 TEE Arithmetical API .................................................................................................................... 34\n2.2.6 Peripheral and Event APIs ........................................................................................................... 34\n2.3 Error Handling ..................................................................................................................................... 35\n2.3.1 Normal Errors ............................................................................................................................... 35\n2.3.2 Programmer Errors ...................................................................................................................... 35\n2.3.3 Panics ........................................................................................................................................... 35\n2.4 Opaque Handles ................................................................................................................................. 37\n2.5 Properties ............................................................................................................................................ 38\n2.6 Support for Peripherals and Events .................................................................................................... 38\n2.7 Reserved C Language Identifiers ....................................................................................................... 39\n2.8 Long Identifiers .................................................................................................................................... 39\n3 Common Definitions ...............................................................................................................4 0\n3.1 Header File .......................................................................................................................................... 40\n3.1.1 API Version .................................................................................................................................. 40\n3.1.2 Target and Version Optimization ................................................................................................. 41\n3.1.3 Support for Optional Capabilities ................................................................................................. 42\n3.2 Data Types .......................................................................................................................................... 43\n3.2.1 Basic Types .................................................................................................................................. 43\n3.2.2 Bit Numbering .............................................................................................................................. 43\n3.2.3 TEE_Result, TEEC_Result .......................................................................................................... 44\n3.2.4 TEE_UUID, TEEC_UUID ............................................................................................................. 45\n3.3 Constants ............................................................................................................................................ 46\n3.3.1 Return Code Ranges and Format ................................................................................................ 46\n3.3.2 Return Codes ............................................................................................................................... 46\n3.3.3 Declaring Constants ..................................................................................................................... 48\n3.4 Parameter Annotations ....................................................................................................................... 49\n3.4.1 [in], [out], and [inout] ..................................................................................................................... 49\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 3,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "1.1 Audience ............................................................................................................................................. 14",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "4 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n3.4.2 [outopt] ......................................................................................................................................... 49\n3.4.3 [inbuf] and [inoutbuf] ..................................................................................................................... 50\n3.4.4 [outbuf] ......................................................................................................................................... 50\n3.4.5 [outbufopt] .................................................................................................................................... 51\n3.4.6 [instring] and [instringopt] ............................................................................................................. 51\n3.4.7 [outstring] and [outstringopt] ........................................................................................................ 51\n3.4.8 [ctx] ............................................................................................................................................... 51\n3.5 Backward Compatibility ....................................................................................................................... 52\n3.5.1 Version Compatibility Definitions ................................................................................................. 52\n4 Trusted Core Framework API ................................................................................................. 54\n4.1 Data Types .......................................................................................................................................... 55\n4.1.1 TEE_Identity ................................................................................................................................. 55\n4.1.2 TEE_Param .................................................................................................................................. 55\n4.1.3 TEE_TASessionHandle ............................................................................................................... 56\n4.1.4 TEE_PropSetHandle .................................................................................................................... 56\n4.2 Constants ............................................................................................................................................ 57\n4.2.1 Parameter Types .......................................................................................................................... 57\n4.2.2 Login Types .................................................................................................................................. 57\n4.2.3 Origin Codes ................................................................................................................................ 58\n4.2.4 Property Set Pseudo-Handles ..................................................................................................... 58\n4.2.5 Memory Access Rights ................................................................................................................ 58\n4.3 TA Interface ......................................................................................................................................... 59\n4.3.1 TA_CreateEntryPoint ................................................................................................................... 62\n4.3.2 TA_DestroyEntryPoint .................................................................................................................. 62\n4.3.3 TA_OpenSessionEntryPoint ........................................................................................................ 63\n4.3.4 TA_CloseSessionEntryPoint ........................................................................................................ 65\n4.3.5 TA_InvokeCommandEntryPoint ................................................................................................... 66\n4.3.6 Operation Parameters in the TA Interface ................................................................................... 67\n4.4 Property Access Functions ................................................................................................................. 71\n4.4.1 TEE_GetPropertyAsString ........................................................................................................... 73\n4.4.2 TEE_GetPropertyAsBool ............................................................................................................. 74\n4.4.3 TEE_GetPropertyAsUnn .............................................................................................................. 75\n4.4.4 TEE_GetPropertyAsBinaryBlock ................................................................................................. 77\n4.4.5 TEE_GetPropertyAsUUID ............................................................................................................ 78\n4.4.6 TEE_GetPropertyAsIdentity ......................................................................................................... 79\n4.4.7 TEE_AllocatePropertyEnumerator ............................................................................................... 80\n4.4.8 TEE_FreePropertyEnumerator .................................................................................................... 80\n4.4.9 TEE_StartPropertyEnumerator .................................................................................................... 81\n4.4.10 TEE_ResetPropertyEnumerator .................................................................................................. 81\n4.4.11 TEE_GetPropertyName ............................................................................................................... 82\n4.4.12 TEE_GetNextProperty ................................................................................................................. 83\n4.5 Trusted Application Configuration Properties ..................................................................................... 84\n4.6 Client Properties .................................................................................................................................. 87\n4.7 Implementation Properties .................................................................................................................. 89\n4.7.1 Specification Version Number Property ....................................................................................... 96\n4.8 Panics .................................................................................................................................................. 97\n4.8.1 TEE_Panic ................................................................................................................................... 97\n4.9 Internal Client API ............................................................................................................................... 98\n4.9.1 TEE_OpenTASession .................................................................................................................. 98\n4.9.2 TEE_CloseTASession ................................................................................................................ 100\n4.9.3 TEE_InvokeTACommand .......................................................................................................... 101\n4.9.4 Operation Parameters in the Internal Client API ........................................................................ 103\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 4,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.4.2 [outopt] ......................................................................................................................................... 49",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 5 / 375\n4.10 Cancellation Functions ...................................................................................................................... 105\n4.10.1 TEE_GetCancellationFlag .......................................................................................................... 106\n4.10.2 TEE_UnmaskCancellation ......................................................................................................... 107\n4.10.3 TEE_MaskCancellation .............................................................................................................. 107\n4.11 Memory Management Functions....................................................................................................... 108\n4.11.1 TEE_CheckMemoryAccessRights ............................................................................................. 108\n4.11.2 TEE_SetInstanceData ................................................................................................................ 111\n4.11.3 TEE_GetInstanceData ............................................................................................................... 112\n4.11.4 TEE_Malloc ................................................................................................................................ 113\n4.11.5 TEE_Realloc .............................................................................................................................. 115\n4.11.6 TEE_Free ................................................................................................................................... 117\n4.11.7 TEE_MemMove ......................................................................................................................... 118\n4.11.8 TEE_MemCompare ................................................................................................................... 119\n4.11.9 TEE_MemFill .............................................................................................................................. 120\n5 Trusted Storage API for Data and Keys ..............................................................................1 21\n5.1 Summary of Features and Design .................................................................................................... 121\n5.2 Trusted Storage and Rollback Protection ......................................................................................... 125\n5.3 Data Types ........................................................................................................................................ 126\n5.3.1 TEE_Attribute ............................................................................................................................. 126\n5.3.2 TEE_ObjectInfo .......................................................................................................................... 127\n5.3.3 TEE_Whence ............................................................................................................................. 127\n5.3.4 TEE_ObjectHandle .................................................................................................................... 128\n5.3.5 TEE_ObjectEnumHandle ........................................................................................................... 128\n5.4 Constants .......................................................................................................................................... 129\n5.4.1 Constants Used in Trusted Storage API for Data and Keys ...................................................... 129\n5.4.2 Constants Used in Cryptographic Operations API ..................................................................... 131\n5.5 Generic Object Functions .................................................................................................................. 132\n5.5.1 TEE_GetObjectInfo1 .................................................................................................................. 132\n5.5.2 TEE_RestrictObjectUsage1 ....................................................................................................... 134\n5.5.3 TEE_GetObjectBufferAttribute ................................................................................................... 135\n5.5.4 TEE_GetObjectValueAttribute ................................................................................................... 137\n5.5.5 TEE_CloseObject ....................................................................................................................... 138\n5.6 Transient Object Functions ............................................................................................................... 139\n5.6.1 TEE_AllocateTransientObject .................................................................................................... 139\n5.6.2 TEE_FreeTransientObject ......................................................................................................... 143\n5.6.3 TEE_ResetTransientObject ....................................................................................................... 143\n5.6.4 TEE_PopulateTransientObject .................................................................................................. 144\n5.6.5 TEE_InitRefAttribute, TEE_InitValueAttribute ............................................................................ 149\n5.6.6 TEE_CopyObjectAttributes1 ...................................................................................................... 151\n5.6.7 TEE_GenerateKey ..................................................................................................................... 153\n5.7 Persistent Object Functions .............................................................................................................. 157\n5.7.1 TEE_OpenPersistentObject ....................................................................................................... 157\n5.7.2 TEE_CreatePersistentObject ..................................................................................................... 159\n5.7.3 Persistent Object Sharing Rules ................................................................................................ 162\n5.7.4 TEE_CloseAndDeletePersistentObject1 .................................................................................... 164\n5.7.5 TEE_RenamePersistentObject .................................................................................................. 165\n5.8 Persistent Object Enumeration Functions ......................................................................................... 166\n5.8.1 TEE_AllocatePersistentObjectEnumerator ................................................................................ 166\n5.8.2 TEE_FreePersistentObjectEnumerator ..................................................................................... 166\n5.8.3 TEE_ResetPersistentObjectEnumerator ................................................................................... 167\n5.8.4 TEE_StartPersistentObjectEnumerator ..................................................................................... 168\n5.8.5 TEE_GetNextPersistentObject .................................................................................................. 169\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 5,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.10 Cancellation Functions ...................................................................................................................... 105",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "6 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n5.9 Data Stream Access Functions ......................................................................................................... 171\n5.9.1 TEE_ReadObjectData ................................................................................................................ 171\n5.9.2 TEE_WriteObjectData ................................................................................................................ 173\n5.9.3 TEE_TruncateObjectData .......................................................................................................... 175\n5.9.4 TEE_SeekObjectData ................................................................................................................ 176\n6 Cryptographic Operations API .............................................................................................1 78\n6.1 Data Types ........................................................................................................................................ 181\n6.1.1 TEE_OperationMode ................................................................................................................. 181\n6.1.2 TEE_OperationInfo .................................................................................................................... 182\n6.1.3 TEE_OperationInfoMultiple ........................................................................................................ 182\n6.1.4 TEE_OperationHandle ............................................................................................................... 183\n6.2 Generic Operation Functions ............................................................................................................ 184\n6.2.1 TEE_AllocateOperation .............................................................................................................. 184\n6.2.2 TEE_FreeOperation ................................................................................................................... 189\n6.2.3 TEE_GetOperationInfo ............................................................................................................... 190\n6.2.4 TEE_GetOperationInfoMultiple .................................................................................................. 192\n6.2.5 TEE_ResetOperation ................................................................................................................. 194\n6.2.6 TEE_SetOperationKey ............................................................................................................... 195\n6.2.7 TEE_SetOperationKey2 ............................................................................................................. 198\n6.2.8 TEE_CopyOperation .................................................................................................................. 200\n6.2.9 TEE_IsAlgorithmSupported........................................................................................................ 201\n6.3 Message Digest Functions ................................................................................................................ 202\n6.3.1 TEE_DigestUpdate .................................................................................................................... 203\n6.3.2 TEE_DigestDoFinal .................................................................................................................... 204\n6.3.3 TEE_DigestExtract ..................................................................................................................... 205\n6.4 Symmetric Cipher Functions ............................................................................................................. 206\n6.4.1 TEE_CipherInit ........................................................................................................................... 207\n6.4.2 TEE_CipherUpdate .................................................................................................................... 209\n6.4.3 TEE_CipherDoFinal ................................................................................................................... 210\n6.5 MAC Functions .................................................................................................................................. 211\n6.5.1 TEE_MACInit ............................................................................................................................. 212\n6.5.2 TEE_MACUpdate ....................................................................................................................... 213\n6.5.3 TEE_MACComputeFinal ............................................................................................................ 214\n6.5.4 TEE_MACCompareFinal ............................................................................................................ 215\n6.6 Authenticated Encryption Functions ................................................................................................. 216\n6.6.1 TEE_AEInit ................................................................................................................................. 217\n6.6.2 TEE_AEUpdateAAD .................................................................................................................. 219\n6.6.3 TEE_AEUpdate .......................................................................................................................... 220\n6.6.4 TEE_AEEncryptFinal ................................................................................................................. 222\n6.6.5 TEE_AEDecryptFinal ................................................................................................................. 223\n6.7 Asymmetric Functions ....................................................................................................................... 224\n6.7.1 TEE_AsymmetricEncrypt, TEE_AsymmetricDecrypt ................................................................. 225\n6.7.2 TEE_AsymmetricSignDigest ...................................................................................................... 228\n6.7.3 TEE_AsymmetricVerifyDigest .................................................................................................... 231\n6.8 Key Derivation Functions .................................................................................................................. 233\n6.8.1 TEE_DeriveKey .......................................................................................................................... 233\n6.9 Random Data Generation Function .................................................................................................. 237\n6.9.1 TEE_GenerateRandom .............................................................................................................. 237\n6.10 Cryptographic Algorithms Specification ............................................................................................ 238\n6.10.1 List of Algorithm Identifiers ......................................................................................................... 238\n6.10.2 Object Types .............................................................................................................................. 242\n6.10.3 Optional Cryptographic Elements .............................................................................................. 244\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 6,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.9 Data Stream Access Functions ......................................................................................................... 171",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 7 / 375\n6.11 Object or Operation Attributes........................................................................................................... 246\n7 Time API ................................................................................................................................. 250\n7.1 Data Types ........................................................................................................................................ 251\n7.1.1 TEE_Time .................................................................................................................................. 251\n7.2 Time Functions .................................................................................................................................. 252\n7.2.1 TEE_GetSystemTime ................................................................................................................ 252\n7.2.2 TEE_Wait ................................................................................................................................... 253\n7.2.3 TEE_GetTAPersistentTime ........................................................................................................ 254\n7.2.4 TEE_SetTAPersistentTime ........................................................................................................ 256\n7.2.5 TEE_GetREETime ..................................................................................................................... 257\n8 TEE Arithmetical API .............................................................................................................2 58\n8.1 Introduction........................................................................................................................................ 258\n8.2 Error Handling and Parameter Checking .......................................................................................... 259\n8.3 Data Types ........................................................................................................................................ 260\n8.3.1 TEE_BigInt ................................................................................................................................. 260\n8.3.2 TEE_BigIntFMMContext ............................................................................................................ 261\n8.3.3 TEE_BigIntFMM ......................................................................................................................... 261\n8.4 Memory Allocation and Size of Objects ............................................................................................ 262\n8.4.1 TEE_BigIntSizeInU32 ................................................................................................................ 262\n8.4.2 TEE_BigIntFMMContextSizeInU32 ............................................................................................ 263\n8.4.3 TEE_BigIntFMMSizeInU32 ........................................................................................................ 264\n8.5 Initialization Functions ....................................................................................................................... 265\n8.5.1 TEE_BigIntInit ............................................................................................................................ 265\n8.5.2 TEE_BigIntInitFMMContext1...................................................................................................... 266\n8.5.3 TEE_BigIntInitFMM .................................................................................................................... 267\n8.6 Converter Functions .......................................................................................................................... 268\n8.6.1 TEE_BigIntConvertFromOctetString .......................................................................................... 268\n8.6.2 TEE_BigIntConvertToOctetString .............................................................................................. 269\n8.6.3 TEE_BigIntConvertFromS32 ...................................................................................................... 270\n8.6.4 TEE_BigIntConvertToS32 .......................................................................................................... 271\n8.7 Logical Operations ............................................................................................................................ 272\n8.7.1 TEE_BigIntCmp ......................................................................................................................... 272\n8.7.2 TEE_BigIntCmpS32 ................................................................................................................... 272\n8.7.3 TEE_BigIntShiftRight ................................................................................................................. 273\n8.7.4 TEE_BigIntGetBit ....................................................................................................................... 274\n8.7.5 TEE_BigIntGetBitCount ............................................................................................................. 274\n8.7.6 TEE_BigIntSetBit ....................................................................................................................... 275\n8.7.7 TEE_BigIntAssign ...................................................................................................................... 276\n8.7.8 TEE_BigIntAbs ........................................................................................................................... 277\n8.8 Basic Arithmetic Operations .............................................................................................................. 278\n8.8.1 TEE_BigIntAdd ........................................................................................................................... 278\n8.8.2 TEE_BigIntSub ........................................................................................................................... 279\n8.8.3 TEE_BigIntNeg .......................................................................................................................... 280\n8.8.4 TEE_BigIntMul ........................................................................................................................... 281\n8.8.5 TEE_BigIntSquare ..................................................................................................................... 282\n8.8.6 TEE_BigIntDiv ............................................................................................................................ 283\n8.9 Modular Arithmetic Operations.......................................................................................................... 284\n8.9.1 TEE_BigIntMod .......................................................................................................................... 284\n8.9.2 TEE_BigIntAddMod .................................................................................................................... 285\n8.9.3 TEE_BigIntSubMod .................................................................................................................... 286\n8.9.4 TEE_BigIntMulMod .................................................................................................................... 287\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 7,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.11 Object or Operation Attributes........................................................................................................... 246",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "8 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.9.5 TEE_BigIntSquareMod .............................................................................................................. 288\n8.9.6 TEE_BigIntInvMod ..................................................................................................................... 289\n8.9.7 TEE_BigIntExpMod .................................................................................................................... 290\n8.10 Other Arithmetic Operations .............................................................................................................. 291\n8.10.1 TEE_BigIntRelativePrime ........................................................................................................... 291\n8.10.2 TEE_BigIntComputeExtendedGcd ............................................................................................ 292\n8.10.3 TEE_BigIntIsProbablePrime ...................................................................................................... 293\n8.11 Fast Modular Multiplication Operations ............................................................................................. 294\n8.11.1 TEE_BigIntConvertToFMM ........................................................................................................ 294\n8.11.2 TEE_BigIntConvertFromFMM .................................................................................................... 295\n8.11.3 TEE_BigIntComputeFMM .......................................................................................................... 296\n9 Peripheral and Event APIs ....................................................................................................2 97\n9.1 Introduction........................................................................................................................................ 297\n9.1.1 Peripherals ................................................................................................................................. 297\n9.1.2 Event Loop ................................................................................................................................. 299\n9.1.3 Peripheral State ......................................................................................................................... 299\n9.1.4 Overview of Peripheral and Event APIs ..................................................................................... 299\n9.2 Constants .......................................................................................................................................... 302\n9.2.1 Handles ...................................................................................................................................... 302\n9.2.2 Maximum Sizes .......................................................................................................................... 302\n9.2.3 TEE_EVENT_TYPE ................................................................................................................... 302\n9.2.4 TEE_PERIPHERAL_TYPE ........................................................................................................ 304\n9.2.5 TEE_PERIPHERAL_FLAGS...................................................................................................... 305\n9.2.6 TEE_PeripheralStateId Values .................................................................................................. 306\n9.3 Peripheral State Table ...................................................................................................................... 307\n9.3.1 Peripheral Name ........................................................................................................................ 307\n9.3.2 Firmware Information ................................................................................................................. 307\n9.3.3 Manufacturer .............................................................................................................................. 308\n9.3.4 Flags ........................................................................................................................................... 308\n9.3.5 Exclusive Access ....................................................................................................................... 308\n9.4 Operating System Pseudo-peripheral ............................................................................................... 309\n9.4.1 State Table ................................................................................................................................. 309\n9.4.2 Events ........................................................................................................................................ 309\n9.5 Session Pseudo-peripheral ............................................................................................................... 310\n9.5.1 State Table ................................................................................................................................. 310\n9.5.2 Events ........................................................................................................................................ 310\n9.6 Data Structures ................................................................................................................................. 311\n9.6.1 TEE_Peripheral .......................................................................................................................... 311\n9.6.2 TEE_PeripheralDescriptor ......................................................................................................... 312\n9.6.3 TEE_PeripheralHandle .............................................................................................................. 313\n9.6.4 TEE_PeripheralId ....................................................................................................................... 313\n9.6.5 TEE_PeripheralState ................................................................................................................. 314\n9.6.6 TEE_PeripheralStateId .............................................................................................................. 315\n9.6.7 TEE_PeripheralValueType ......................................................................................................... 315\n9.6.8 TEE_Event ................................................................................................................................. 316\n9.6.9 Generic Payloads ....................................................................................................................... 317\n9.6.10 TEE_EventQueueHandle ........................................................................................................... 319\n9.6.11 TEE_EventSourceHandle .......................................................................................................... 320\n9.7 Peripheral API Functions .................................................................................................................. 321\n9.7.1 TEE_Peripheral_Close ............................................................................................................... 321\n9.7.2 TEE_Peripheral_CloseMultiple .................................................................................................. 322\n9.7.3 TEE_Peripheral_GetPeripherals ................................................................................................ 323\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 8,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.9.5 TEE_BigIntSquareMod .............................................................................................................. 288",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 9 / 375\n9.7.4 TEE_Peripheral_GetState .......................................................................................................... 325\n9.7.5 TEE_Peripheral_GetStateTable ................................................................................................ 326\n9.7.6 TEE_Peripheral_Open ............................................................................................................... 327\n9.7.7 TEE_Peripheral_OpenMultiple................................................................................................... 329\n9.7.8 TEE_Peripheral_Read ............................................................................................................... 331\n9.7.9 TEE_Peripheral_SetState .......................................................................................................... 333\n9.7.10 TEE_Peripheral_Write ............................................................................................................... 334\n9.8 Event API Functions .......................................................................................................................... 335\n9.8.1 TEE_Event_AddSources ........................................................................................................... 335\n9.8.2 TEE_Event_CancelSources....................................................................................................... 336\n9.8.3 TEE_Event_CloseQueue ........................................................................................................... 337\n9.8.4 TEE_Event_DropSources .......................................................................................................... 338\n9.8.5 TEE_Event_ListSources ............................................................................................................ 339\n9.8.6 TEE_Event_OpenQueue ........................................................................................................... 340\n9.8.7 TEE_Event_TimerCreate ........................................................................................................... 342\n9.8.8 TEE_Event_Wait ........................................................................................................................ 343\nAnnex A Panicked Function Identification .............................................................................3 45\nAnnex B Deprecated Functions, Identifiers, etc. ....................................................................3 51\nB.1 Deprecated Functions ....................................................................................................................... 351\nB.1.1 TEE_GetObjectInfo – Deprecated ............................................................................................. 351\nB.1.2 TEE_RestrictObjectUsage – Deprecated .................................................................................. 353\nB.1.3 TEE_CopyObjectAttributes – Deprecated ................................................................................. 354\nB.1.4 TEE_CloseAndDeletePersistentObject – Deprecated ............................................................... 355\nB.1.5 TEE_BigIntInitFMMContext – Deprecated ................................................................................. 356\nB.2 Deprecated Object Identifiers............................................................................................................ 357\nB.3 Deprecated Algorithm Identifiers ....................................................................................................... 358\nB.4 Deprecated Properties ...................................................................................................................... 360\nB.5 Deprecated Object or Operation Attributes ....................................................................................... 361\nB.6 Deprecated API Return Codes.......................................................................................................... 362\nAnnex C Normative References for Algorithms .....................................................................3 63\nAnnex D Peripheral API Usage (Informative) ..........................................................................3 68\nFunctions ......................................................................................................................................3 72\nFunctions by Category ................................................................................................................3 74\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 9,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.7.4 TEE_Peripheral_GetState .......................................................................................................... 325",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "10 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nFigures\nFigure 2-1: Trusted Application Interactions with the Trusted OS ................................................................... 29\nFigure 5-1: State Diagram for TEE_ObjectHandle (Informative) ................................................................ 124\nFigure 6-1: State Diagram for TEE_OperationHandle for Message Digest Functions (Informative) ......... 202\nFigure 6-2: State Diagram for TEE_OperationHandle for Symmetric Cipher Functions (Informative) ...... 206\nFigure 6-3: State Diagram for TEE_OperationHandle for MAC Functions (Informative) ........................... 211\nFigure 6-4: State Diagram for TEE_OperationHandle for Authenticated Encryption Functions\n(Informative) ................................................................................................................................ 216\nFigure 6-5: State Diagram for TEE_OperationHandle for Asymmetric Functions (Informative) ................ 224\nFigure 6-6: State Diagram for TEE_OperationHandle for Key Derivation Functions (Informative) ........... 233\nFigure 7-1: Persistent Time Status State Machine ........................................................................................ 254\nFigure 9-1: Example of Multiple Access to Bus-oriented Peripheral (Informative) ........................................ 298\nFigure 9-2: Peripheral API Overview ............................................................................................................. 300\nFigure 9-3: Event API Overview .................................................................................................................... 301\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 10,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 10",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_ObjectHandle",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 11 / 375\nTables\nTable 1-1: Normative References .................................................................................................................... 15\nTable 1-2: Informative References .................................................................................................................. 16\nTable 1-3: Terminology and Definitions ........................................................................................................... 17\nTable 1-4: Abbreviations .................................................................................................................................. 21\nTable 1-5: Revision History ............................................................................................................................. 23\nTable 2-1: Handle Types ................................................................................................................................. 37\nTable 3-0: Internal API Names Strings Definition ............................................................................................ 42\nTable 3-1: UUID Usage Reservations ............................................................................................................. 45\nTable 3-2: Return Code Formats and Ranges ................................................................................................ 46\nTable 3-3: API Return Codes .......................................................................................................................... 47\nTable 4-1: Parameter Type Constants ............................................................................................................ 57\nTable 4-2: Login Type Constants .................................................................................................................... 57\nTable 4-3: Origin Code Constants ................................................................................................................... 58\nTable 4-4: Property Set Pseudo-Handle Constants ........................................................................................ 58\nTable 4-5: Memory Access Rights Constants ................................................................................................. 58\nTable 4-6: TA Interface Functions ................................................................................................................... 59\nTable 4-7: Effect of Client Operation on TA Interface ..................................................................................... 60\nTable 4-8: Content of params[i] when Trusted Application Entry Point Is Called ....................................... 68\nTable 4-9: Interpretation of params[i] when Trusted Application Entry Point Returns ............................... 69\nTable 4-10: Property Sets ................................................................................................................................ 71\nTable 4-11: Trusted Application Standard Configuration Properties ............................................................... 84\nTable 4-12: Standard Client Properties ........................................................................................................... 87\nTable 4-13: Client Identities ............................................................................................................................. 87\nTable 4-14: Implementation Properties ........................................................................................................... 89\nTable 4-14b: Specification Version Number Property – 32-bit Integer Structure ............................................ 96\nTable 4-15: Interpretation of params[i] on Entry to Internal Client API ..................................................... 103\nTable 4-16: Effects of Internal Client API on params[i] ............................................................................. 103\nTable 4-17: Valid Hint Values ........................................................................................................................ 113\nTable 5-1: Values of Trusted Storage Space Rollback Protection Properties [obsolete] .............................. 125\nTable 5-1b: TEE_Whence Constants ............................................................................................................. 127\nTable 5-2: Object Storage Constants ............................................................................................................ 129\nTable 5-3: Data Flag Constants ..................................................................................................................... 129\nTable 5-4: Usage Constants .......................................................................................................................... 130\nTable 5-4b: Miscellaneous Constants [formerly Table 5-8] ........................................................................... 130\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 11,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 11",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "12 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nTable 5-5: Handle Flag Constants ................................................................................................................. 131\nTable 5-6: Operation Constants .................................................................................................................... 131\nTable 5-7: Operation States .......................................................................................................................... 131\nTable 5-8: [moved – now Table 5-4b] ............................................................................................................ 131\nTable 5-9: TEE_AllocateTransientObject Object Types and Key Sizes ............................................... 139\nTable 5-10: TEE_PopulateTransientObject Supported Attributes ........................................................... 144\nTable 5-11: TEE_CopyObjectAttributes1 Parameter Types .................................................................... 151\nTable 5-12: TEE_GenerateKey Parameters ................................................................................................. 153\nTable 5-13: Effect of TEE_DATA_FLAG_OVERWRITE on Behavior of TEE_CreatePersistentObject ....... 160\nTable 5-14: Examples of TEE_OpenPersistentObject Sharing Rules ..................................................... 163\nTable 6-1: Supported Cryptographic Algorithms .......................................................................................... 179\nTable 6-2: Optional Cryptographic Algorithms .............................................................................................. 179\nTable 6-3: Possible TEE_OperationMode Values ....................................................................................... 181\nTable 6-4: TEE_AllocateOperation Algorithms Allowed per Mode and Object Type ............................... 185\nTable 6-5: Public Key Allowed Modes ........................................................................................................... 196\nTable 6-6: Key-Pair Parts for Operation Modes ............................................................................................ 196\nTable 6-6b: Symmetric Encrypt/Decrypt Operation Parameters ................................................................... 208\nTable 6-7: Asymmetric Encrypt/Decrypt Operation Parameters ................................................................... 225\nTable 6-8: Asymmetric Sign/Verify Operation Parameters ............................................................................ 228\nTable 6-9: Asymmetric Verify Operation Parameters [obsolete] ................................................................... 231\nTable 6-10: Key Derivation Operation Parameters ....................................................................................... 234\nTable 6-11: List of Algorithm Identifiers ......................................................................................................... 238\nTable 6-12: Structure of Algorithm Identifier or Object Type Identifier [obsolete] ......................................... 241\nTable 6-12b: Algorithm Subtype Identifier [obsolete] .................................................................................... 241\nTable 6-13: List of Object Types .................................................................................................................... 242\nTable 6-14: List of Optional Cryptographic Elements .................................................................................... 244\nTable 6-15: Object or Operation Attributes .................................................................................................... 246\nTable 6-16: Attribute Format Definitions ........................................................................................................ 248\nTable 6-17: Partial Structure of Attribute Identifier ........................................................................................ 249\nTable 6-18: Attribute Identifier Flags ............................................................................................................. 249\nTable 7-1: Values of the gpd.tee.systemTime.protectionLevel Property ........................................... 252\nTable 7-2: Values of the gpd.tee.TAPersistentTime.protectionLevel Property ............................... 255\nTable 9-1: Maximum Sizes of Structure Payloads ........................................................................................ 302\nTable 9-2: TEE_EVENT_TYPE Values ............................................................................................................. 303\nTable 9-3: TEE_PERIPHERAL_TYPE Values ................................................................................................... 304\nTable 9-4: TEE_PERIPHERAL_FLAGS Values ................................................................................................. 305\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 12,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 12",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 13 / 375\nTable 9-5: TEE_PeripheralStateId Values ............................................................................................... 306\nTable 9-6: TEE_PERIPHERAL_STATE_NAME Values ....................................................................................... 307\nTable 9-7: TEE_PERIPHERAL_STATE_FW_INFO Values ................................................................................. 307\nTable 9-8: TEE_PERIPHERAL_STATE_MANUFACTURER Values ....................................................................... 308\nTable 9-9: TEE_PERIPHERAL_STATE_FLAGS Values ..................................................................................... 308\nTable 9-10: TEE_PERIPHERAL_STATE_EXCLUSIVE_ACCESS Values ............................................................. 308\nTable 9-11: TEE_PERIPHERAL_OS State Table Values ................................................................................. 309\nTable 9-12: TEE_PERIPHERAL_SESSION State Table Values ....................................................................... 310\nTable 9-13: TEE_PeripheralValueType Values ......................................................................................... 315\nTable 9-14: Value of version in payload Structures ............................................................................... 317\nTable A-1: Function Identification Values ...................................................................................................... 345\nTable B-1: Deprecated Object Identifiers ...................................................................................................... 357\nTable B-2: Deprecated Algorithm Identifiers ................................................................................................. 358\nTable B-3: Deprecated Properties ................................................................................................................. 360\nTable B-4: Deprecated Object or Operation Attributes .................................................................................. 361\nTable B-5: Deprecated Return Codes ........................................................................................................... 362\nTable C-1: Normative References for Algorithms .......................................................................................... 363\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 13,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 13",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "14 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n1 Introduction\nThis specification defines a set of C APIs for the development of Trusted Applications (TAs) running inside a\nTrusted Execution Environment (TEE). For the purposes of this document a TEE is expected to meet the\nrequirements defined in the GlobalPlatform TEE System Architecture ([Sys Arch]) specification, i.e. it is\naccessible from a Regular Execution Environment (REE) through the GlobalPlatform TEE Client API\n(described in the GlobalPlatform TEE Client API Specification [Client API]) but is specifically protected against\nmalicious attacks and only runs code trusted in integrity and authenticity.\nThe APIs defined in this document target the C language and provide the following set of functionalities to TA\ndevelopers:\n• Basic OS-like functionalities, such as memory management, timer, and access to configuration\nproperties\n• Communication means with Client Applications (CAs) running in the Regular Execution Environment\n• Trusted Storage facilities\n• Cryptographic facilities\n• Time management facilities\n• Peripheral interface and Event handling facilities\nThe scope of this document is the development of Trusted Applications in the C language and their interactions\nwith the TEE Client API. It does not cover other possible language bindings or the run-time installation and\nmanagement of Trusted Applications.\nIf you are implementing this specification and you think it is not clear on something:\n1. Check with a colleague.\nAnd if that fails:\n2. Contact GlobalPlatform at TEE-issues-GPD_SPE_010_v1.3.1@globalplatform.org\n1.1 Audience\nThis document is suitable for software developers implementing Trusted Applications running inside the TEE\nwhich need to expose an externally visible interface to Client Applications and to use resources made available\nthrough the TEE Internal Core API, such as cryptographic capabilities and Trusted Storage.\nThis document is also intended for implementers of the TEE itself, its Trusted OS, Trusted Core Framework,\nthe TEE APIs, and the communications infrastructure required to access Trusted Applications.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 14,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 14",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 15 / 375\n1.2 IPR Disclaimer\nAttention is drawn to the possibility that some of the elements of this GlobalPlatform specification or other work\nproduct may be the subject of intellectual property rights (IPR) held by GlobalPlatform members or others. For\nadditional information regarding any such IPR that have been brought to the attention of GlobalPlatform,\nplease visit https://globalplatform.org/specifications/ip-disclaimers/. GlobalPlatform shall not be held\nresponsible for identifying any or all such IPR, and takes no position concerning the possible existence or the\nevidence, validity, or scope of any such IPR.\n1.3 References\nThe tables below list references applicable to this specification. The latest version of each reference applies\nunless a publication date or version is explicitly stated.\nSee also Annex C: Normative References for Algorithms.\nTable 1-1: Normative References\nStandard / Specification Description Ref\nGPD_SPE_007 GlobalPlatform Technology [Client API]\nTEE Client API Specification\nGPD_SPE_009 GlobalPlatform Technology [Sys Arch]\nTEE System Architecture\nGPD_SPE_025 GlobalPlatform Technology [TEE TA Debug]\nTEE TA Debug Specification\nGPD_SPE_120 GlobalPlatform Technology [TMF ASN.1]\nTEE Management Framework (including ASN.1 Profile)\n[Initially published as TEE Management Framework]\nGPD_SPE_123 GlobalPlatform Technology [TMF OTrP]\nTEE Management Framework:\nOpen Trust Protocol (OTrP) Profile\nGPD_SPE_042 GlobalPlatform Technology [TEE TUI Bio]\nTEE TUI Extension: Biometrics API\nGPD_SPE_055 GlobalPlatform Technology [TEE TUI Low]\nTEE Trusted User Interface Low-level API\nGPD_SPE_021 GlobalPlatform Technology [TEE PP]\nTEE Protection Profile\nGP_TEN_053 GlobalPlatform Technology [Crypto Rec]\nCryptographic Algorithm Recommendations\nBSI-CC-PP-0084-2014 Security IC Platform BSI Protection Profile 2014 with [PP-0084]\nAugmentation Packages\nBSI TR-03111 BSI Technical Guideline TR-03111: Elliptic Curve [BSI TR 03111]\nCryptography\nISO/IEC 9899:1999 Programming languages – C [C99]\nNIST Recommended Recommended Elliptic Curves for Federal Government [NIST Re Cur]\nElliptic Curves Use\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 15,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "1.2 IPR Disclaimer",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "16 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nStandard / Specification Description Ref\nNIST SP800-56B Recommendation for Pair-Wise Key Establishment [NIST SP800-56B]\nSchemes Using Integer Factorization Cryptography\nNIST SP800-185 SHA-3 Derived Functions: cSHAKE, KMAC, [NIST SP800-185]\nTupleHash, and ParallelHash\nRFC 2045 Multipurpose Internet Mail Extensions (MIME) [RFC 2045]\nPart One: Format of Internet Message Bodies\nRFC 2119 Key words for use in RFCs to Indicate Requirement [RFC 2119]\nLevels\nRFC 4122 A Universally Unique IDentifier (UUID) URN [RFC 4122]\nNamespace\nRFC 7748 Elliptic Curves for Security [X25519]\nRFC 8017 PKCS #1: RSA Cryptography Specifications [RFC 8017]\nVersion 2.2\nRFC 8032 Edwards-Curve Digital Signature Algorithm [Ed25519]\nSM2 Organization of State Commercial Administration of [SM2]\nChina, “Public Key Cryptographic Algorithm SM2 Based\non Elliptic Curves\", December 2010\nSM2-2 Organization of State Commercial Administration of [SM2-2]\nChina, “Public Key Cryptographic Algorithm SM2 Based\non Elliptic Curves – Part 2: Digital Signature Algorithm”,\nDecember 2010\nSM2-4 Organization of State Commercial Administration of [SM2-4]\nChina, “Public Key Cryptographic Algorithm SM2 Based\non Elliptic Curves – Part 4: Public Key Encryption\nAlgorithm”, December 2010\nSM2-5 Organization of State Commercial Administration of [SM2-5]\nChina, “Public Key Cryptographic Algorithm SM2 Based\non Elliptic Curves – Part 5: Parameter definitions”,\nDecember 2010\nSM3 Organization of State Commercial Administration of [SM3]\nChina, “SM3 Cryptographic Hash Algorithm”,\nDecember 2010\nSM4 Organization of State Commercial Administration of [SM4]\nChina, “SM4 block cipher algorithm”, December 2010\nTable 1-2: Informative References\nStandard / Specification Description Ref\nGP_GUI_001 GlobalPlatform Document Management Guide [Doc Mgmt]\nISO/IEC 10118-3 Information technology – Security techniques – [ISO 10118-3]\nHash-functions – Part 3: Dedicated hash-functions\n(English language reference for SM3)\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 16,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 16",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 17 / 375\nStandard / Specification Description Ref\nISO/IEC 14888-3 Information technology – Security techniques – Digital [ISO 14888-3]\nsignatures with appendix – Part 3: Discrete logarithm\nbased mechanisms\n(English Language reference for SM2)\nISO/IEC 15408 Information technology – Security techniques – [ISO 15408]\nEvaluation criteria for IT security\nISO/IEC 18033-3 Information technology – Security techniques – [ISO 18033-3]\nEncryption algorithms – Part 3: Block ciphers\n(English Language reference for SM4)\n1.4 Terminology and Definitions\nThe following meanings apply to SHALL, SHALL NOT, MUST, MUST NOT, SHOULD, SHOULD NOT, and\nMAY in this document (refer to [RFC 2119]):\n• SHALL indicates an absolute requirement, as does MUST.\n• SHALL NOT indicates an absolute prohibition, as does MUST NOT.\n• SHOULD and SHOULD NOT indicate recommendations.\n• MAY indicates an option.\nSelected terms used in this document are included in the following table.\nTable 1-3: Terminology and Definitions\nTerm Definition\nCancellation Flag An indicator that a Client has requested cancellation of an operation.\nClient Either of the following:\n• a Client Application using the TEE Client API\n• a Trusted Application acting as a client of another Trusted\nApplication, using the Internal Client API\nClient Application (CA) An application running outside of the Trusted Execution Environment\n(TEE) making use of the TEE Client API ([Client API]) to access\nfacilities provided by Trusted Applications inside the TEE.\nContrast Trusted Application (TA).\nClient Properties A set of properties associated with the Client of a Trusted Application.\nCommand A message (including a Command Identifier and four Operation\nParameters) send by a Client to a Trusted Application to initiate an\noperation.\nCommand Identifier A 32-bit integer identifying a Command.\nCryptographic Key Object An object containing key material.\nCryptographic Key-Pair Object An object containing material associated with both keys of a key-pair.\nCryptographic Operation An opaque reference that identifies a particular cryptographic operation.\nHandle\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 17,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "1.4 Terminology and Definitions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "18 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nTerm Definition\nCryptographic Operation Key The key to be used for a particular operation.\nData Object An object containing a data stream but no key material.\nData Stream Data associated with a Persistent Object (excluding Object Attributes\nand metadata).\nEvent API An API that supports the event loop. See section 9.\nEvent loop A mechanism by which a TA can enquire for and then process\nmessages from types of peripherals including pseudo-peripherals.\nFunction Number Identifies a function within a specification. With the Specification\nNumber, forms a unique identifier for a function. May be displayed when\na Panic occurs or in debug messages where supported.\nImplementation Properties A set of properties describing the TEE implementation, including the\nassociated hardware and Trusted OS.\nInitialized Describes a transient object whose attributes have been populated.\nInstance A particular execution of a Trusted Application, having physical memory\nspace that is separated from the physical memory space of all other TA\ninstances.\nKey Size The key size associated with a Cryptographic Object; values are limited\nby the key algorithm used.\nKey Usage Flags Indicators of the operations permitted with a Cryptographic Object.\nMemory Reference Parameter An Operation Parameter that carries a pointer to a client-owned\nmemory buffer.\nContrast Value Parameter.\nMetadata Additional data associated with a Cryptographic Object: Key Size and\nKey Usage Flags.\nMulti Instance Trusted Denotes a Trusted Application for which each session opened by a\nApplication client is directed to a separate TA instance.\nObject Attribute Small amounts of data used to store key material in a structured way.\nObject Handle An opaque reference that identifies a particular object.\nObject Identifier A variable-length binary buffer identifying a persistent object.\nOperation Parameter One of four data items passed in a Command, which can contain\ninteger values or references to client-owned shared memory blocks.\nPanic An exception that kills a whole TA instance. See section 2.3.3 for full\ndefinition.\nPanic Reason A programmer error that makes it impossible to produce the result of a\nfunction and requires that the API panic the calling TA instance. See\nsection 2.3.3 for further information.\nParameter Annotation Denotes the pattern of usage of a function parameter or pair of function\nparameters.\nPeripheral API A low-level API that enables a Trusted Application to interact with\nperipherals via the Trusted OS. See section 9.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 18,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 18",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 19 / 375\nTerm Definition\nPersistent Object An object identified by an Object Identifier and including a Data Stream.\nContrast Transient Object.\nProperty An immutable value identified by a name.\nProperty Set Any of the following:\n• The configuration properties of a Trusted Application\n• Properties associated with a Client Application by the Regular\nExecution Environment\n• Properties describing characteristics of a TEE implementation\nProtection Profile (PP) A document according to the Common Criteria, as described in\n[ISO 15408], used as part of the security certification process; defines\nthe specific set of security features required of a technology to claim\ncompliance.\nREE Time A time value that is as trusted as the REE.\nRegular Execution An Execution Environment comprising at least one Regular OS and all\nEnvironment (REE) other components of the device (SoCs, other discrete components,\nfirmware, and software) that execute, host, and support the Regular OS\n(excluding any Secure Components included in the device).\nFrom the viewpoint of a Secure Component, everything in the REE is\nconsidered untrusted, though from the Regular OS point of view there\nmay be internal trust structures.\n(Formerly referred to as a Rich Execution Environment (REE).)\nContrast Trusted Execution Environment (TEE).\nRegular OS An OS executing in a Regular Execution Environment. May be anything\nfrom a large OS such as Linux down to a minimal set of statically linked\nlibraries providing services such as a TCP/IP stack.\n(Formerly referred to as a Rich OS or Device OS.)\nContrast Trusted OS.\nSecure Component GlobalPlatform terminology to represent either a Secure Element or a\nTrusted Execution Environment.\nSecure Element A tamper-resistant secure hardware component which is used in a\ndevice to provide the security, confidentiality, and multiple application\nenvironment required to support various business models. May exist in\nany form factor, such as embedded or integrated SE, SIM/UICC,\nsmart card, smart microSD, etc.\nSecurity Domain An on-device representative of an Authority in the TEE Management\nFramework security model. Security Domains are responsible for the\ncontrol of administration operations. SDs are used to perform the\nprovisioning of TEE properties and to manage the life cycle of Trusted\nApplications and SDs associated with them.\nSession Logically connects multiple commands invoked on a Trusted Application\nor a Security Domain.\nSimple Symmetric Key Type In the context of this specification, any of a set of object types defined in\nTable 5-10.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 19,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 19",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "20 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nTerm Definition\nSingle Instance Trusted Denotes a Trusted Application for which all sessions opened by clients\nApplication are directed to a single TA instance.\nSpecification Number Identifies the specification within which a function is defined. May be\ndisplayed when a Panic occurs or in debug messages where supported.\nStorage Identifier A 32-bit identifier for a Trusted Storage Space that can be accessed by\na Trusted Application.\nSystem Time A time value that can be used to compute time differences and\noperation deadlines.\nTA Persistent Time A time value set by the Trusted Application that persists across platform\nreboots and whose level of trust can be queried.\nTamper-resistant secure Hardware designed to isolate and protect embedded software and data\nhardware by implementing appropriate security measures. The hardware and\nembedded software meet the requirements of the latest Security IC\nPlatform Protection Profile ([PP-0084]) including resistance to physical\ntampering scenarios described in that Protection Profile.\nTask The entity that executes any code executed in a Trusted Application.\nTEE Client API The software interface used by clients running in the REE to\ncommunicate with the TEE and with the Trusted Applications executed\nby the TEE. For details, see [Client API].\nTEE Management Framework A security model for administration of Trusted Execution Environments\n(TEEs) and for administration and life cycle management of Trusted\nApplications (TAs) and corresponding Security Domains (SDs).\nTransient Object An object containing attributes but no data stream, which is reclaimed\nwhen closed or when the TA instance is destroyed.\nContrast Persistent Object.\nTrusted Application (TA) An application running inside the Trusted Execution Environment that\nprovides security related functionality to Client Applications outside of\nthe TEE or to other Trusted Applications inside the TEE.\nContrast Client Application (CA).\nTrusted Application A set of properties associated with the installation of a Trusted\nConfiguration Properties Application.\nTrusted Core Framework or The part of the Trusted OS responsible for implementing the Trusted\n“Framework” Core Framework API1 that provides OS-like facilities to Trusted\nApplications and a way for the Trusted OS to interact with the Trusted\nApplications.\n1 The Trusted Core Framework API is described in section 4.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 20,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 20",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 21 / 375\nTerm Definition\nTrusted Execution An Execution Environment that runs alongside but isolated from an\nEnvironment (TEE) REE. A TEE has security capabilities and meets certain security-related\nrequirements: It protects TEE assets against a set of defined threats\nwhich include general software attacks as well as some hardware\nattacks, and defines rigid safeguards as to data and functions that a\nprogram can access. There are multiple technologies that can be used\nto implement a TEE, and the level of security achieved varies\naccordingly.\nContrast Regular Execution Environment (REE).\nTrusted OS An OS executing in a Secure Component.\nContrast Regular OS.\nTrusted Storage Space Storage that is protected either by the hardware of the TEE or\ncryptographically by keys held in the TEE. Data held in such storage is\neither private to the Trusted Application that created it or is shared\naccording to the rules of a Security Domain hierarchy.\nSee [TMF ASN.1] sections 4.1 and 5.5 regarding Security Domains and\nTrusted Storage.\nTrusted User Interface (TUI) A hardware protected user interface that may be used to limit exposure\nof information exchanged between a Trusted Application and a user.\nFor example, a TA may use the TUI to display transaction data and\nobtain user confirmation of the data’s correctness.\nUninitialized Describes a transient object allocated with a certain object type and\nmaximum size but with no attributes.\nUniversally Unique Identifier An identifier as specified in RFC 4122 ([RFC 4122]).\n(UUID)\nValue Parameter An Operation Parameter that carries two 32-bit integers.\nContrast Memory Reference Parameter.\n1.5 Abbreviations and Notations\nTable 1-4: Abbreviations\nAbbreviation / Notation Meaning\nAAD Additional Authenticated Data\nAE Authenticated Encryption\nAES Advanced Encryption Standard\nAPI Application Programming Interface\nCA Client Application\nCMAC Cipher-based MAC\nCRT Chinese Remainder Theorem\nCTS CipherText Stealing\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 21,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 21",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "22 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nAbbreviation / Notation Meaning\nDES Data Encryption Standard\nDH Diffie-Hellman\nDSA Digital Signature Algorithm\nECC Elliptic Curve Cryptography\nECDH Elliptic Curve Diffie-Hellman\nECDSA Elliptic Curve Digital Signature Algorithm\nETSI European Telecommunications Standards Institute\nFMM Fast Modular Multiplication\ngcd Greatest Common Divisor\nHMAC Hash-based Message Authentication Code\nIEEE Institute of Electrical and Electronics Engineers\nIETF Internet Engineering Task Force\nIPR Intellectual Property Rights\nISO International Organization for Standardization\nIV Initialization Vector\nLS Liaison Statement\nMAC Message Authentication Code\nMD5 Message Digest 5\nMGF Mask Generating Function\nNIST National Institute of Standards and Technology\nOAEP Optimal Asymmetric Encryption Padding\nOS Operating System\nPKCS Public Key Cryptography Standards\nPSS Probabilistic Signature Scheme\nREE Regular Execution Environment\nRFC Request For Comments; may denote a memorandum published by the IETF\nRSA Rivest, Shamir, Adleman asymmetric algorithm\nSDO Standards Defining Organization\nSHA Secure Hash Algorithm\nTA Trusted Application\nTEE Trusted Execution Environment\nUTC Coordinated Universal Time\nUTF Unicode Transformation Format\nUUID Universally Unique Identifier\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 22,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 22",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 23 / 375\nAbbreviation / Notation Meaning\nXOF eXtendable-Output Functions\nXTS XEX-based Tweaked Codebook mode with ciphertext stealing (CTS)\n1.6 Revision History\nGlobalPlatform technical documents numbered n.0 are major releases. Those numbered n.1, n.2, etc., are\nminor releases where changes typically introduce supplementary items that do not impact backward\ncompatibility or interoperability of the specifications. Those numbered n.n.1, n.n.2, etc., are maintenance\nreleases that incorporate errata and precisions; all non-trivial changes are indicated, often with revision marks.\nTable 1-5: Revision History\nDate Version Description\nDec 2011 1.0 Initial Public Release, as “TEE Internal API Specification”.\nJune 2014 1.1 Public Release, as “TEE Internal Core API Specification”.\nJune 2016 1.1.1 Public Release, showing all non-trivial changes since v1.1.\nSignificant changes include:\n• Many parameters were defined as size_t in v1.0 then changed to\nuint32_t in v1.1, and have now been reverted.\n• Improved clarity of specification with regard to TEE_GenerateKey\nparameter checking. Reverted over-prescriptive requirements for parameter\nvetting, re-enabling practical prime checking.\n• Clarification of invalid storage ID handling with regard to\nTEE_CreatePersistentObject and TEE_OpenPersistentObject.\n• Clarified which algorithms may use an IV.\n• Clarified the availability of TEE_GetPropertyAsBinaryBlock.\n• Clarified mismatches between Table 6-12 and elsewhere.\n• Deprecated incorrectly defined algorithm identifiers and defined a distinct set.\n• Corrected an error in TEE_BigIntComputeExtendedGcd range validation.\n• Clarified operation of TEEC_OpenSession with NULL TEEC_Operation.\n• Clarified relationship of specification with FIPS 186-2 and FIPS 186-4.\n• Clarified uniqueness of gpd.tee.deviceID in case of multiple TEEs on a\ndevice.\n• Corrected details of when TEE_HANDLE_FLAG_INITIALIZED is set.\n• Clarified the security of the location of operation parameters that the TA is\nacting on.\n• Clarified the handling and validation of storage identifiers.\n• Clarified the protection level relationships with anti-rollback, and the way\nanti-rollback violation is signaled to a TA.\n• Clarified the data retention requirement for an unused “b” attribute value.\n• Clarified the acceptable bit size for some security operations.\n• Relaxed attribute restrictions such that TEE_PopulateTransientObject\nand TEE_GenerateKey are aligned.\n• Clarified the handling of ACCESS_WRITE_META.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 23,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "1.6 Revision History",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "24 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nDate Version Description\nNov 2016 1.1.2 Public Release, showing all non-trivial changes since v1.1, both those included\nin v1.1.1 and the following:\n• New section 3.1.1, API Version – Added #define TEE_CORE_API specific\nto API specification version.\n• Section 4.7, Implementation Properties – Clarified existing\ngpd.tee.apiversion, and noted that it is deprecated.\n• Section 4.7 – Added more precise gpd.tee.internalCore.version.\n• New section 4.7.1, Specification Version Number Property – Defined\nstructure of integer version field structure as used in other GlobalPlatform\nspecs.\nOct 2018 1.2 Public Release\n• Introduced:\nCurve 25519 & BSI related curves and algorithms support\no\nChinese Algorithms\no\nPeripheral API and Event API (moved from [TEE TUI Low])\no\nTEE_IsAlgorithmSupported to interrogate available algorithms\no\nTEE_BigIntAbs, TEE_BigIntExpMod, TEE_BigIntSetBit,\no\nTEE_BigIntAssign bignum functions\nMemory allocation options with No Share and No Fill hints\no\n• Clarified principles used in defining Panic Reasons.\n• Improved version control allowing TA builder to potentially request an API\nversion.\n• Improved support for 32-bit or 64-bit TA operation.\n• Clarified functionality:\nCryptographic operation states with regard to reset\no\nUse of identical keys in TEE_SetOperationKey2\no\nState transitions in TEE_AEUpdateAAD and associated functionality\no\nMay 2019 1.2.1 Public Release, showing all non-trivial changes since v1.2\n• Clarified TEE_ERROR_CIPHERTEXT_INVALID return code.\n• Clarified generic payloads with reference to [TEE TUI Low] v1.0.1 in\nsection 9.6.9, Generic Payloads.\n• In Figure 5-1, State Diagram for TEE_ObjectHandle, corrected\nTEE_RestrictObjectInfo1 references to\nTEE_RestrictObjectUsage1. Updated the associated text in section 5.5.2.\n• Updated Figure 6-1, State Diagram for TEE_OperationHandle, to include\nthe missing TEE_SetOperationKey and TEE_SetOperationKey2\ntransitions.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 24,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 24",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 25 / 375\nDate Version Description\nFebruary 1.3 Public Release\n2021 • Introduced:\nStorage types TEE_STORAGE_PERSO and TEE_STORAGE_PROTECTED\no\nSupport for ed448 and x448 algorithms\no\nSupport for SHA-3 including SHAKE128 and SHAKE256\no\n• Clarified functionality:\nResolved inconsistency in the input data buffer annotation between\no\nTEE_WriteObjectData and TEE_CreatePersistentObject.\nGenericized the Peripheral and Event APIs (section 9) where the text\no\nspecifically mentioned a TUI session.\n• Clarified throughout the use of illegal values reserved for testing.\n• TEE_ERROR_OLD_VERSION renamed to\nTEE_ERROR_UNSUPPORTED_VERSION.\n• Added gpd.ta.doesNotCloseHandleOnCorruptObject property to\ndefine corrupted object behavior and clarified throughout.\n• Clarified behavior when calling TEE_GetObjectBufferAttribute with a\nNULL buffer.\n• Defined ‘Simple Symmetric Key Types’.\n• Clarified behavior of keySize parameter in TEE_GenerateKey.\n• Updated section 5.7.2, TEE_CreatePersistentObject, to support\ntransition from a transient object to a persistent object.\n• In section 5.9.4, TEE_SeekObjectData, corrected the offset parameter\ntype.\n• In section 6, Cryptographic Operations API, added the extracting state\nsignifying digest extraction.\n• Added TEE_ALG_HKDF to support key derivation operations.\n• Updated Table 6-4 to associate the algorithm, object type, and mode of\noperation.\n• Added section 6.3.3, TEE_DigestExtract, for use with XOF.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 25,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 25",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "26 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nDate Version Description\nJuly 2021 1.3.1 Public Release, showing all non-trivial changes since v1.3\n• TEE_ALG_RSAES_PKCS1_OAEP_MGF1_xxx (section 6.7.1 and Table 6-15)\nAdded “attribute” parameter to better support the dual digests.\no\nClarified use of the algorithm without that additional parameter.\no\n• Clarified the declaration of constants defined in TEE specifications\n(section 3.3.3).\n• Changed the example opaque handle declarations to remove the misuse of\nconsecutive initial underscores: __*\n(sections 2.4, 4.1.3, 4.1.4, 5.3.4, 5.3.5, 6.1.4, 9.6.3, 9.6.10, 9.6.11).\n• Clarified namespace ownership (section 2.7).\n• Added warning regarding use of some C99 (or similar) compliant compilers\nand the long names used in this specification (section 2.8).\n• Changed normative reference for PKCS #1, now RFC 8017 rather than the\nno longer available document on RSAsecurity.com (Table 1-1 and Annex C).\n• Added four algorithms to Table 6-4 that were added elsewhere in v1.3 of this\nspecification.\n• Time (section 7)\nClarified that TEE_Time initial value is normally calculated from 00:00 on\no\nJan 1st, 1970.\nClarified how clock skew between real world time and System Time is\no\nspecified, differentiating behavior between different values of\ngpd.tee.systemTime.protectionLevel property.\nClarified that clock skew on the value returned by TEE_GetREETime()\no\nis out of scope of this specification.\n• Adjusted definition of TEE_MemMove available for backward compatibility,\ncorrecting prior transcription error (section 4.11.7).\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 26,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 26",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_ALG_RSAES_PKCS1_OAEP_MGF1_xxx,TEE_GetREETime",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 27 / 375\n2 Overview of the TEE Internal Core API Specification\nThis specification defines a set of C APIs for the development of Trusted Applications (TAs) running inside a\nTrusted Execution Environment (TEE). For the purposes of this document a TEE is expected to meet the\nrequirements defined in GlobalPlatform TEE System Architecture ([Sys Arch]); i.e. the TEE is accessible from\na Regular Execution Environment (REE) through the GlobalPlatform TEE Client API ([Client API]) but is\nspecifically protected against malicious attacks and runs only code trusted in integrity and authenticity.\nAll security statements expressed in this document are themselves bound by the relevant Protection Profile\n([TEE PP]). Comments such as “an asset is immune to modification” or “is only accessible by appropriate\nauthorization” are therefore limited by the security requirements of the Protection Profile.\nA TEE provides the Trusted Applications an execution environment with defined security boundaries, a set of\nsecurity enabling capabilities, and means to communicate with Client Applications (CAs) running in the Regular\nExecution Environment. This document specifies how to use these capabilities and communication means for\nTrusted Applications developed using the C programming language. It does not cover how Trusted\nApplications are installed or managed (described in TEE Management Framework (including ASN.1 Profile) –\n[TMF ASN.1] and TEE Management Framework: Open Trust Protocol (OTrP) Profile – [TMF OTrP]) and\ndoes not cover other language bindings.\nSections below provide an overview of the TEE Internal Core API specification.\n• Section 2.1 describes Trusted Applications and their operations and interactions with other TEE\ncomponents.\n• Section 2.2 gives an overview of the TEE Internal Core APIs that provide core secure services to the\nTrusted Applications.\n• Section 2.3 describes error handling, including how errors are handled by TEE internal specifications,\nwhether detected during TA execution or in a Panic situation.\n• Section 2.4 describes different opaque handle types used in the specification. These opaque handles\nrefer to objects created by the API implementation for a TA instance.\n• Section 2.5 describes TEE properties that refer to configuration parameters, permissions, or\nimplementation characteristics.\n• Section 2.6 describes support for managing peripherals and support for an event loop that can receive\nevents (for example, from peripherals).\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 27,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 27",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "28 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n2.1 Trusted Applications\nA Trusted Application (TA) is a program that runs in a Trusted Execution Environment (TEE) and exposes\nsecurity services to its Clients.\nA Trusted Application is command oriented. Clients access a Trusted Application by opening a session with\nthe Trusted Application and invoking commands within the session. When a Trusted Application receives a\ncommand, it parses the messages associated with the command, performs any required processing, and then\nsends a response back to the client.\nA Client typically runs in the Regular Execution Environment and communicates with a Trusted Application\nusing the TEE Client API [Client API]. It is then called a “Client Application”. It is also possible for a Trusted\nApplication to act as a client of another Trusted Application, using the Internal Client API (see section 4.9).\nThe term “Client” covers both cases.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 28,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "2.1 Trusted Applications",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 29 / 375\n2.1.1 TA Interface\nEach Trusted Application exposes an interface (the TA interface) composed of a set of entry point functions\nthat the Trusted Core Framework implementation calls to inform the TA about life cycle changes and to relay\ncommunication between Clients and the TA. Once the Trusted Core Framework has called one of the TA entry\npoints, the TA can make use of the TEE Internal Core API to access the facilities of the Trusted OS, as\nillustrated in Figure 2-1. For more information on the TA interface, see section 4.3.\nEach Trusted Application is identified by a Universally Unique Identifier (UUID) as specified in [RFC 4122].\nEach Trusted Application also comes with a set of Trusted Application Configuration Properties. These\nproperties are used to configure the Trusted OS facilities exposed to the Trusted Application. Properties can\nalso be used by the Trusted Application itself as a means of configuration.\nFigure 2-1: Trusted Application Interactions with the Trusted OS\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 29,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "2.1.1 TA Interface",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "30 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n2.1.2 Instances, Sessions, Tasks, and Commands\nWhen a Client creates a session with a Trusted Application, it connects to an Instance of that Trusted\nApplication. A Trusted Application instance has physical memory space which is separated from the physical\nmemory space of all other Trusted Application instances. The Trusted Application instance memory space\nholds the Trusted Application instance heap and writable global and static data.\nAll code executed in a Trusted Application is said to be executed by Tasks. A Task keeps a record of its\nexecution history (typically realized with a stack) and current execution state. This record is collectively called\na Task context. A Task SHALL be created each time the Trusted OS calls an entry point of the Trusted\nApplication. Once the entry point has returned, an implementation may recycle a Task to call another entry\npoint but this SHALL appear like a completely new Task was created to call the new entry point.\nA Session is used to logically connect multiple commands invoked in a Trusted Application. Each session has\nits own state, which typically contains the session context and the context(s) of the Task(s) executing the\nsession.\nA Command is issued within the context of a session and contains a Command Identifier, which is a 32-bit\ninteger, and four Operation Parameters, which can contain integer values or references to client-owned shared\nmemory blocks.\nIt is up to the Trusted Application implementer to define the combinations of commands and their parameters\nthat are supported by the Trusted Application. This is out of scope of this specification.\n2.1.3 Sequential Execution of Entry Points\nAll entry point calls within a given Trusted Application instance are called in sequence, i.e. no more than one\nentry point is executed at any point in time. The Trusted Core Framework implementation SHALL guarantee\nthat a commenced entry point call is completed before any new entry point call is allowed to begin execution.\nIf there is more than one entry point call to complete at any point in time, all but one call SHALL be queued by\nthe Framework. The order in which the Framework queues and picks enqueued calls for execution is\nimplementation-defined.\nIt is not possible to execute multiple concurrent commands within a session. The TEE guarantees that a\npending command has completed before a new command is executed.\nSince all entry points of a given Trusted Application instance are called in sequence, there is no need to use\nany dedicated synchronization mechanisms to maintain consistency of any Trusted Application instance\nmemory. The sequential execution of entry points inherently guarantees this consistency.\n2.1.4 Cancellations\nClients can request the cancellation of open-session and invoke-command operations at any time.\nIf an operation is requested to be cancelled and has not reached the Trusted Application yet but has been\nqueued, then the operation is simply retired from the queue.\nIf the operation has already been transmitted to the Trusted Application, then the task running the operation is\nput in the cancelled state. This has an effect on a few “cancellable” functions, such as TEE_Wait, but this\neffect may also be masked by the Trusted Application if it does not want to be affected by client cancellations.\nSee section 4.10 for more details on how a Trusted Application can handle cancellation requests and mask\ntheir effect.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 30,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "2.1.2 Instances, Sessions, Tasks, and Commands",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 31 / 375\n2.1.5 Unexpected Client Termination\nWhen the client of a Trusted Application dies or exits abruptly and when it can be properly detected, then this\nSHALL appear to the Trusted Application as if the client requests cancellation of all pending operations and\ngracefully closes all its client sessions. It SHALL be indistinguishable from a clean session closing.\nMore precisely, the REE SHOULD detect when a Client Application dies or exits. When this happens, the REE\nSHALL initiate a termination process that SHALL result in the following sequence of events for all Trusted\nApplication instances that are serving a session with the terminating client:\n• If an operation is pending in the closing session, it SHALL appear as if the client had requested its\ncancellation.\n• When no operation remains pending in the session, the session SHALL be closed.\nIf a TA client is a TA itself, this sequence of events SHALL happen when the client TA panics or exits due to\nthe termination of its own Client Application.2\n2.1.6 Instance Types\nAt least two Trusted Application instance types SHALL be supported: Multi Instance and Single Instance.\nWhether a Trusted Application is Multi Instance or Single Instance is part of its configuration properties and\nSHALL be enforced by the Trusted OS. See section 4.5 for more information on configuration properties.\n• For a Multi Instance Trusted Application, each session opened by a client is directed to a separate\nTrusted Application instance, created on demand when the session is opened and destroyed when\nthe session closes. By definition, every instance of such a Trusted Application accepts and handles\none and only one session at a given time.\n• For a Single Instance Trusted Application, all sessions opened by the clients are directed to a single\nTrusted Application instance. From the Trusted Application point of view, all sessions share the same\nTrusted Application instance memory space, which means for example that memory dynamically\nallocated for one session is accessible in all other sessions. It is also configurable whether a Single\nInstance Trusted Application accepts multiple concurrent sessions or not.\n2.1.7 Configuration, Development, and Management\nTrusted Applications as discussed in this document are developed using the C language. The way Trusted\nApplications are compiled and linked is implementation dependent.\n[TMF ASN.1] and [TMF OTrP] define mechanisms by which Trusted Applications can be configured and\ninstalled in a TEE. The scope of this specification does not include configuration, installation, de-installation,\nsigning, verification, or any other life cycle or deployment aspects.\n2 Panics are discussed in section 2.3.3.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 31,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "2.1.5 Unexpected Client Termination",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "32 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n2.2 TEE Internal Core APIs\nThe TEE Internal Core APIs provide specified functionality that SHALL be available on a GlobalPlatform TEE\nimplementation alongside optional functionality that MAY be available in a GlobalPlatform TEE\nimplementation. The Trusted OS implements TEE Internal Core APIs that are used by Trusted Applications to\ndevelop secure tasks. These APIs provide building blocks to TAs by offering them a set of core services.\nA guiding principle for the TEE Internal Core APIs is that it should be possible for a TA implementer to write\nsource code which is portable to different TEE implementations. In particular, the TEE Internal Core APIs are\ndesigned to be used portably on TEE implementations which might have very different CPU architectures\nrunning the Trusted OS.\nThe TEE Internal Core APIs are further classified into six broad categories described below.\n2.2.1 Trusted Core Framework API\nThis specification defines an API that provides OS functionality – integration, scheduling, communication,\nmemory management, and system information retrieval interfaces – and channels communications from Client\nApplications or other Trusted Applications to the Trusted Application.\n2.2.2 Trusted Storage API for Data and Keys\nThis specification defines an API that defines Trusted Storage for keys or general-purpose data. This API\nprovides access to the following facilities:\n• Trusted Storage for general purpose data and key material with guarantees on the confidentiality and\nintegrity of the data stored and atomicity of the operations that modify the storage\nThe Trusted Storage may be backed by non-secure resources as long as suitable cryptographic\no\nprotection is applied, which SHALL be as strong as the means used to protect the TEE code and\ndata itself.\nThe Trusted Storage SHALL be bound to a particular device, which means that it SHALL be\no\naccessible or modifiable only by authorized TAs running in the same TEE and on the same device\nas when the data was created.\nSee [Sys Arch] section 2.2 for more details on the security requirements for the Trusted Storage.\no\n• Ability to hide sensitive key material from the TA itself\n• Association of data and key: Any key object can be associated with a data stream and pure data\nobjects contain only the data stream and no key material.\n• Separation of storage among different TAs:\nEach TA has access to its own storage space that is shared among all the instances of that TA but\no\nseparated from the other TAs.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 32,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "2.2 TEE Internal Core APIs",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 33 / 375\n2.2.3 Cryptographic Operations API\nThis specification defines an API that provides the following cryptographic facilities:\n• Generation and derivation of keys and key-pairs\n• Support for the following types of cryptographic algorithms:\nDigests\no\nSymmetric Ciphers\no\nMessage Authentication Codes (MAC)\no\nAuthenticated Encryption (AE) algorithms such as AES-CCM and AES-GCM\no\nAsymmetric Encryption and Signature\no\nKey Exchange algorithms\no\n• Pre-allocation of cryptographic operations and key containers so that resources can be allocated\nahead of time and reused for multiple operations and with multiple keys over time\nThe API defined in this specification enables several cryptographic capabilities.\nIt is not the role of this specification to guide the reader in determining which cryptographic capabilities may\nbe safe for their purposes, and this specification recognizes that in some cases the use of weak cryptography\nby a TA may be better than the use of that same cryptography by an application outside of a TEE.\nGlobalPlatform does provide recommendations for best practices and acceptable cryptography usage. These\ncan be found in GlobalPlatform Cryptographic Algorithm Recommendations ([Crypto Rec]), and relevant\nsections of that document MAY be applied to the interfaces and API offered by this specification. As always,\nthe developer should refer to appropriate security guidelines.\n2.2.4 Time API\nThis specification defines an API to access three sources of time:\n• The System Time has an arbitrary non-persistent origin. It may use a secure dedicated hardware timer\nor be based on the REE timers.\n• The TA Persistent Time is real-time and persistent but its origin is individually controlled by each TA.\nThis allows each TA to independently synchronize its time with the external source of trusted time of\nits choice. The TEE itself is not required to have a defined trusted source of time.\n• The REE Time is real-time but SHOULD NOT be more trusted than the REE and the user.\nThe level of trust that a Trusted Application can put in System Time and its TA Persistent Time is\nimplementation-defined as a given implementation may not include fully trustable hardware sources of time\nand hence may have to rely on untrusted real-time clocks and timers managed by the Regular Execution\nEnvironment. However, when a more trustable source of time is available, it is expected that it will be exposed\nto Trusted Applications through this Time API. Note that a Trusted Application can programmatically determine\nthe level of protection of time sources by querying implementation properties\ngpd.tee.systemTime.protectionLevel and gpd.tee.TAPersistentTime.protectionLevel.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 33,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "2.2.3 Cryptographic Operations API",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "34 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n2.2.5 TEE Arithmetical API\nThe TEE Arithmetical API is a low-level API that complements the Cryptographic Operations API when a\nTrusted Application needs to implement asymmetric algorithms, modes, or paddings not supported by the\nCryptographic Operations API.\nThe API provides arithmetical functions to work on big numbers and prime field elements. It provides\noperations including regular arithmetic, modular arithmetic, primality test, and fast modular multiplication that\ncan be based on the Montgomery reduction or a similar technique.\n2.2.6 Peripheral and Event APIs\nThe Peripheral and Event APIs are low-level APIs that enable a Trusted Application to interact with peripherals\nvia the Trusted OS.\nThe Peripheral and Event APIs offer mechanisms to:\n• Discover and identify the peripherals available to a Trusted Application.\n• Determine the level of trust associated with data coming to and from the peripheral.\n• Configure peripherals.\n• Open and close connections between the Trusted Application and peripherals.\n• Interact with peripherals using polling mechanism.\n• Receive input from peripherals and other event sources using an asynchronous event mechanism.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 34,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "2.2.5 TEE Arithmetical API",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 35 / 375\n2.3 Error Handling\n2.3.1 Normal Errors\nThe TEE Internal Core API functions usually return a return code of type TEE_Result to indicate errors to\nthe caller. This is used to denote “normal” run-time errors that the TA code is expected to catch and handle,\nsuch as out-of-memory conditions or short buffers. Unless specified otherwise (e.g. for\nTEE_ERROR_CORRUPT_OBJECT and TEE_ERROR_CORRUPT_OBJECT_2, see section 5.1), if any function\nreturns a code other than TEE_SUCCESS, it SHALL have no other effect.\nRoutines defined in this specification SHOULD only return the return codes defined in their definition in this\nspecification. Where return codes are defined, they SHOULD only be returned with the meaning defined by\nthis specification: Errors which are detected for which no return code has been defined SHALL cause the\nroutine to panic.\n2.3.2 Programmer Errors\nThere are a number of conditions in this specification that can only occur as a result of programmer error,\ni.e. they are triggered by incorrect use of the API by a Trusted Application, such as wrong parameters, wrong\nstate, invalid pointers, etc., rather than by run-time errors such as out-of-memory conditions.\nSome programmer errors are explicitly tagged as “Panic Reasons” and SHALL be reliably detected by an\nimplementation. These errors make it impossible to produce the result of the function and require that the API\npanic the calling TA instance, which kills the instance. If such a Panic Reason occurs, it SHALL NOT go\nundetected and, e.g. produce incorrect results or corrupt TA data.\nHowever, it is accepted that some programmer errors cannot be realistically detected at all times and that\nprecise behavior cannot be specified without putting too much of a burden on the implementation. In case of\nsuch a programmer error, an implementation is therefore not required to gracefully handle the error or even to\nbehave consistently, but the implementation SHOULD still make a best effort to detect the error and panic the\ncalling TA. In any case, a Trusted Application SHALL NOT be able to use a programmer error on purpose to\ncircumvent the security boundaries enforced by an implementation.\nIn general, incorrect handles—i.e. handles not returned by the API, already closed, with the wrong owner,\ntype, or state—are definite Panic Reasons while incorrect pointers are imprecise programmer errors.\nAny routine defined by this specification MAY generate a Panic if it detects a relevant hardware failure or is\npassed invalid arguments that could have been detected by the programmer, even if no Panic Reasons are\nlisted for that routine.\n2.3.3 Panics\nThe GlobalPlatform TA interface assumes that parameters have been validated prior to calling. While some\nplatforms might return errors for invalid parameters, security vulnerabilities are often created by incorrect error\nhandling. Thus, rather than returning errors, the general design of the GlobalPlatform interfaces invokes a\nPanic in the TA.\nTo avoid TA Panics, the TA implementer SHALL handle potential fault conditions before calling the Trusted\nOS. This approach reduces the likelihood of a TA implementer introducing security vulnerabilities.\nA Panic is an instance-wide uncatchable exception that kills a whole TA instance.\n1. A Panic SHALL be raised when the implementation detects an avoidable programmer error and there\nis no specifically defined error code which covers the problem.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 35,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "2.3 Error Handling",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "36 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n2. A Panic SHALL be raised when the Trusted Application itself requests a Panic by calling the function\nTEE_Panic.\n3. A Panic MAY be raised if the TA’s action results in detection of a fault in the TEE itself (e.g. a corrupted\nTEE library) which renders the called services temporarily or permanently unavailable.\n4. A Trusted OS MAY raise a TA Panic under implementation-defined circumstances.\nIn earlier versions of this and other GlobalPlatform TEE specifications, function definitions frequently contain\nthe \"catch all\" statement that a TA may panic if an error occurs which is not one of those specified for an API\nwhich has been called by the TA.\nWith the introduction of the Peripheral API, and in particular the Event API, it should be noted that:\n• A function SHALL NOT cause a Panic if the error detected during the call is not specifically defined for\nor occurring within that function.\n• A function SHALL NOT cause a Panic due to an error detected during an asynchronous operation.\n• It is the responsibility of the Trusted OS to cause a Panic based on the criteria of a specific\nfunction/operation.\n• An asynchronous operation SHALL cause a Panic in the background of any function if one or more of\nthe Panic Reasons defined for that asynchronous operation is met.\n• In all cases, any reported specification number and function number SHALL be for the operation or\nfunction that met one or more of its Panic Reasons and SHALL NOT be for any other operation or\nfunction that is occurring at the same time.\nWhen a Panic occurs, the Trusted Core Framework kills the panicking TA instance and does the following:\n• It discards all client entry point calls queued on the TA instance and closes all sessions opened by\nClients.\n• It closes all resources that the TA instance opened, including all handles and all memory, and\ndestroys the instance. Note that multiple instances can reference a common resource, for example an\nobject. If an instance sharing a resource is destroyed, the Framework does not destroy the shared\nresource immediately, but will wait until no other instances reference the resource before reclaiming it.\nAfter a Panic, no TA function of the instance is ever called again, not even TA_DestroyEntryPoint.\nFrom the client’s point of view, when a Trusted Application panics, the client commands SHALL return the\nerror TEE_ERROR_TARGET_DEAD with an origin value of TEE_ORIGIN_TEE until the session is closed. (For\ndetails about return origins, see the function TEE_InvokeTACommand in section 4.9.3 or the function\nTEEC_InvokeCommand in [Client API] section 4.5.9.)\nWhen a Panic occurs, an implementation in a non-production environment, such as in a development or\npre-production state, is encouraged to issue precise diagnostic information using the mechanisms defined in\nGlobalPlatform TEE TA Debug Specification ([TEE TA Debug]) or an implementation-specific alternative to\nhelp the developer understand the programmer error. Diagnostic information SHOULD NOT be exposed\noutside of a secure development environment.\nThe debug API defined mechanism [TEE TA Debug] passes a Panic code among the information it returns.\nThis SHALL either be the Panic code passed to TEE_Panic or any standard or implementation-specific error\ncode which best indicates the reason for the Panic.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 36,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 36",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 37 / 375\n2.4 Opaque Handles\nThis specification makes use of handles that opaquely refer to objects created by the API implementation for\na particular TA instance. A handle is only valid in the context of the TA instance that creates it and SHALL\nalways be associated with a type.\nThe special value TEE_HANDLE_NULL, which SHALL always be 0, is used to denote the absence of a handle.\nIt is typically used when an error occurs or sometimes to trigger a special behavior in some function. For\nexample, the function TEE_SetOperationKey clears the operation key if passed TEE_HANDLE_NULL. In\ngeneral, the “close”-like functions do nothing if they are passed the NULL handle.\nOther than the particular case of TEE_HANDLE_NULL, this specification does not define any constraint on the\nactual value of a handle.\nPassing an invalid handle, i.e. a handle not returned by the API, already closed, or of the wrong type, is always\na programmer error, except sometimes for the specific value TEE_HANDLE_NULL. When a handle is\ndereferenced by the API, the implementation SHALL always check its validity and panic the TA instance if it is\nnot valid.\nThis specification defines a C type for each high-level type of handle. The following types are defined:\nTable 2-1: Handle Types\nHandle Type Handle Purpose\nTEE_TASessionHandle Handle on sessions opened by a TA on another TA\nTEE_PropSetHandle Handle on a property set or a property enumerator\nTEE_ObjectHandle Handle on a cryptographic object\nTEE_ObjectEnumHandle Handle on a persistent object enumerator\nTEE_OperationHandle Handle on a cryptographic operation\nTEE_PeripheralHandle Handle on a peripheral\nTEE_EventQueueHandle Handle on an event queue\nTEE_EventSourceHandle Handle on an event source\nThese C types are defined as pointers on undefined structures so that an implementation can define whatever\ndata structure it requires, subject only to the requirement that it is correct and legal C to assign the value\nTEE_HANDLE_NULL to the handle.\nAs an For example, TEE_TASessionHandle was is defined in previous versions of this specification as\nstruct __TEE_TASessionHandle*. This is just a means to leverage the C language type-system to help\nseparate different handle types. It does not mean that an implementation has to define a the structure; , and\nhandles do not need to represent addresses; the type name of the handle need not be\n__TEE_TASessionHandle.\nA possible alternative example definition for TEE_TASessionHandle, adopted in v1.3.1 of this specification,\nis <ImplType> <ImplNamespace>_TEE_TASessionHandle*, where <ImplNamespace> is a namespace\nused consistently by, and reserved for the use of, the implementation, and <ImplType> is an opaque type\ndefined by the implementation. Either the previous version of the example definition, the new alternative\nexample definition, or some different definition is acceptable.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 37,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "2.4 Opaque Handles",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "38 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n2.5 Properties\nThis specification makes use of Properties to represent configuration parameters, permissions, or\nimplementation characteristics.\nA property is an immutable value identified by a name, which is a Unicode string. The property value can be\nretrieved in a variety of formats: Unicode string, binary block, 32-bit integer, Boolean, and Identity.\nProperty names and values are intended to be rather small with a few hundreds of characters at most, although\nthe specification defines no limit on the size of names or values.\nIn this specification, Unicode strings are always encoded in zero-terminated UTF-8, which means that a\nUnicode string cannot contain the U+0000 code point.\nThe value of a property is immutable: A Trusted Application can only retrieve it and cannot modify it. The value\nis set and controlled by the implementation and SHALL be trustable by the Trusted Applications.\nThe following Property Sets are exposed in the API:\n• Each Trusted Application can access its own configuration properties. Some of these parameters\naffect the behavior of the Trusted OS itself. Others can be used to configure the behavior of the TAs\nthat this TA connects to.\n• A TA instance can access a set of properties for each of its Clients. When the Client is a Trusted\nApplication, the property set contains the configuration properties of that Trusted Application.\nOtherwise, it contains properties set by the Regular Execution Environment.\n• Finally, a TA can access properties describing characteristics of the implementation, including the\nhardware platform on which it is executing.\nProperty names are case-sensitive and have a hierarchical structure with levels in the hierarchy separated by\nthe dot character “.”. Property names SHOULD use the reverse domain name convention to minimize the risk\nof collisions between properties defined by different organization, although this cannot really be enforced by\nan implementation. For example, the ACME company SHOULD use the “com.acme.” prefix and properties\nstandardized at ISO will use the “org.iso.” namespace.\nThis specification reserves the “gpd.” namespace and defines the meaning of a few properties in this\nnamespace. Any implementation SHALL refuse to define properties in this namespace unless they are defined\nin the GlobalPlatform specifications.\n2.6 Support for Peripherals and Events\nThis specification defines support for managing peripherals via functions that communicate directly with them\nin a low-level manner.\nThis specification also defines support for an event loop that can receive external events, such as from\nperipherals such as touch screens and biometric authenticators.\nIn this specification, the Peripheral API and Event API are optional. Implementation of other GlobalPlatform\nspecifications may make the presence of the Peripheral API and Event API mandatory. As an example, at the\ntime of writing the GlobalPlatform TEE TUI Extension: Biometrics API ([TEE TUI Bio]) and GlobalPlatform\nTEE Trusted User Interface Low-level API ([TEE TUI Low]) specifications require support of the Peripheral\nand Event APIs.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 38,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "2.5 Properties",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 39 / 375\n2.7 Reserved C Language Identifiers\nGlobalPlatform uses the following namespace areas in C language API definitions for TEE functionality,\nconstants, and variables.\n• TEEC_* as used in the TEE Client API [Client API]\n• TEE_* as used in many GlobalPlatform TEE API Specifications\n• DLM_* as used in TEE Debug API ([TEE TA Debug])\n• PMR_* as used in [TEE TA Debug]\n• ERR_* as used in [TEE TA Debug]\n• GPD.* as used for value names in the TEE properties system\nEach asterisk above is used as a placeholder that can be interpreted as a number of literal characters.\nGlobalPlatform will continue to use the above namespaces; TA, TEE, and Library implementors SHOULD NOT\nuse these areas.\nIf an implementor is already using part of any of these namespaces, then please inform GlobalPlatform of such\nuse and GlobalPlatform will keep a record to avoid future clashes.\nGlobalPlatform does not intend to reserve any other namespaces for the TEE.\n2.8 Long Identifiers\n[C99] specifies that external identifiers of up to 31 significant initial characters are supported by conforming\ncompilers.\nSome function names in this specification have more than 31 significant initial characters. While many common\ncompilers handle this specification, distinguishing names longer than the minimum, there may exist conforming\nC99 compilers that do not correctly distinguish between full identifier names in this specification.\nWhere an implementation uses a compiler that does not fully distinguish between identifiers in this\nspecification, it is recommended that a pre-processor be used on source code to reduce identifier length.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 39,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "2.7 Reserved C Language Identifiers",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "40 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n3 Common Definitions\nThis section specifies the header file, common data types, constants, and parameter annotations used\nthroughout the specification, and discusses backward compatibility.\n3.1 Header File\nSince: TEE Internal API v1.0\nThe header file for the TEE Internal Core API SHALL have the name “tee_internal_api.h”.\n#include \"tee_internal_api.h\"\n3.1.1 API Version\nSince: TEE Internal Core API v1.1.2\nThe header file SHALL contain version specific definitions from which TA compilation options can be selected.\n#define TEE_CORE_API_MAJOR_VERSION ([Major version number])\n#define TEE_CORE_API_MINOR_VERSION ([Minor version number])\n#define TEE_CORE_API_MAINTENANCE_VERSION ([Maintenance version number])\n#define TEE_CORE_API_VERSION (TEE_CORE_API_MAJOR_VERSION << 24) +\n(TEE_CORE_API_MINOR_VERSION << 16) +\n(TEE_CORE_API_MAINTENANCE_VERSION << 8)\nThe document version-numbering format is X.Y[.z], where:\n• Major Version (X) is a positive integer identifying the major release.\n• Minor Version (Y) is a positive integer identifying the minor release.\n• The optional Maintenance Version (z) is a positive integer identifying the maintenance release.\nTEE_CORE_API_MAJOR_VERSION indicates the major version number of the TEE Internal Core API. It SHALL\nbe set to the major version number of this specification.\nTEE_CORE_API_MINOR_VERSION indicates the minor version number of the TEE Internal Core API. It SHALL\nbe set to the minor version number of this specification. If the minor version is zero, then one zero shall be\npresent.\nTEE_CORE_API_MAINTENANCE_VERSION indicates the maintenance version number of the TEE Internal Core\nAPI. It SHALL be set to the maintenance version number of this specification. If the maintenance version is\nzero, then one zero shall be present.\nThe definitions of “Major Version”, “Minor Version”, and “Maintenance Version” in the version number of this\nspecification are determined as defined in the GlobalPlatform Document Management Guide ([Doc Mgmt]). In\nparticular, the value of TEE_CORE_API_MAINTENANCE_VERSION SHALL be zero if it is not already defined\nas part of the version number of this document. The “Draft Revision” number SHALL NOT be provided as an\nAPI version indication.\nA compound value SHALL also be defined. If the Maintenance version number is 0, the compound value\nSHALL be defined as:\n#define TEE_CORE_API_[Major version number]_[Minor version number]\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 40,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.1 Header File",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CORE_API_MAINTENANCE_VERSION,TEE_CORE_API_MAJOR_VERSION,TEE_CORE_API_MINOR_VERSION,TEE_CORE_API_VERSION",
          "has_api_definitions": true,
          "api_count": 4
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 41 / 375\nIf the Maintenance version number is not zero, the compound value SHALL be defined as:\n#define TEE_CORE_API_[Major version number]_[Minor version\nnumber]_[Maintenance version number]\nSome examples of version definitions:\nFor GlobalPlatform TEE Internal Core API Specification v1.3, these would be:\n#define TEE_CORE_API_MAJOR_VERSION (1)\n#define TEE_CORE_API_MINOR_VERSION (3)\n#define TEE_CORE_API_MAINTENANCE_VERSION (0)\n#define TEE_CORE_API_1_3\nAnd the value of TEE_CORE_API_VERSION would be 0x01030000.\nFor a maintenance release of the specification as v2.14.7, these would be:\n#define TEE_CORE_API_MAJOR_VERSION (2)\n#define TEE_CORE_API_MINOR_VERSION (14)\n#define TEE_CORE_API_MAINTENANCE_VERSION (7)\n#define TEE_CORE_API_2_14_7\nAnd the value of TEE_CORE_API_VERSION would be 0x020E0700.\n3.1.2 Target and Version Optimization\nThis specification supports definitions that TA vendors can use to specialize behavior at compile time to provide\nversion and target-specific optimizations.\nThis version of the specification is designed so that it can be used in conjunction with mechanisms to:\n• Provide information about the target platform and Trusted OS\n• Configure the compile and link environment to the configuration best suited to a Trusted Application\nThe detail of these mechanisms and their output is out of scope of this document, but it is intended that the\noutput could be generated automatically from build system metadata and included by tee_internal_api.h.\nThe file prefix “gpd_ta_build_” is reserved for files generated by the build system, possibly derived from\nmetadata.\nThe model for TA construction supported by this specification assumes that a TA will be built to comply to a\nspecific target and set of API versions which is fixed at compile time. A Trusted OS MAY support more than\none set of target and API versions at run-time by mechanisms which are out of scope of this specification.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 41,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.1.2 Target and Version Optimization",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CORE_API_MAINTENANCE_VERSION,TEE_CORE_API_MAJOR_VERSION,TEE_CORE_API_MINOR_VERSION",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "42 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n3.1.3 Support for Optional Capabilities\nSince: TEE Internal Core API v1.2\nA Trusted OS supporting the optional Peripheral and Event APIs SHALL define the following sentinel:\n#define TEE_CORE_API_EVENT\nSince: TEE Internal Core API v1.3\nTo support TMF audit capabilities, the following value is defined in alignment with [TMF ASN.1] Table 9-7.\nTable 3-0: Internal API Names Strings Definition\nStrings Description\nCore-EP Peripheral and Event APIs\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 42,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.1.3 Support for Optional Capabilities",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 43 / 375\n3.2 Data Types\nIn general, comparison of values of given data types is only valid within the scope of a TA instance. Even in\nthe same Trusted OS, other TA instances may have different endianness and word length. It is up to the TA\nimplementer to make sure their TA-to-TA protocols take this into account.\n3.2.1 Basic Types\nThis specification makes use of the integer and Boolean C types as defined in the C99 standard\n(ISO/IEC 9899:1999 – [C99]). In the event of any difference between the definitions in this specification and\nthose in [C99], C99 shall prevail.\nThe following basic types are used:\nsize_t The unsigned integer type of the result of the sizeof operator.\nuintptr_t An unsigned integer type with the property that any valid pointer to void can be\nconverted to this type, then converted back to void* in a given TA instance, and the\nresult will compare equal to the original pointer.\nintptr_t A signed integer type with the property that any valid pointer to void can be\nconverted to this type, then converted back to void* in a given TA instance, and the\nresult will compare equal to the original pointer.\nintmax_t A signed integer type capable of representing any value of any signed integer type.\nuint64_t Unsigned 64-bit integer\nint64_t Signed 64-bit integer\nuint32_t Unsigned 32-bit integer\nint32_t Signed 32-bit integer\nuint16_t Unsigned 16-bit integer\nint16_t Signed 16-bit integer\nuint8_t Unsigned 8-bit integer\nint8_t Signed 8-bit integer\nbool Boolean type with the values true and false\nchar Character; used to denote a byte in a zero-terminated string encoded in UTF-8\n3.2.2 Bit Numbering\nIn this specification, bits in integers are numbered from 0 (least-significant bit) to n (most-significant bit),\nwhere n + 1 bits are used to represent the integer, e.g. for a 2048-bit TEE_BigInt, the bits would be numbered\n0 to 2047 and for a 32-bit uint32_t they would be numbered from 0 to 31.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 43,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.2 Data Types",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "44 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n3.2.3 TEE_Result, TEEC_Result\nSince: TEE Internal API v1.0\ntypedef uint32_t TEE_Result;\nTEE_Result is the type used for return codes from the APIs.\nFor compatibility with [Client API], the following alias of this type is also defined:\nSince: TEE Internal API v1.0\ntypedef TEE_Result TEEC_Result;\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 44,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.2.3 TEE_Result, TEEC_Result",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 45 / 375\n3.2.4 TEE_UUID, TEEC_UUID\nSince: TEE Internal API v1.0\ntypedef struct\n{\nuint32_t timeLow;\nuint16_t timeMid;\nuint16_t timeHiAndVersion;\nuint8_t clockSeqAndNode[8];\n} TEE_UUID;\nTEE_UUID is the Universally Unique Resource Identifier type as defined in [RFC 4122]. This type is used to\nidentify Trusted Applications and clients.\nUUIDs can be directly hard-coded in the Trusted Application code. For example, the UUID 79B77788-9789-\n4a7a-A2BE-B60155EEF5F3 can be hard-coded using the following code:\nstatic const TEE_UUID myUUID =\n{\n0x79b77788, 0x9789, 0x4a7a,\n{ 0xa2, 0xbe, 0xb6, 0x1, 0x55, 0xee, 0xf5, 0xf3 }\n};\nFor compatibility with [Client API], the following alias of this type is also defined:\nNote: The TEE_UUID structure is sensitive to differences in the endianness of the Client API and the TA.\nIt is the responsibility of the Trusted OS to ensure that any endianness difference between client and TA is\nmanaged internally when those structures are passed through one of the defined APIs. The definition below\nassumes that the endianness of both Client API and TA are the same, and needs to be changed\nappropriately if this is not the case.\nSince: TEE Internal API v1.0\ntypedef TEE_UUID TEEC_UUID;\nUniversally Unique Resource Identifiers come in a number of different versions. The following reservations of\nusage are made:\nSince: TEE Internal Core API v1.1, based on [TMF ASN.1] v1.0\nTable 3-1: UUID Usage Reservations\nVersion Reservation\nUUID v5 If a TEE supports [TMF ASN.1], then TA and Security Domain (SD) UUIDs\nusing version 5 SHALL conform to the extended v5 requirements found in that\nspecification.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 45,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.2.4 TEE_UUID, TEEC_UUID",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "46 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n3.3 Constants\n3.3.1 Return Code Ranges and Format\nThe format of return codes and the reserved ranges are defined in the following table.\nTable 3-2: Return Code Formats and Ranges\nRange Value Format Notes\nTEE_SUCCESS 0x00000000\nReserved for use in GlobalPlatform 0x00000001 – 0x6FFFFFFF The return code may\nspecifications, providing non-error identify the specification, as\ninformation discussed following the\ntable.\nReserved for implementation-specific 0x70000000 – 0x7FFFFFFF\nreturn code providing non-error information\nReserved for implementation-specific 0x80000000 – 0x8FFFFFFF\nerrors\nReserved for future use in GlobalPlatform 0x90000000 – 0xEFFFFFFF\nspecifications\nReserved for GlobalPlatform TEE API 0xF0000000 – 0xFFFEFFFF The return code may\ndefined errors identify the specification, as\ndiscussed following the\ntable.\nClient API defined Errors (TEEC_*) 0xFFFF0000 – 0xFFFFFFFF\nNote that some return codes from this\nand other specifications have incorrectly\nbeen defined in this range and are\ntherefore grandfathered in.\nAn error code is a return code that denotes some failure: These are the return codes above 0x7FFFFFFF.\nReturn codes in specified ranges in Table 3-2 MAY include the specification number as a 3-digit BCD (Binary\nCoded Decimal) value in nibbles 7 through 5 (where the high nibble is considered nibble 8).\nFor example, GPD_SPE_123 may define return codes as follows:\n• Specification unique non-error return codes may be numbered 0x01230000 to 0x0123FFFF.\n• Specification unique error codes may be numbered 0xF1230000 to 0xF123FFFF.\n3.3.2 Return Codes\nTable 3-3 lists return codes that are used throughout the APIs.\nNote: While a minor specification version update does not intentionally break backwards compatibility, it does\noccasionally have to add new return codes to existing API. For this reason, we advise the developer not only\nto check for known return codes but to assume that there may be other unknown error codes reported by a\nfunction when a TA is running in a newer environment than that for which the TA was originally developed. By\ndefault, only TEE_SUCCESS is a success and ANYTHING else should be considered a failure.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 46,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.3 Constants",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 47 / 375\nTable 3-3: API Return Codes\nConstant Names and Aliases Value\nTEE_SUCCESS TEEC_SUCCESS 0x00000000\nTEE_ERROR_CORRUPT_OBJECT 0xF0100001\nTEE_ERROR_CORRUPT_OBJECT_2 0xF0100002\nTEE_ERROR_STORAGE_NOT_AVAILABLE 0xF0100003\nTEE_ERROR_STORAGE_NOT_AVAILABLE_2 0xF0100004\nTEE_ERROR_UNSUPPORTED_VERSION 0xF0100005\nTEE_ERROR_CIPHERTEXT_INVALID 0xF0100006\nTEE_ERROR_GENERIC TEEC_ERROR_GENERIC 0xFFFF0000\nTEE_ERROR_ACCESS_DENIED TEEC_ERROR_ACCESS_DENIED 0xFFFF0001\nTEE_ERROR_CANCEL TEEC_ERROR_CANCEL 0xFFFF0002\nTEE_ERROR_ACCESS_CONFLICT TEEC_ERROR_ACCESS_CONFLICT 0xFFFF0003\nTEE_ERROR_EXCESS_DATA TEEC_ERROR_EXCESS_DATA 0xFFFF0004\nTEE_ERROR_BAD_FORMAT TEEC_ERROR_BAD_FORMAT 0xFFFF0005\nTEE_ERROR_BAD_PARAMETERS TEEC_ERROR_BAD_PARAMETERS 0xFFFF0006\nTEE_ERROR_BAD_STATE TEEC_ERROR_BAD_STATE 0xFFFF0007\nTEE_ERROR_ITEM_NOT_FOUND TEEC_ERROR_ITEM_NOT_FOUND 0xFFFF0008\nTEE_ERROR_NOT_IMPLEMENTED TEEC_ERROR_NOT_IMPLEMENTED 0xFFFF0009\nTEE_ERROR_NOT_SUPPORTED TEEC_ERROR_NOT_SUPPORTED 0xFFFF000A\nTEE_ERROR_NO_DATA TEEC_ERROR_NO_DATA 0xFFFF000B\nTEE_ERROR_OUT_OF_MEMORY TEEC_ERROR_OUT_OF_MEMORY 0xFFFF000C\nTEE_ERROR_BUSY TEEC_ERROR_BUSY 0xFFFF000D\nTEE_ERROR_COMMUNICATION TEEC_ERROR_COMMUNICATION 0xFFFF000E\nTEE_ERROR_SECURITY TEEC_ERROR_SECURITY 0xFFFF000F\nTEE_ERROR_SHORT_BUFFER TEEC_ERROR_SHORT_BUFFER 0xFFFF0010\nTEE_ERROR_EXTERNAL_CANCEL TEEC_ERROR_EXTERNAL_CANCEL 0xFFFF0011\nTEE_ERROR_TIMEOUT 0xFFFF3001\nTEE_ERROR_OVERFLOW 0xFFFF300F\nTEE_ERROR_TARGET_DEAD TEEC_ERROR_TARGET_DEAD 0xFFFF3024\nTEE_ERROR_STORAGE_NO_SPACE 0xFFFF3041\nTEE_ERROR_MAC_INVALID 0xFFFF3071\nTEE_ERROR_SIGNATURE_INVALID 0xFFFF3072\nTEE_ERROR_TIME_NOT_SET 0xFFFF5000\nTEE_ERROR_TIME_NEEDS_RESET 0xFFFF5001\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 47,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 47",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "48 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n3.3.3 Declaring Constants\nConstant values SHOULD be declared as follows:\n#define <Constant Name> ( (<Optional Typecast>) <Value> )\nWhere:\n• <Constant Name> is replaced with the name of the constant value, from the “Constant Name”\ncolumn of one of the tables elsewhere in this document, including sections 4.2, 5.4, and 9.2.\n• <Optional Typecast> can optionally be provided where the normal C integer promotion rules may\nnot generate the expected result.\n• <Value> is replaced by the value corresponding to <Constant Name>.\nBackward Compatibility\nVersions of this specification prior to v1.3.1 did not include any statement constraining the mechanism used\nfor constant declaration.\nWhile TEE Internal Core API v1.3.1 and later do not require implementations to follow the recommended\napproach, note that TAs exist in which the constant values are used in switch statements, and these will\nfail to compile if constants are derived using the const keyword.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 48,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.3.3 Declaring Constants",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 49 / 375\n3.4 Parameter Annotations\nThis specification uses a set of patterns on the function parameters. Instead of repeating this pattern again on\neach occurrence, these patterns are referred to with Parameter Annotations. It is expected that this will also\nhelp with systematically translating the APIs into languages other than the C language.\nThe following subsections list all the parameter annotations used in the specification.\nNote that these annotations cannot be expressed in the C language. However, the [in], [inbuf],\n[instring], [instringopt], and [ctx] annotations can make use of the const C keyword. This keyword\nis omitted in the specification of the functions to avoid mixing the formal annotations and a less expressive C\nkeyword. However, the C header file of a compliant implementation SHOULD use the const keyword when\nthese annotations appear.\n3.4.1 [in], [out], and [inout]\nThe annotation [in] applies to a parameter that has a pointer type on a structure, a base type, or more\ngenerally a buffer of a size known in the context of the API call. If the size needs to be clarified, the syntax\n[in(size)] is used.\nWhen the [in] annotation is present on a parameter, it means that the API implementation uses the pointer\nonly for reading and does not accept shared memory.\nWhen a Trusted Application calls an API function that defines a parameter annotated with [in], the parameter\nSHALL be entirely readable by the Trusted Application and SHALL be entirely owned by the calling Trusted\nApplication instance, as defined in section 4.11.1. In particular, this means that the parameter SHALL NOT\nreside in a block of shared memory owned by a client of the Trusted Application. The implementation SHALL\ncheck these conditions and if they are not satisfied, the API call SHALL panic the calling Trusted Application\ninstance.\nThe annotations [out] and [inout] are equivalent to [in] except that they indicate write access and\nread-and-write access respectively.\nNote that, as described in section 4.11.1, the NULL pointer SHALL never be accessible to a Trusted\nApplication. This means that a Trusted Application SHALL NOT pass the NULL pointer in an [in] parameter,\nexcept perhaps if the buffer size is zero.\nSee the function TEE_CheckMemoryAccessRights in section 4.11.1 for more details about shared memory\nand the NULL pointer. See the function TEE_Panic in section 4.8.1 for information about Panics.\n3.4.2 [outopt]\nThe [outopt] annotation is equivalent to [out] except that the caller can set the parameter to NULL, in\nwhich case the result SHALL be discarded.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 49,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.4 Parameter Annotations",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "50 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n3.4.3 [inbuf] and [inoutbuf]\nThe [inbuf] annotation applies to a pair of parameters, the first of which is of pointer type, such as a void*,\nand the second of which is of type size_t. It means that the parameters describe an input data buffer. The\nentire buffer SHALL be readable by the Trusted Application and there is no restriction on the owner of the\nbuffer: It can reside in shared memory or in private memory.\nThe implementation SHALL check that the buffer is entirely readable and SHALL panic the calling Trusted\nApplication instance if that is not the case.\nBecause the NULL pointer is never accessible, a Trusted Application cannot pass NULL in the first (pointer)\nparameter unless the second (size_t) parameter is set to 0.\nThe [inoutbuf] annotation is equivalent to [inbuf] except that it indicates read-and-write access to the\ndata buffer. The implementation SHALL check that the buffer is entirely readable and writable and SHALL\npanic the calling Trusted Application instance if that is not the case.\n3.4.4 [outbuf]\nThe [outbuf] annotation applies to a pair of parameters, the first of which is of pointer type, such as a\nvoid*, and the second of which is of type size_t*, herein referenced with the names buffer and size.\nIt is used by API functions to return an output data buffer. The data buffer SHALL be allocated by the calling\nTrusted Application and passed in the buffer parameter. Because the size of the output buffer cannot\ngenerally be determined in advance, the following convention is used:\n• On entry, *size contains the number of bytes actually allocated in buffer. The buffer with this\nnumber of bytes SHALL be entirely writable by the Trusted Application; otherwise the implementation\nSHALL panic the calling Trusted Application instance. In any case, the implementation SHALL NOT\nwrite beyond this limit.\n• On return:\nIf the output fits in the output buffer, then the implementation SHALL write the output in buffer\no\nand SHALL update *size with the actual size of the output in bytes.\nIf the output does not fit in the output buffer, then the implementation SHALL update *size with\no\nthe required number of bytes and SHALL return TEE_ERROR_SHORT_BUFFER. It is\nimplementation-dependent whether the output buffer is left untouched or contains part of the\noutput. In any case, the TA SHOULD consider that its content is undefined after the function\nreturns.\nWhen the function returns TEE_ERROR_SHORT_BUFFER, it SHALL return the size of the output data.\nNote that if the caller sets *size to 0, the function will always return TEE_ERROR_SHORT_BUFFER unless\nthe actual output data is empty. In this case, the parameter buffer can take any value, e.g. NULL, as it\nwill not be accessed by the implementation. If *size is set to a non-zero value on entry, then buffer cannot\nbe NULL because the buffer starting from the NULL address is never writable.\nThere is no restriction on the owner of the buffer: It can reside in shared memory or in private memory.\nThe parameter size SHALL be considered as [inout]. That is, size SHALL be readable and writable by\nthe Trusted Application. The parameter size SHALL NOT be NULL and SHALL NOT reside in shared\nmemory. The implementation SHALL check these conditions and panic the calling Trusted Application instance\nif they are not satisfied.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 50,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.4.3 [inbuf] and [inoutbuf]",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 51 / 375\n3.4.5 [outbufopt]\nThe [outbufopt] annotation is equivalent to [outbuf] but if the parameter size is set to NULL, then the\nfunction SHALL behave as if the output buffer was not large enough to hold the entire output data and the\noutput data SHALL be discarded. In this case, the parameter buffer is ignored, but SHOULD normally be\nset to NULL, too.\nNote the difference between passing a size pointer set to NULL and passing a size that points to 0.\nAssuming the function does not fail for any other reasons:\n• If size is set to NULL, the function performs the operation, returns TEE_SUCCESS, and the output\ndata is discarded.\n• If size points to 0, the function does not perform the operation. It just updates *size with the\noutput size and returns TEE_ERROR_SHORT_BUFFER.\n3.4.6 [instring] and [instringopt]\nThe [instring] annotation applies to a single [in] parameter, which SHALL contain a zero-terminated\nstring of char characters. Because the buffer is [in], it cannot reside in shared memory.\nThe [instringopt] annotation is equivalent to [instring] but the parameter can be set to NULL to\ndenote the absence of a string.\n3.4.7 [outstring] and [outstringopt]\nThe [outstring] annotation is equivalent to [outbuf], but the output data is specifically a zero-terminated\nstring of char characters. The size of the buffer SHALL account for the zero terminator. The buffer may\nreside in shared memory.\nThe [outstringopt] annotation is equivalent to [outstring] but with [outbufopt] instead of [outbuf],\nwhich means that size can be set to NULL to discard the output.\n3.4.8 [ctx]\nThe [ctx] annotation applies to a void* parameter. It means that the parameter is not accessed by the\nimplementation, but will merely be stored to be provided to the Trusted Application later. Although a Trusted\nApplication typically uses such parameters to store pointers to allocated structures, they can contain any value.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 51,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.4.5 [outbufopt]",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "52 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n3.5 Backward Compatibility\nIt is an explicit principle of the design of the TEE Internal Core API that backward compatibility is supported\nbetween specification versions with the same major version number. It is, in addition, a principle of the design\nof this specification that the API should not depend on details of the implementation platform.\nThere are cases where previous versions of the TEE Internal Core API contain API definitions which depend\non memory accesses being expressible using 32-bit representations for pointers and buffer sizes. In TEE\nInternal Core API v1.2 and later we resolve this issue in a way which is backward compatible with idiomatic\nC99 code, but which may cause issues with code which has been written making explicit assumptions about\nC language type coercions to 32-bit integers.\nFrom TEE Internal Core API v1.2 onward, definitions are available which allow a TA or its build environment\nto define the API version it requires. A Trusted OS or the corresponding TA build system can use these to\nselect how TEE Internal Core API features are presented to the TA.\n3.5.1 Version Compatibility Definitions\nA TA can set the definitions in this section to non-zero values if it was written in a way that requires strict\ncompatibility with a specific version of this specification. These definitions could, for example, be set in the TA\nsource code, or they could be set by the build system provided by the Trusted OS, based on metadata that is\nout of scope of this specification.\nThis mechanism can be used where a TA depends for correct operation on the older definition. TA authors are\nwarned that older versions are updated to clarify intended behavior rather than to change it, and there may be\ninconsistent behavior between different Trusted OS platforms where these definitions are used.\nThis mechanism resolves all necessary version information when a TA is compiled to run on a given Trusted\nOS.\nSince: TEE Internal Core API v1.2\n#define TEE_CORE_API_REQUIRED_MAJOR_VERSION (major)\n#define TEE_CORE_API_REQUIRED_MINOR_VERSION (minor)\n#define TEE_CORE_API_REQUIRED_MAINTENANCE_VERSION (maintenance)\nThe following rules govern the use of TEE_CORE_API_REQUIRED_MAJOR_VERSION,\nTEE_CORE_API_REQUIRED_MINOR_VERSION, and TEE_CORE_API_REQUIRED_MAINTENANCE_VERSION\nby TA implementers:\nIf TEE_CORE_API_REQUIRED_MAINTENANCE_VERSION is defined by a TA, then\no\nTEE_CORE_API_REQUIRED_MAJOR_VERSION and TEE_CORE_API_REQUIRED_MINOR_VERSION\nSHALL also be defined by the TA.\nIf TEE_CORE_API_REQUIRED_MINOR_VERSION is defined by a TA, then\no\nTEE_CORE_API_REQUIRED_MAJOR_VERSION SHALL also be defined by the TA.\nIf the TA violates any rule above, TA compilation SHALL stop with an error indicating the reason.\nTEE_CORE_API_REQUIRED_MAJOR_VERSION is used by a TA to indicate that it requires strict compatibility\nwith a specific major version of this specification in order to operate correctly. If this value is set to 0 or is\nunset, it indicates that the latest major version of this specification SHALL be used.\nTEE_CORE_API_REQUIRED_MINOR_VERSION is used by a TA to indicate that it requires strict compatibility\nwith a specific minor version of this specification in order to operate correctly. If this value is unset, it\nindicates that the latest minor version of this specification associated with the determined\nTEE_CORE_API_REQUIRED_MAJOR_VERSION SHALL be used.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 52,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "3.5 Backward Compatibility",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CORE_API_REQUIRED_MAINTENANCE_VERSION,TEE_CORE_API_REQUIRED_MAJOR_VERSION,TEE_CORE_API_REQUIRED_MINOR_VERSION",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 53 / 375\nTEE_CORE_API_REQUIRED_MAINTENANCE_VERSION is used by a TA to indicate that it requires strict\ncompatibility with a specific major version of this specification in order to operate correctly. If this value is\nunset, it indicates that the latest maintenance version of this specification associated with\nTEE_CORE_API_REQUIRED_MAJOR_VERSION and TEE_CORE_API_REQUIRED_MINOR_VERSION SHALL\nbe used.\nIf none of the definitions above is set, a Trusted OS or its build system SHALL select the most recent\nversion of this specification that it supports, as defined in section 3.1.1.\nIf the Trusted OS is unable to provide an implementation matching the request from the TA, compilation of\nthe TA against that Trusted OS or its build system SHALL fail with an error indicating that the Trusted OS\nis incompatible with the TA. This ensures that TAs originally developed against previous versions of this\nspecification can be compiled with identical behavior, or will fail to compile.\nIf the above definitions are set, a Trusted OS SHALL behave exactly according to the definitions for the\nindicated version of the specification, with only the definitions in that version of the specification being\nexported to a TA by the trusted OS or its build system. In particular an implementation SHALL NOT enable\nAPIs which were first defined in a later version of this specification than the version requested by the TA.\nIf the above definitions are set to 0 or are not set, then the Trusted OS SHALL behave according to this\nversion of the specification.\nTo assist TA developers wishing to make use of backward-compatible behavior, each API in this document\nis marked with the version of this specification in which it was last modified. Where strict backward\ncompatibility is not maintained, information has been provided to explain any changed behavior.\nAs an example, consider a TA which requires strict compatibility with TEE Internal Core API v1.1:\n#define TEE_CORE_API_REQUIRED_MAJOR_VERSION (1)\n#define TEE_CORE_API_REQUIRED_MINOR_VERSION (1)\n#define TEE_CORE_API_REQUIRED_MAINTENANCE_VERSION (0)\nDue to the semantics of the C preprocessor, the above definitions SHALL be defined before the main body\nof definitions in “tee_internal_api.h” is processed. The mechanism by which this occurs is out of scope\nof this specification.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 53,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 53",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CORE_API_REQUIRED_MAINTENANCE_VERSION,TEE_CORE_API_REQUIRED_MAJOR_VERSION,TEE_CORE_API_REQUIRED_MINOR_VERSION",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "54 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4 Trusted Core Framework API\nThis section defines the Trusted Core Framework API, defining OS-like APIs and infrastructure. It contains the\nfollowing subsections:\n• Section 4.1, Data Types\n• Section 4.2, Constants\nCommon definitions used throughout section 4.\n• Section 4.3, TA Interface\nDefines the entry points that each TA SHALL define.\n• Section 4.4, Property Access Functions\nDefines the generic functions to access properties. These functions can be used to access\nTA Configuration Properties, Client Properties, and Implementation Properties.\n• Section 4.5, Trusted Application Configuration Properties\nDefines the standard Trusted Application Configuration Properties.\n• Section 4.6, Client Properties\nDefines the standard Client Properties.\n• Section 4.7, Implementation Properties\nDefines the standard Implementation Properties of the TEE.\n• Section 4.8, Panics\nDefines the function TEE_Panic.\n• Section 4.9, Internal Client API\nDefines the Internal Client API that allows a Trusted Application to act as a Client of another Trusted\nApplication.\n• Section 4.10, Cancellation Functions\nDefines how a Trusted Application can handle client cancellation requests, acknowledge them, and\nmask or unmask the propagated effects of cancellation requests on cancellable functions.\n• Section 4.11, Memory Management Functions\nDefines how to check the access rights to memory buffers, how to access global variables, how to\nallocate memory (similar to malloc), and a few utility functions to fill or copy memory blocks.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 54,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 54",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 55 / 375\n4.1 Data Types\n4.1.1 TEE_Identity\nSince: TEE Internal API v1.0\ntypedef struct\n{\nuint32_t login;\nTEE_UUID uuid;\n} TEE_Identity;\nThe TEE_Identity structure defines the full identity of a Client:\n• login is one of the TEE_LOGIN_XXX constants. (See section 4.2.2.)\n• uuid contains the client UUID or Nil (as defined in [RFC 4122]) if not applicable.\n4.1.2 TEE_Param\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\ntypedef union\n{\nstruct\n{\nvoid* buffer; size_t size;\n} memref;\nstruct\n{\nuint32_t a;\nuint32_t b;\n} value;\n} TEE_Param;\nThis union describes one parameter passed by the Trusted Core Framework to the entry points\nTA_OpenSessionEntryPoint or TA_InvokeCommandEntryPoint or by the TA to the functions\nTEE_OpenTASession or TEE_InvokeTACommand.\nWhich of the field value or memref to select is determined by the parameter type specified in the argument\nparamTypes passed to the entry point. See section 4.3.6.1 and section 4.9.4 for more details on how this\ntype is used.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for size.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 55,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.1 Data Types",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "56 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.1.3 TEE_TASessionHandle\nSince: TEE Internal API v1.0\ntypedef struct __TEE_TASessionHandle* TEE_TASessionHandle;\ntypedef struct <ImplNamespace>_TEE_TASessionHandle* TEE_TASessionHandle;\nTEE_TASessionHandle is an opaque handle (as defined in section 2.4) on a TA Session. These handles are\nreturned by the function TEE_OpenTASession specified in section 4.9.1.\nIn the above definition, <ImplNamespace> can be replaced with a namespace identifier reserved for the\nimplementation, or the implementation may select some other name and definition provided that it is\ncompatible with assignment of TEE_HANDLE_NULL.\nSince: TEE Internal Core API v1.3.1\nPrevious versions of this specification used the definition __TEE_TASessionHandle* for\nTEE_TASessionHandle.\nThis was changed as names beginning with double underscore are reserved for the C language\nimplementation in [C99]. The name and type used for opaque handle definitions is not, and never has been,\nnormative.\n4.1.4 TEE_PropSetHandle\nSince: TEE Internal API v1.0\ntypedef struct __TEE_PropSetHandle* TEE_PropSetHandle;\ntypedef struct <ImplNamespace>_TEE_PropSetHandle* TEE_PropSetHandle;\nTEE_PropSetHandle is an opaque handle (as defined in section 2.4) on a property set or enumerator. These\nhandles either are returned by the function TEE_AllocatePropertyEnumerator specified in section 4.4.7\nor are one of the pseudo-handles defined in section 4.2.4.\nIn the above definition, <ImplNamespace> can be replaced with a namespace identifier reserved for the\nimplementation, or the implementation may select some other name and definition provided that it is\ncompatible with assignment of TEE_HANDLE_NULL and any legal constant values defined for\nTEE_PropSetHandle.\nSince: TEE Internal Core API v1.2\nTEE_PropSetHandle values use interfaces that are shared between defined constants and real opaque\nhandles.\nThe Trusted OS SHALL take precautions that it will never generate a real opaque handle of type\nTEE_PropSetHandle using constant values defined in section 4.2.4, and that when acting upon a\nTEE_PropSetHandle it will, where appropriate, filter for these constant values first.\nSince: TEE Internal Core API v1.3.1\nPrevious versions of this specification used the definition __TEE_PropSetHandle* for\nTEE_PropSetHandle.\nThis was changed as names beginning with double underscore are reserved for the C language\nimplementation in [C99]. The name and type used for opaque handle definitions is not, and never has been,\nnormative.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 56,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.1.3 TEE_TASessionHandle",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 57 / 375\n4.2 Constants\nNote: See section 3.3.3 for recommendations on constant declaration.\n4.2.1 Parameter Types\nTable 4-1: Parameter Type Constants\nConstant Name Equivalent on Client API Constant Value\nTEE_PARAM_TYPE_NONE TEEC_NONE 0\nTEE_PARAM_TYPE_VALUE_INPUT TEEC_VALUE_INPUT 1\nTEE_PARAM_TYPE_VALUE_OUTPUT TEEC_VALUE_OUTPUT 2\nTEE_PARAM_TYPE_VALUE_INOUT TEEC_VALUE_INOUT 3\nTEE_PARAM_TYPE_MEMREF_INPUT TEEC_MEMREF_TEMP_INPUT 5\nor\nTEEC_MEMREF_PARTIAL_INPUT\nTEE_PARAM_TYPE_MEMREF_OUTPUT TEEC_MEMREF_TEMP_OUTPUT 6\nor\nTEEC_MEMREF_PARTIAL_OUTPUT\nTEE_PARAM_TYPE_MEMREF_INOUT TEEC_MEMREF_TEMP_INOUT 7\nor\nTEEC_MEMREF_PARTIAL_INOUT\n4.2.2 Login Types\nTable 4-2: Login Type Constants\nConstant Name Equivalent on Client API Constant Value\nTEE_LOGIN_PUBLIC TEEC_LOGIN_PUBLIC 0x00000000\nTEE_LOGIN_USER TEEC_LOGIN_USER 0x00000001\nTEE_LOGIN_GROUP TEEC_LOGIN_GROUP 0x00000002\nTEE_LOGIN_APPLICATION TEEC_LOGIN_APPLICATION 0x00000004\nTEE_LOGIN_APPLICATION_USER TEEC_LOGIN_APPLICATION_USER 0x00000005\nTEE_LOGIN_APPLICATION_GROUP TEEC_LOGIN_APPLICATION_GROUP 0x00000006\nReserved for future GlobalPlatform defined login types 0x00000007 –\n0x7FFFFFFF\nReserved for implementation-specific login types 0x80000000 –\n0xEFFFFFFF\nTEE_LOGIN_TRUSTED_APP 0xF0000000\nReserved for future GlobalPlatform defined login types 0xF0000001 –\n0xFFFFFFFF\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 57,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.2 Constants",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "58 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.2.3 Origin Codes\nTable 4-3: Origin Code Constants\nConstant Names Constant Value\nTEE_ORIGIN_API TEEC_ORIGIN_API 0x00000001\nTEE_ORIGIN_COMMS TEEC_ORIGIN_COMMS 0x00000002\nTEE_ORIGIN_TEE TEEC_ORIGIN_TEE 0x00000003\nTEE_ORIGIN_TRUSTED_APP TEEC_ORIGIN_TRUSTED_APP 0x00000004\nReserved for future GlobalPlatform use 0x00000005 – 0xEFFFFFFF\nReserved for implementation-specific origin values 0xF0000000 – 0xFFFFFFFF\nNote: Other specifications can define additional origin code constants, so TA implementers SHOULD ensure\nthat they include default handling for other values.\n4.2.4 Property Set Pseudo-Handles\nTable 4-4: Property Set Pseudo-Handle Constants\nConstant Name Constant Value\nReserved for use by allocated property set All 32-bit address boundary aligned values (i.e. any value\npseudo-handles with the least significant two address bits zero) are\nreserved for use as non-constant values allocated by the\nAPI as opaque handles.\nReserved Non 32-bit boundary aligned values in the range\n0x00000000 – 0xEFFFFFFF\nReserved for implementation-specific Non 32-bit boundary aligned values in the range\nproperty sets 0xF0000000 – 0xFFFEFFFF\nReserved for future GlobalPlatform use Non 32-bit boundary aligned values in the range\n0xFFFF0000 – 0xFFFFFFFC\nTEE_PROPSET_TEE_IMPLEMENTATION (TEE_PropSetHandle)0xFFFFFFFD\nTEE_PROPSET_CURRENT_CLIENT (TEE_PropSetHandle)0xFFFFFFFE\nTEE_PROPSET_CURRENT_TA (TEE_PropSetHandle)0xFFFFFFFF\n4.2.5 Memory Access Rights\nTable 4-5: Memory Access Rights Constants\nConstant Name Constant Value\nTEE_MEMORY_ACCESS_READ 0x00000001\nTEE_MEMORY_ACCESS_WRITE 0x00000002\nTEE_MEMORY_ACCESS_ANY_OWNER 0x00000004\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 58,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.2.3 Origin Codes",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_PROPSET_CURRENT_CLIENT,TEE_PROPSET_CURRENT_TA,TEE_PROPSET_TEE_IMPLEMENTATION",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 59 / 375\n4.3 TA Interface\nEach Trusted Application SHALL provide the implementation with a number of functions, collectively called\nthe “TA interface”. These functions are the entry points called by the Trusted Core Framework to create the\ninstance, notify the instance that a new client is connecting, notify the instance when the client invokes a\ncommand, etc. These entry points cannot be registered dynamically by the Trusted Application code: They\nSHALL be bound to the framework before the Trusted Application code is started.\nThe following table lists the functions in the TA interface.\nTable 4-6: TA Interface Functions\nTA Interface Function (Entry Point) Description\nTA_CreateEntryPoint This is the Trusted Application constructor. It is called once and\nonly once in the lifetime of the Trusted Application instance. If\nthis function fails, the instance is not created.\nTA_DestroyEntryPoint This is the Trusted Application destructor. The Trusted Core\nFramework calls this function just before the Trusted Application\ninstance is terminated. The Framework SHALL guarantee that no\nsessions are open when this function is called. When\nTA_DestroyEntryPoint returns, the Framework SHALL\ncollect all resources claimed by the Trusted Application instance.\nTA_OpenSessionEntryPoint This function is called whenever a client attempts to connect to\nthe Trusted Application instance to open a new session. If this\nfunction returns an error, the connection is rejected and no new\nsession is opened.\nIn this function, the Trusted Application can attach an opaque\nvoid* context to the session. This context is recalled in all\nsubsequent TA calls within the session.\nTA_CloseSessionEntryPoint This function is called when the client closes a session and\ndisconnects from the Trusted Application instance. The\nimplementation guarantees that there are no active commands in\nthe session being closed. The session context reference is given\nback to the Trusted Application by the Framework.\nIt is the responsibility of the Trusted Application to deallocate the\nsession context if memory has been allocated for it.\nTA_InvokeCommandEntryPoint This function is called whenever a client invokes a Trusted\nApplication command. The Framework gives back the session\ncontext reference to the Trusted Application in this function call.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 59,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.3 TA Interface",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "60 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nThe following table summarizes client operations and the resulting Trusted Application effect.\nTable 4-7: Effect of Client Operation on TA Interface\nClient Operation Trusted Application Effect\nTEEC_OpenSession If a new Trusted Application instance is needed to handle\nor the session, TA_CreateEntryPoint is called.\nTEE_OpenTASession Then, TA_OpenSessionEntryPoint is called.\nTEEC_InvokeCommand TA_InvokeCommandEntryPoint is called.\nor\nTEE_InvokeTACommand\nTEEC_CloseSession TA_CloseSessionEntryPoint is called.\nor For a multi-instance TA or for a single-instance,\nTEE_CloseTASession non keep-alive TA, if the session closed was the last session\non the instance, then TA_DestroyEntryPoint is called.\nOtherwise, the instance is kept until the TEE shuts down.\nTEEC_RequestCancellation See section 4.10 for details on the effect of cancellation\nor requests.\nThe function TEE_OpenTASession or\nTEE_InvokeTACommand is cancelled.\nClient terminates unexpectedly From the point of view of the TA instance, the behavior\nSHALL be identical to the situation where the client does not\nterminate unexpectedly but, for all opened sessions:\n• requests the cancellation of all pending operations in that\nsession,\n• waits for the completion of all these operations in that\nsession,\n• and finally closes that session.\nNote that there is no way for the TA to distinguish between\nthe client gracefully cancelling all its operations and closing\nall its sessions and the implementation taking over when the\nclient dies unexpectedly.\nInterface Operation Parameters\nWhen a Client opens a session on a Trusted Application or invokes a command, it can send Operation\nParameters to the Trusted Application. The parameters encode the data associated with the operation. Up to\nfour parameters can be sent in an operation. If these are insufficient, then one of the parameters may be used\nto carry further parameter data via a Memory Reference.\nEach parameter can be individually typed by the Client as a Value Parameter, carrying two 32-bit integers, or\na Memory Reference Parameter, carrying a pointer to a client-owned memory buffer. Each parameter is also\ntagged with a direction of data flow (input, output, or both input and output). For output Memory References,\nthere is a built-in mechanism for the Trusted Applications to report the necessary size of the buffer in case of\na too-short buffer. See section 4.3.6 for more information about the handling of parameters in the TA interface.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 60,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 60",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 61 / 375\nNote that Memory Reference Parameters typically point to memory owned by the client and shared with the\nTrusted Application for the duration of the operation. This is especially useful in the case of REE Clients to\nminimize the number of memory copies and the data footprint in case a Trusted Application needs to deal with\nlarge data buffers, for example to process a multimedia stream protected by DRM.\nSecurity Considerations\nThe fact that Memory References may use memory directly shared with the client implies that the Trusted\nApplication needs to be especially careful when handling such data: Even if the client is not allowed to access\nthe shared memory buffer during an operation on this buffer, the Trusted OS usually cannot enforce this\nrestriction. A badly-designed or rogue client may well change the content of the shared memory buffer at any\ntime, even between two consecutive memory accesses by the Trusted Application. This means that the\nTrusted Application needs to be carefully written to avoid any security problem if this happens. If values in the\nbuffer are security critical, the Trusted Application SHOULD always read data only once from a shared buffer\nand then validate it. It SHALL NOT assume that data written to the buffer can be read unchanged later on.\nError Handling\nAll TA interface functions except TA_DestroyEntryPoint and TA_CloseSessionEntryPoint return a\nreturn code of type TEE_Result. The behavior of the Framework when an entry point returns an error\ndepends on the entry point called:\n• If TA_CreateEntryPoint returns an error, the Trusted Application instance is not created.\n• If TA_OpenSessionEntryPoint returns an error code, the client connection is rejected.\nAdditionally, the error code is propagated to the client as described below.\n• If TA_InvokeCommandEntryPoint returns an error code, this error code is propagated to the client.\n• TA_CloseSessionEntryPoint and TA_DestroyEntryPoint cannot return an error.\nTA_OpenSessionEntryPoint and TA_InvokeCommandEntryPoint return codes are propagated to the\nclient via the TEE Client API (see [Client API]) or the Internal Client API (see section 4.9) with the origin set to\nTEEC_ORIGIN_TRUSTED_APP.\nClient Properties\nWhen a Client connects to a Trusted Application, the Framework associates the session with Client Properties.\nTrusted Applications can retrieve the identity and properties of their client by calling one of the property access\nfunctions with the TEE_PROPSET_CURRENT_CLIENT. The standard Client Properties are fully specified in\nsection 4.6.\nThe TA_EXPORT keyword\nDepending on the compiler used and the targeted platform, a TA entry point may need to be decorated with\nan annotation such as __declspec(dllexport) or similar. This annotation SHALL be defined in the TEE\nInternal Core API header file as TA_EXPORT and placed between the entry point return type and function\nname as shown in the specification of each entry point.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 61,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 61",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "62 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.3.1 TA_CreateEntryPoint\nSince: TEE Internal API v1.0\nTEE_Result TA_EXPORT TA_CreateEntryPoint( void );\nDescription\nThe function TA_CreateEntryPoint is the Trusted Application’s constructor, which the Framework calls\nwhen it creates a new instance of the Trusted Application.\nTo register instance data, the implementation of this constructor can use either global variables or the function\nTEE_SetInstanceData (described in section 4.11.2).\nSpecification Number: 10 Function Number: 0x102\nReturn Code\n• TEE_SUCCESS: If the instance is successfully created, the function SHALL return TEE_SUCCESS.\n• Any other value: If any other code is returned, then the instance is not created, and no other entry\npoints of this instance will be called. The Framework SHALL reclaim all resources and dereference all\nobjects related to the creation of the instance.\nIf this entry point was called as a result of a client opening a session, the return code is returned to the\nclient and the session is not opened.\nPanic Reasons\n• If the implementation detects any error that cannot be represented by any defined or implementation\ndefined error code.\n4.3.2 TA_DestroyEntryPoint\nSince: TEE Internal API v1.0\nvoid TA_EXPORT TA_DestroyEntryPoint( void );\nDescription\nThe function TA_DestroyEntryPoint is the Trusted Application’s destructor, which the Framework calls\nwhen the instance is being destroyed.\nWhen the function TA_DestroyEntryPoint is called, the Framework guarantees that no client session is\ncurrently open. Once the call to TA_DestroyEntryPoint has been completed, no other entry point of this\ninstance will ever be called.\nNote that when this function is called, all resources opened by the instance are still available. It is only after\nthe function returns that the implementation SHALL start automatically reclaiming resources left open.\nAfter this function returns, the implementation SHALL consider the instance destroyed and SHALL reclaim all\nresources left open by the instance.\nSpecification Number: 10 Function Number: 0x103\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 62,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.3.1 TA_CreateEntryPoint",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TA_CreateEntryPoint,TA_DestroyEntryPoint,TEE_SetInstanceData",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 63 / 375\n4.3.3 TA_OpenSessionEntryPoint\nSince: TEE Internal API v1.0\nTEE_Result TA_EXPORT TA_OpenSessionEntryPoint(\nuint32_t paramTypes,\n[inout] TEE_Param params[4],\n[out][ctx] void** sessionContext );\nDescription\nThe Framework calls the function TA_OpenSessionEntryPoint when a client requests to open a session\nwith the Trusted Application. The open session request may result in a new Trusted Application instance being\ncreated as defined by the gpd.ta.singleInstance property described in section 4.5.\nThe client can specify parameters in an open operation which are passed to the Trusted Application instance\nin the arguments paramTypes and params. These arguments can also be used by the Trusted Application\ninstance to transfer response data back to the client. See section 4.3.6 for a specification of how to handle the\noperation parameters.\nIf this function returns TEE_SUCCESS, the client is connected to a Trusted Application instance and can invoke\nTrusted Application commands. When the client disconnects, the Framework will eventually call the\nTA_CloseSessionEntryPoint entry point.\nIf the function returns any error, the Framework rejects the connection and returns the return code and the\ncurrent content of the parameters to the client. The return origin is then set to TEEC_ORIGIN_TRUSTED_APP.\nThe Trusted Application instance can register a session data pointer by setting *sessionContext. The\nframework SHALL ensure that sessionContext is a valid address of a pointer, and that it is unique per TEE\nClient session.\nThe value of this pointer is not interpreted by the Framework, and is simply passed back to other TA_ functions\nwithin this session. Note that *sessionContext may be set with a pointer to a memory allocated by the\nTrusted Application instance or with anything else, such as an integer, a handle, etc. The Framework will not\nautomatically free *sessionContext when the session is closed; the Trusted Application instance is\nresponsible for freeing memory if required.\nDuring the call to TA_OpenSessionEntryPoint the client may request to cancel the operation. See\nsection 4.10 for more details on cancellations. If the call to TA_OpenSessionEntryPoint returns\nTEE_SUCCESS, the client SHALL consider the session as successfully opened and explicitly close it if\nnecessary.\nParameters\n• paramTypes: The types of the four parameters. See section 4.3.6.1 for more information.\n• params: A pointer to an array of four parameters. See section 4.3.6.2 for more information.\nThe params parameter is defined in the prototype as an array of length 4. Implementers should be\naware that the address of the start of the array is passed to the callee.\n• sessionContext: A pointer to a variable that can be filled by the Trusted Application instance with\nan opaque void* data pointer\nSpecification Number: 10 Function Number: 0x105\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 63,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.3.3 TA_OpenSessionEntryPoint",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TA_OpenSessionEntryPoint",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "64 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nReturn Code\n• TEE_SUCCESS: If the session is successfully opened.\n• Any other value: If the session could not be opened.\nThe return code may be one of the pre-defined codes, or may be a new return code defined by the\no\nTrusted Application implementation itself. In any case, the implementation SHALL report the return\ncode to the client with the origin TEEC_ORIGIN_TRUSTED_APP.\nPanic Reasons\n• If the implementation detects any error that cannot be expressed by any defined or implementation\ndefined error code.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 64,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 64",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 65 / 375\n4.3.4 TA_CloseSessionEntryPoint\nSince: TEE Internal API v1.0\nvoid TA_EXPORT TA_CloseSessionEntryPoint(\n[ctx] void* sessionContext);\nDescription\nThe Framework calls the function TA_CloseSessionEntryPoint to close a client session.\nThe Trusted Application implementation is responsible for freeing any resources consumed by the session\nbeing closed. Note that the Trusted Application cannot refuse to close a session, but can hold the closing until\nit returns from TA_CloseSessionEntryPoint. This is why this function cannot return a return code.\nParameters\n• sessionContext: The value of the void* opaque data pointer set by the Trusted Application in the\nfunction TA_OpenSessionEntryPoint for this session.\nSpecification Number: 10 Function Number: 0x101\nReturn Value\nThis function can return no success or error code.\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 65,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.3.4 TA_CloseSessionEntryPoint",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TA_CloseSessionEntryPoint",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "66 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.3.5 TA_InvokeCommandEntryPoint\nSince: TEE Internal API v1.0\nTEE_Result TA_EXPORT TA_InvokeCommandEntryPoint(\n[ctx] void* sessionContext,\nuint32_t commandID,\nuint32_t paramTypes,\n[inout] TEE_Param params[4] );\nDescription\nThe Framework calls the function TA_InvokeCommandEntryPoint when the client invokes a command\nwithin the given session.\nThe Trusted Application can access the parameters sent by the client through the paramTypes and params\narguments. It can also use these arguments to transfer response data back to the client. See section 4.3.6 for\na specification of how to handle the operation parameters.\nDuring the call to TA_InvokeCommandEntryPoint the client may request to cancel the operation. See\nsection 4.10 for more details on cancellations.\nA command is always invoked within the context of a client session. Thus, any Client Property (see section 4.6)\ncan be accessed by the command implementation.\nParameters\n• sessionContext: The value of the void* opaque data pointer set by the Trusted Application in the\nfunction TA_OpenSessionEntryPoint\n• commandID: A Trusted Application-specific code that identifies the command to be invoked\n• paramTypes: The types of the four parameters. See section 4.3.6.1 for more information.\n• params: A pointer to an array of four parameters. See section 4.3.6.2 for more information.\nThe params parameter is defined in the prototype as an array of length 4. Implementers should be\naware that the address of the start of the array is passed to the callee.\nSpecification Number: 10 Function Number: 0x104\nReturn Code\n• TEE_SUCCESS: If the command is successfully executed, the function SHALL return this value.\n• Any other value: If the invocation of the command fails for any reason\nThe return code may be one of the pre-defined codes, or may be a new return code defined by the\no\nTrusted Application implementation itself. In any case, the implementation SHALL report the return\ncode to the client with the origin TEEC_ORIGIN_TRUSTED_APP.\nPanic Reasons\n• If the implementation detects any error that cannot be expressed by any defined or implementation\ndefined error code.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 66,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.3.5 TA_InvokeCommandEntryPoint",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TA_InvokeCommandEntryPoint",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 67 / 375\n4.3.6 Operation Parameters in the TA Interface\nWhen a client opens a session or invokes a command within a session, it can transmit operation parameters\nto the Trusted Application instance and receive response data back from the Trusted Application instance.\nArguments paramTypes and params are used to encode the operation parameters and their types which\nare passed to the Trusted Application instance. While executing the open session or invoke command entry\npoints, the Trusted Application can also write in params to encode the response data.\n4.3.6.1 Content of paramTypes Argument\nThe argument paramTypes encodes the type of each of the four parameters passed to an entry point. The\ncontent of paramTypes is implementation dependent.\nEach parameter type can take one of the TEE_PARAM_TYPE_XXX values listed in section 4.2.1. The type of\neach parameter determines whether the parameter is used or not, whether it is a Value or a Memory\nReference, and the direction of data flow between the Client and the Trusted Application instance: Input (Client\nto Trusted Application instance), Output (Trusted Application instance to Client), or both Input and Output. The\nparameter type is set to TEE_PARAM_TYPE_NONE when no parameters are passed by the client in either\nTEEC_OpenSession or TEEC_InvokeCommand; this includes when the operation parameter itself is set to\nNULL.\nThe following macros are available to decode paramTypes:\n#define TEE_PARAM_TYPES(t0,t1,t2,t3) \\\n((t0) | ((t1) << 4) | ((t2) << 8) | ((t3) << 12))\n#define TEE_PARAM_TYPE_GET(t, i) (((t) >> ((i)*4)) & 0xF)\nThe macro TEE_PARAM_TYPES can be used to construct a value that you can compare against an incoming\nparamTypes to check the type of all the parameters in one comparison, as in the following example:\nif (paramTypes !=\nTEE_PARAM_TYPES(\nTEE_PARAM_TYPE_MEMREF_INPUT,\nTEE_PARAM_TYPE_MEMREF_OUTPUT,\nTEE_PARAM_TYPE_NONE,\nTEE_PARAM_TYPE_NONE))\n{\n/* Bad parameter types */\nreturn TEE_ERROR_BAD_PARAMETERS;\n}\nThe macro TEE_PARAM_TYPE_GET can be used to extract the type of a given parameter from paramTypes\nif you need more fine-grained type checking.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 67,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.3.6 Operation Parameters in the TA Interface",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_PARAM_TYPES,TEE_PARAM_TYPE_GET",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "68 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.3.6.2 Initial Content of params Argument\nWhen the Framework calls the Trusted Application entry point, it initializes the content of params[i] as\ndescribed in the following table.\nTable 4-8: Content of params[i] when Trusted Application Entry Point Is Called\nValue of type[i] Content of params[i] when the Entry Point is Called\nTEE_PARAM_TYPE_NONE Filled with zeroes.\nTEE_PARAM_TYPE_VALUE_OUTPUT\nTEE_PARAM_TYPE_VALUE_INPUT params[i].value.a and params[i].value.b contain\nTEE_PARAM_TYPE_VALUE_INOUT the two integers sent by the client\nTEE_PARAM_TYPE_MEMREF_INPUT params[i].memref.buffer is a pointer to memory buffer\nTEE_PARAM_TYPE_MEMREF_OUTPUT shared by the client. This can be NULL.\nTEE_PARAM_TYPE_MEMREF_INOUT params[i].memref.size describes the size of the buffer.\nIf buffer is NULL, size is guaranteed to be zero.\nNote that if the Client is a Client Application that uses the TEE Client API ([Client API]), the Trusted Application\ncannot distinguish between a registered and a temporary Memory Reference. Both are encoded as one of the\nTEE_PARAM_TYPE_MEMREF_XXX types and a pointer to the data is passed to the Trusted Application.\nSecurity Warning: For a Memory Reference Parameter, the buffer may concurrently exist within the client\nand Trusted Application instance memory spaces. It SHALL therefore be assumed that the client is able to\nmake changes to the content of this buffer asynchronously at any moment. It is a security risk to assume\notherwise.\nAny Trusted Application which implements functionality that needs some guarantee that the contents of a\nbuffer are constant SHOULD copy the contents of a shared buffer into Trusted Application instance-owned\nmemory.\nTo determine whether a given buffer is a Memory Reference or a buffer owned by the Trusted Application\nitself, the function TEE_CheckMemoryAccessRights defined in section 4.11.1 can be used.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 68,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.3.6.2 Initial Content of params Argument",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 69 / 375\n4.3.6.3 Behavior of the Framework when the Trusted Application Returns\nWhen the Trusted Application entry point returns, the Framework reads the content of each params[i] to\ndetermine what response data to send to the client, as described in the following table.\nTable 4-9: Interpretation of params[i] when Trusted Application Entry Point Returns\nValue of type[i] Behavior of the Framework when Entry Point Returns\nTEE_PARAM_TYPE_NONE The content of params[i] is ignored.\nTEE_PARAM_TYPE_VALUE_INPUT\nTEE_PARAM_TYPE_MEMREF_INPUT\nTEE_PARAM_TYPE_VALUE_OUTPUT params[i].value.a and params[i].value.b contain the\nTEE_PARAM_TYPE_VALUE_INOUT two integers sent to the client.\nTEE_PARAM_TYPE_MEMREF_OUTPUT The Framework reads params[i].memref.size:\nTEE_PARAM_TYPE_MEMREF_INOUT • If it is equal or less than the original value of size, it is\nconsidered as the actual size of the memory buffer. In this\ncase, the Framework assumes that the Trusted Application\nhas not written beyond this actual size and only this actual\nsize will be synchronized with the client.\n• If it is greater than the original value of size, it is considered\nas a request for a larger buffer. In this case, the Framework\nassumes that the Trusted Application has not written\nanything in the buffer and no data will be synchronized.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 69,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.3.6.3 Behavior of the Framework when the Trusted Application Returns",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "70 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.3.6.4 Memory Reference and Memory Synchronization\nNote that if a parameter is a Memory Reference, the memory buffer may be released or unmapped immediately\nafter the operation completes. Also, some implementations may explicitly synchronize the contents of the\nmemory buffer before the operation starts and after the operation completes.\nAs a consequence:\n• The Trusted Application SHALL NOT access the memory buffer after the operation completes. In\nparticular, it cannot be used as a long-term communication means between the client and the Trusted\nApplication instance. A Memory Reference SHALL be accessed only during the lifetime of the\noperation.\n• The Trusted Application SHALL NOT attempt to write into a memory buffer of type\nTEE_PARAM_TYPE_MEMREF_INPUT.\nIt is a programmer error to attempt to do this but the implementation is not required to detect this\no\nand the access may well be just ignored.\n• For a Memory Reference Parameter marked as OUTPUT or INOUT, the Trusted Application can write\nin the entire range described by the initial content of params[i].memref.size. However, the\nimplementation SHALL only guarantee that the client will observe the modifications below the final\nvalue of size and only if the final value is equal or less than the original value.\nFor example, assume the original value of size is 100:\nIf the Trusted Application does not modify the value of size, the complete buffer is synchronized\no\nand the client is guaranteed to observe all the changes.\nIf the Trusted Application writes 50 in size, then the client is only guaranteed to observe the\no\nchanges within the range from index 0 to index 49.\nIf the Trusted Application writes 200 in size, then no data is guaranteed to be synchronized with\no\nthe client. However, the client will receive the new value of size. The Trusted Application can\ntypically use this feature to tell the client that the Memory Reference was too small and request\nthat the client retry with a Memory Reference of at least 200 bytes.\nFailure to comply with these constraints will result in undefined behavior and is a programmer error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 70,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.3.6.4 Memory Reference and Memory Synchronization",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 71 / 375\n4.4 Property Access Functions\nThis section defines a set of functions to access individual properties in a property set, to convert them into a\nvariety of types (printable strings, integers, Booleans, binary blocks, etc.), and to enumerate the properties in\na property set. These functions can be used to access TA Configuration Properties, Client Properties, and\nImplementation Properties.\nThe property set is passed to each function in a pseudo-handle parameter. The following table lists the defined\nproperty sets.\nTable 4-10: Property Sets\nPseudo-Handle Meaning\nTEE_PROPSET_CURRENT_TA The configuration properties for the current Trusted\nApplication. See section 4.5 for a definition of these\nproperties.\nTEE_PROPSET_CURRENT_CLIENT The properties of the current client. This pseudo-handle is\nvalid only in the context of the following entry points:\nTA_OpenSessionEntryPoint\no\nTA_InvokeCommandEntryPoint\no\nTA_CloseSessionEntryPoint\no\nSee section 4.6 for a definition of these properties.\nTEE_PROPSET_TEE_IMPLEMENTATION The properties of the TEE implementation. See\nsection 4.7.\nProperties can be retrieved and converted using TEE_GetPropertyAsXXX access functions (described in\nthe following sections).\nA property may be retrieved and converted into a printable string or into the type defined for the property which\nwill be one of the following types:\n• Binary block\n• 32-bit unsigned integer\n• 64-bit unsigned integer\n• Boolean\n• UUID\n• Identity (a pair composed of a login method and a UUID)\nRetrieving as a String\nWhile implementations have latitude on how they set and store properties internally, a property that is retrieved\nvia the function TEE_GetPropertyAsString SHALL always be converted into a printable string encoded in\nUTF-8.\nTo ensure consistency between the representation of a property as one of the above types and its\nrepresentation as a printable string encoded in UTF-8, the following conversion rules apply:\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 71,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.4 Property Access Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "72 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n• Binary block\nis converted into a string that is consistent with a Base64 encoding of the binary block as defined in\nRFC 2045 ([RFC 2045]) section 6.8 but with the following tolerance:\nAn implementation is allowed not to encode the final padding ‘=’ characters.\no\nAn implementation is allowed to insert characters that are not in the Base64 character set.\no\n• 32-bit and 64-bit unsigned integers\nare converted into strings that are consistent with the following syntax:\ninteger: decimal-integer\n| hexadecimal-integer\n| binary-integer\ndecimal-integer: [0-9,_]+{K,M}?\nhexadecimal-integer: 0[x,X][0-9,a-f,A-F,_]+\nbinary-integer: 0[b,B][0,1,_]+\nNote that the syntax allows returning the integer either in decimal, hexadecimal, or binary format, that\nthe representation can mix cases and can include underscores to separate groups of digits, and finally\nthat the decimal representation may use ‘K’ or ‘M’ to denote multiplication by 1024 or 1048576\nrespectively.\nFor example, here are a few acceptable representations of the number 1024: “1K”, “0X400”,\n“0b100_0000_0000”.\n• Boolean\nis converted into a string equal to “true” or “false” case-insensitive, depending on the value of the\nBoolean.\n• UUID\nis converted into a string that is consistent with the syntax defined in [RFC 4122]. Note that this string\nmay mix character cases.\n• Identity\nis converted into a string consistent with the following syntax:\nidentity: integer (':' uuid)?\nwhere:\n The integer is consistent with the integer syntax described above\n If the identity UUID is Nil, then it can be omitted from the string representation of the property\nEnumerating Properties\nProperties in a property set can also be enumerated. For this:\n• Allocate a property enumerator using the function TEE_AllocatePropertyEnumerator.\n• Start the enumeration by calling TEE_StartPropertyEnumerator, passing the pseudo-handle on\nthe desired property set.\n• Call the functions TEE_GetProperty[AsXXX] with the enumerator handle and a NULL name.\nAn enumerator provides the properties in an arbitrary order. In particular, they are not required to be sorted by\nname although a given implementation may ensure this.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 72,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 72",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 73 / 375\n4.4.1 TEE_GetPropertyAsString\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_GetPropertyAsString(\nTEE_PropSetHandle propsetOrEnumerator,\n[instringopt] char* name,\n[outstring] char* valueBuffer, size_t* valueBufferLen );\nDescription\nThe TEE_GetPropertyAsString function performs a lookup in a property set to retrieve an individual\nproperty and convert its value into a printable string.\nWhen the lookup succeeds, the implementation SHALL convert the property into a printable string and copy\nthe result into the buffer described by valueBuffer and valueBufferLen.\nParameters\n• propsetOrEnumerator: One of the TEE_PROPSET_XXX pseudo-handles or a handle on a property\nenumerator\n• name: A pointer to the zero-terminated string containing the name of the property to retrieve. Its\ncontent is case-sensitive and it SHALL be encoded in UTF-8.\nIf propsetOrEnumerator is a property enumerator handle, name is ignored and can be NULL.\no\nOtherwise, name SHALL NOT be NULL\no\n• valueBuffer, valueBufferLen: Output buffer for the property value\nSpecification Number: 10 Function Number: 0x207\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the property is not found or if name is not a valid UTF-8 encoding\n• TEE_ERROR_SHORT_BUFFER: If the value buffer is not large enough to hold the whole property value\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for valueBufferLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 73,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.4.1 TEE_GetPropertyAsString",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetPropertyAsString",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "74 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.4.2 TEE_GetPropertyAsBool\nSince: TEE Internal API v1.0\nTEE_Result TEE_GetPropertyAsBool(\nTEE_PropSetHandle propsetOrEnumerator,\n[instringopt] char* name,\n[out] bool* value );\nDescription\nThe TEE_GetPropertyAsBool function retrieves a single property in a property set and converts its value\nto a Boolean.\nIf a property cannot be viewed as a Boolean, this function SHALL return TEE_ERROR_BAD_FORMAT.\nParameters\n• propsetOrEnumerator: One of the TEE_PROPSET_XXX pseudo-handles or a handle on a property\nenumerator\n• name: A pointer to the zero-terminated string containing the name of the property to retrieve. Its\ncontent is case-sensitive and SHALL be encoded in UTF-8.\nIf propsetOrEnumerator is a property enumerator handle, name is ignored and can be NULL.\no\nOtherwise, name SHALL NOT be NULL.\no\n• value: A pointer to the variable that will contain the value of the property on success or false on\nerror.\nSpecification Number: 10 Function Number: 0x205\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the property is not found or if name is not a valid UTF-8 encoding\n• TEE_ERROR_BAD_FORMAT: If the property value is not defined as a Boolean\nPanic Reasons\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 74,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.4.2 TEE_GetPropertyAsBool",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetPropertyAsBool",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 75 / 375\n4.4.3 TEE_GetPropertyAsUnn\n4.4.3.1 TEE_GetPropertyAsU32\nSince: TEE Internal API v1.0\nTEE_Result TEE_GetPropertyAsU32(\nTEE_PropSetHandle propsetOrEnumerator,\n[instringopt] char* name,\n[out] uint32_t* value );\nDescription\nThe TEE_GetPropertyAsU32 function retrieves a single property in a property set and converts its value to\na 32-bit unsigned integer.\nParameters\n• propsetOrEnumerator: One of the TEE_PROPSET_XXX pseudo-handles or a handle on a property\nenumerator\n• name: A pointer to the zero-terminated string containing the name of the property to retrieve. Its\ncontent is case-sensitive and SHALL be encoded in UTF-8.\nIf propsetOrEnumerator is a property enumerator handle, name is ignored and can be NULL.\no\nOtherwise, name SHALL NOT be NULL.\no\n• value: A pointer to the variable that will contain the value of the property on success, or zero on\nerror.\nSpecification Number: 10 Function Number: 0x208\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the property is not found or if name is not a valid UTF-8 encoding\n• TEE_ERROR_BAD_FORMAT: If the property value is not defined as an unsigned 32-bit integer\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 75,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.4.3 TEE_GetPropertyAsUnn",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetPropertyAsU32",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "76 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.4.3.2 TEE_GetPropertyAsU64\nSince: TEE Internal Core API v1.2\nTEE_Result TEE_GetPropertyAsU64(\nTEE_PropSetHandle propsetOrEnumerator,\n[instringopt] char* name,\n[out] uint64_t* value );\nDescription\nThe TEE_GetPropertyAsU64 function retrieves a single property in a property set and converts its value to\na 64-bit unsigned integer. If the underlying value is a 32-bit integer, the Trusted OS SHALL zero extend it.\nParameters\n• propsetOrEnumerator: One of the TEE_PROPSET_XXX pseudo-handles or a handle on a property\nenumerator\n• name: A pointer to the zero-terminated string containing the name of the property to retrieve. Its\ncontent is case-sensitive and SHALL be encoded in UTF-8.\nIf propsetOrEnumerator is a property enumerator handle, name is ignored and can be NULL.\no\nOtherwise, name SHALL NOT be NULL.\no\n• value: A pointer to the variable that will contain the value of the property on success, or zero on\nerror.\nSpecification Number: 10 Function Number: 0x20D\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the property is not found or if name is not a valid UTF-8 encoding\n• TEE_ERROR_BAD_FORMAT: If the property value is not defined as an unsigned 64-bit integer\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 76,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.4.3.2 TEE_GetPropertyAsU64",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetPropertyAsU64",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 77 / 375\n4.4.4 TEE_GetPropertyAsBinaryBlock\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_GetPropertyAsBinaryBlock(\nTEE_PropSetHandle propsetOrEnumerator,\n[instringopt] char* name,\n[outbuf] void* valueBuffer, size_t* valueBufferLen );\nDescription\nThe function TEE_GetPropertyAsBinaryBlock retrieves an individual property and converts its value into\na binary block.\nIf a property cannot be viewed as a binary block, this function SHALL return TEE_ERROR_BAD_FORMAT.\nParameters\n• propsetOrEnumerator: One of the TEE_PROPSET_XXX pseudo-handles or a handle on a property\nenumerator\n• name: A pointer to the zero-terminated string containing the name of the property to retrieve. Its\ncontent is case-sensitive and SHALL be encoded in UTF-8.\nIf propsetOrEnumerator is a property enumerator handle, name is ignored and can be NULL.\no\nOtherwise, name SHALL NOT be NULL.\no\n• valueBuffer, valueBufferLen: Output buffer for the binary block\nSpecification Number: 10 Function Number: 0x204\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the property is not found or if name is not a valid UTF-8 encoding\n• TEE_ERROR_BAD_FORMAT: If the property cannot be retrieved as a binary block\n• TEE_ERROR_SHORT_BUFFER: If the value buffer is not large enough to hold the whole property value\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for valueBufferLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 77,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.4.4 TEE_GetPropertyAsBinaryBlock",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetPropertyAsBinaryBlock",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "78 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.4.5 TEE_GetPropertyAsUUID\nSince: TEE Internal API v1.0\nTEE_Result TEE_GetPropertyAsUUID(\nTEE_PropSetHandle propsetOrEnumerator,\n[instringopt] char* name,\n[out] TEE_UUID* value );\nDescription\nThe function TEE_GetPropertyAsUUID retrieves an individual property and converts its value into a UUID.\nIf a property cannot be viewed as a UUID, this function SHALL return TEE_ERROR_BAD_FORMAT.\nParameters\n• propsetOrEnumerator: One of the TEE_PROPSET_XXX pseudo-handles or a handle on a property\nenumerator\n• name: A pointer to the zero-terminated string containing the name of the property to retrieve. Its\ncontent is case-sensitive and SHALL be encoded in UTF-8.\nIf propsetOrEnumerator is a property enumerator handle, name is ignored and can be NULL.\no\nOtherwise, name SHALL NOT be NULL.\no\n• value: A pointer filled with the UUID. SHALL NOT be NULL.\nSpecification Number: 10 Function Number: 0x209\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the property is not found or if name is not a valid UTF-8 encoding\n• TEE_ERROR_BAD_FORMAT: If the property cannot be converted into a UUID\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 78,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.4.5 TEE_GetPropertyAsUUID",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetPropertyAsUUID",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 79 / 375\n4.4.6 TEE_GetPropertyAsIdentity\nSince: TEE Internal API v1.0\nTEE_Result TEE_GetPropertyAsIdentity(\nTEE_PropSetHandle propsetOrEnumerator,\n[instringopt] char* name,\n[out] TEE_Identity* value );\nDescription\nThe function TEE_GetPropertyAsIdentity retrieves an individual property and converts its value into a\nTEE_Identity.\nIf a property cannot be viewed as an identity, this function SHALL return TEE_ERROR_BAD_FORMAT.\nParameters\n• propsetOrEnumerator: One of the TEE_PROPSET_XXX pseudo-handles or a handle on a property\nenumerator\n• name: A pointer to the zero-terminated string containing the name of the property to retrieve. Its\ncontent is case-sensitive and SHALL be encoded in UTF-8.\nIf propsetOrEnumerator is a property enumerator handle, name is ignored and can be NULL.\no\nOtherwise, name SHALL NOT be NULL.\no\n• value: A pointer filled with the identity. SHALL NOT be NULL.\nSpecification Number: 10 Function Number: 0x206\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the property is not found or if name is not a valid UTF-8 encoding\n• TEE_ERROR_BAD_FORMAT: If the property value cannot be converted into an Identity\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 79,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.4.6 TEE_GetPropertyAsIdentity",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetPropertyAsIdentity",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "80 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.4.7 TEE_AllocatePropertyEnumerator\nSince: TEE Internal API v1.0\nTEE_Result TEE_AllocatePropertyEnumerator(\n[out] TEE_PropSetHandle* enumerator );\nDescription\nThe function TEE_AllocatePropertyEnumerator allocates a property enumerator object. Once a handle\non a property enumerator has been allocated, it can be used to enumerate properties in a property set using\nthe function TEE_StartPropertyEnumerator.\nParameters\n• enumerator: A pointer filled with an opaque handle on the property enumerator on success and with\nTEE_HANDLE_NULL on error\nSpecification Number: 10 Function Number: 0x201\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_OUT_OF_MEMORY: If there are not enough resources to allocate the property enumerator\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\n4.4.8 TEE_FreePropertyEnumerator\nSince: TEE Internal API v1.0\nvoid TEE_FreePropertyEnumerator(\nTEE_PropSetHandle enumerator );\nDescription\nThe function TEE_FreePropertyEnumerator deallocates a property enumerator object.\nParameters\n• enumerator: A handle on the enumerator to free\nSpecification Number: 10 Function Number: 0x202\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 80,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.4.7 TEE_AllocatePropertyEnumerator",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AllocatePropertyEnumerator,TEE_FreePropertyEnumerator",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 81 / 375\n4.4.9 TEE_StartPropertyEnumerator\nSince: TEE Internal API v1.0\nvoid TEE_StartPropertyEnumerator(\nTEE_PropSetHandle enumerator,\nTEE_PropSetHandle propSet );\nDescription\nThe function TEE_StartPropertyEnumerator starts to enumerate the properties in an enumerator.\nOnce an enumerator is attached to a property set:\n• Properties can be retrieved using one of the TEE_GetPropertyAsXXX functions, passing the\nenumerator handle as the property set and NULL as the name.\n• The function TEE_GetPropertyName can be used to retrieve the name of the current property in the\nenumerator.\n• The function TEE_GetNextProperty can be used to advance the enumeration to the next property\nin the property set.\nParameters\n• enumerator: A handle on the enumerator\n• propSet: A pseudo-handle on the property set to enumerate. SHALL be one of the\nTEE_PROPSET_XXX pseudo-handles.\nSpecification Number: 10 Function Number: 0x20C\nPanic Reasons\n• If the implementation detects any error.\n4.4.10 TEE_ResetPropertyEnumerator\nSince: TEE Internal API v1.0\nvoid TEE_ResetPropertyEnumerator(\nTEE_PropSetHandle enumerator );\nDescription\nThe function TEE_ResetPropertyEnumerator resets a property enumerator to its state immediately after\nallocation. If an enumeration is currently started, it is abandoned.\nParameters\n• enumerator: A handle on the enumerator to reset\nSpecification Number: 10 Function Number: 0x20B\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 81,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.4.9 TEE_StartPropertyEnumerator",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_ResetPropertyEnumerator,TEE_StartPropertyEnumerator",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "82 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.4.11 TEE_GetPropertyName\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_GetPropertyName(\nTEE_PropSetHandle enumerator,\n[outstring] void* nameBuffer, size_t* nameBufferLen );\nDescription\nThe function TEE_GetPropertyName gets the name of the current property in an enumerator.\nThe property name SHALL be the valid UTF-8 encoding of a Unicode string containing no intermediate U+0000\ncode points.\nParameters\n• enumerator: A handle on the enumerator\n• nameBuffer, nameBufferLen: The buffer filled with the name\nSpecification Number: 10 Function Number: 0x20A\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If there is no current property either because the enumerator has not\nstarted or because it has reached the end of the property set\n• TEE_ERROR_SHORT_BUFFER: If the name buffer is not large enough to contain the property name\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for nameBufferLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 82,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.4.11 TEE_GetPropertyName",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetPropertyName",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 83 / 375\n4.4.12 TEE_GetNextProperty\nSince: TEE Internal API v1.0\nTEE_Result TEE_GetNextProperty(\nTEE_PropSetHandle enumerator);\nDescription\nThe function TEE_GetNextProperty advances the enumerator to the next property.\nParameters\n• enumerator: A handle on the enumerator\nSpecification Number: 10 Function Number: 0x203\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the enumerator has reached the end of the property set or if it has\nnot started\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 83,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.4.12 TEE_GetNextProperty",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetNextProperty",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "84 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.5 Trusted Application Configuration Properties\nEach Trusted Application is associated with configuration properties that are accessible using the generic\nProperty Access Functions and the TEE_PROPSET_CURRENT_TA pseudo-handle. This section defines a few\nstandard configuration properties that affect the behavior of the implementation. Other configuration properties\ncan be defined:\n• either by the implementation to configure implementation-defined behaviors,\n• or by the Trusted Application itself for its own configuration purposes.\nThe way properties are actually configured and attached to a Trusted Application is out of scope of this\nspecification.\nThe following table defines the standard configuration properties for Trusted Applications.\nTable 4-11: Trusted Application Standard Configuration Properties\nProperty Name Type Meaning\ngpd.ta.appID UUID Since: TEE Internal API v1.0\nThe identifier of the Trusted Application.\ngpd.ta.singleInstance Boolean Since: TEE Internal API v1.0\nWhether the implementation SHALL create a single TA\ninstance for all the client sessions (if true) or SHALL\ncreate a separate instance for each client session\n(if false).\ngpd.ta.multiSession Boolean Since: TEE Internal API v1.0\nWhether the Trusted Application instance supports\nmultiple sessions.\nThis property is ignored when gpd.ta.singleinstance\nis set to false.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 84,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.5 Trusted Application Configuration Properties",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 85 / 375\nProperty Name Type Meaning\ngpd.ta.instanceKeepAlive Boolean Since: TEE Internal API v1.0\nWhether the Trusted Application instance context SHALL\nbe preserved when there are no sessions connected to the\ninstance. The instance context is defined as all writable\ndata within the memory space of the Trusted Application\ninstance, including the instance heap.\nThis property is meaningful only when the\ngpd.ta.singleInstance is set to true.\nWhen this property is set to false, then the TA instance\nSHALL be created when one or more sessions are opened\non the TA and it SHALL be destroyed when there are no\nmore sessions opened on the instance.\nWhen this property is set to true, then the TA instance is\nterminated only when the TEE shuts down, which includes\nwhen the device goes through a system-wide global power\ncycle. Note that the TEE SHALL NOT shut down\nwhenever the REE does not shut down and keeps a\nrestorable state, including when it goes through transitions\ninto lower power states (hibernation, suspend, etc.).\nThe exact moment when a keep-alive single instance is\ncreated is implementation-defined but it SHALL be no later\nthan the first session opening.\ngpd.ta.dataSize Integer Since: TEE Internal API v1.0\nMaximum estimated amount of dynamic data in bytes\nconfigured for the Trusted Application. The memory blocks\nallocated through TEE_Malloc are drawn from this\nspace, as well as the task stacks. How this value precisely\nrelates to the exact number and sizes of blocks that can\nbe allocated is implementation dependent.\ngpd.ta.stackSize Integer Since: TEE Internal API v1.0\nMaximum stack size in bytes available to any task in the\nTrusted Application at any point in time. This corresponds\nto the stack size used by the TA code itself and does not\ninclude stack space possibly used by the Trusted Core\nFramework. For example, if this property is set to “512”,\nthen the Framework SHALL guarantee that, at any time,\nthe TA code can consume up to 512 bytes of stack and\nstill be able to call any functions in the API.\ngpd.ta.version String Since: TEE Internal Core API v1.1\nVersion number of this Trusted Application.\ngpd.ta.description String Since: TEE Internal Core API v1.1\nOptional description of the Trusted Application\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 85,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 85",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "86 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nProperty Name Type Meaning\ngpd.ta.endian Integer Since: TEE Internal Core API v1.2\nEndianness of the current TA. Legal values are:\n• The value 0 indicates little-endian TA.\n• The value 1 indicates a big-endian TA.\n• Values from 2 to 0x7FFFFFFF are reserved for\nfuture versions of this specification.\n• Values in the range 0x80000000 to 0xFFFFFFFF\nare implementation defined.\ngpd.ta.doesNotClose Boolean Since: TEE Internal Core API v1.3\nHandleOnCorruptObject\n• If set to false, then all APIs returning\nTEE_ERROR_CORRUPT_OBJECT or\nTEE_ERROR_CORRUPT_OBJECT_2 will behave as\nspecified in versions prior to TEE Internal Core API\nv1.3.\n• If set to true, then:\nWhen a function returns\no\nTEE_ERROR_CORRUPT_OBJECT or\nTEE_ERROR_CORRUPT_OBJECT_2, the stated\nclosure of the object handle SHALL NOT occur and\nthe handle SHALL need to be closed using the\nnormal methods.\nWhile the handle remains valid until closed, the\no\nunderlying object SHALL immediately be deleted.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 86,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 86",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 87 / 375\n4.6 Client Properties\nThis section defines the standard Client Properties, accessible using the generic Property Access Functions\nand the TEE_PROPSET_CURRENT_CLIENT pseudo-handle. Other non-standard client properties can be\ndefined by specific implementations, but they SHALL be defined outside the “gpd.” namespace.\nNote that Client Properties can be accessed only in the context of a TA entry point associated with a client,\ni.e. in one of the following entry point functions: TA_OpenSessionEntryPoint,\nTA_InvokeCommandEntryPoint, or TA_CloseSessionEntryPoint.\nThe following table defines the standard Client Properties.\nTable 4-12: Standard Client Properties\nProperty Name Type Meaning\ngpd.client.identity Identity Since: TEE Internal API v1.0\nIdentity of the current client. This can be conveniently retrieved\nusing the function TEE_GetPropertyAsIdentity (see\nsection 4.4.6).\nA Trusted Application can use the client identity to perform\naccess control. For example, it can refuse to open a session for\na client that is not identified.\ngpd.client.endian Integer Since: TEE Internal Core API v1.2\nEndianness of the current client. Legal values are as defined for\ngpd.ta.endian in Table 4-11.\nAs shown in Table 4-13, the client identity and the client properties that the Trusted Application can retrieve\ndepend on the nature of the client and the method it has used to connect. (The constant values associated\nwith the login methods are listed in section 4.2.2.)\nTable 4-13: Client Identities\nLogin Method Meaning\nTEE_LOGIN_PUBLIC The client is in the Regular Execution Environment and is\nneither identified nor authenticated. The client has no identity\nand the UUID is the Nil UUID as defined in [RFC 4122].\nTEE_LOGIN_USER The Client Application has been identified by the Regular\nExecution Environment and the client UUID reflects the\nactual user that runs the calling application independently of\nthe actual application.\nTEE_LOGIN_GROUP The client UUID reflects a group identity that is executing the\ncalling application. The notion of group identity and the\ncorresponding UUID is REE-specific.\nTEE_LOGIN_APPLICATION The Client Application has been identified by the Regular\nExecution Environment independently of the identity of the\nuser executing the application. The nature of this\nidentification and the corresponding UUID is REE-specific.\nTEE_LOGIN_APPLICATION_USER The client UUID identifies both the calling application and the\nuser that is executing it.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 87,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.6 Client Properties",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetPropertyAsIdentity",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "88 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nLogin Method Meaning\nTEE_LOGIN_APPLICATION_GROUP The client UUID identifies both the calling application and a\ngroup that is executing it.\nTEE_LOGIN_TRUSTED_APP The client is another Trusted Application. The client identity\nassigned to this session is the UUID of the calling Trusted\nApplication.\nThe client properties are all the configuration properties of the\ncalling Trusted Application.\nThe range 0x80000000–0xEFFFFFFF is The meaning of the Client UUID and the associated client\nreserved for implementation-defined login properties are implementation-defined. If the Trusted\nmethods. Application does not support the particular implementation, it\nSHOULD assume that the client has minimum rights, i.e.\nrights equivalent to the login method TEE_LOGIN_PUBLIC.\nOther values are reserved for\nGlobalPlatform use, as described in\nsection 4.2.2.\nClient Properties are meant to be managed by either the Regular OS or the Trusted OS and these SHALL\nensure that a Client cannot tamper with its own properties in the following sense:\n• The property gpd.client.identity SHALL always be determined by the Trusted OS and the\ndetermination of whether or not it is equal to TEE_LOGIN_TRUSTED_APP SHALL be as trustworthy as\nthe Trusted OS itself.\n• When gpd.client.identity is equal to TEE_LOGIN_TRUSTED_APP then the Trusted OS SHALL\nensure that the remaining properties are equal to the properties of the calling TA up to the same level\nof trustworthiness that the target TA places in the Trusted OS.\n• When gpd.client.identity is not equal to TEE_LOGIN_TRUSTED_APP, then the Regular OS is\nresponsible for ensuring that the Client Application cannot tamper with its own properties.\nNote that if a Client wants to transmit a property that is not synthesized by the Regular OS or Trusted OS,\nsuch as a password, then it SHALL use a parameter to the session open operation or in subsequent\ncommands.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 88,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 88",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 89 / 375\n4.7 Implementation Properties\nThe implementation properties can be retrieved by the generic Property Access Functions with the\nTEE_PROPSET_TEE_IMPLEMENTATION pseudo-handle.\nThe following table defines the standard implementation properties.\nTable 4-14: Implementation Properties\nProperty Name Type Meaning\ngpd.tee.apiversion String Since: TEE Internal API v1.0; deprecated in TEE\nInternal Core API v1.1.2\nA string composed of the Major and Minor version of\nthe specification, e.g. “1.1”. Zero values must be\nrepresented (e.g. version 3.0 is “3.0”). This string\ndoes NOT include any other parts of the version\nnumber.\n(This property is deprecated in favor of\ngpd.tee.internalCore.version.)\ngpd.tee.internalCore.version Integer Since: TEE Internal Core API v1.1.2\nThe TEE Internal Core API Specification version\nnumber expressed as an integer. See section 4.7.1\nfor details of the structure of this integer field.\ngpd.tee.description String Since: TEE Internal API v1.0\nA description of the implementation. The content of\nthis property is implementation-dependent but\ntypically contains a version and build number of the\nimplementation as well as other configuration\ninformation.\nNote that implementations are free to define their\nown non-standard identification property names,\nprovided they are not in the “gpd.” namespace.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 89,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.7 Implementation Properties",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "90 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nProperty Name Type Meaning\ngpd.tee.deviceID UUID Since: TEE Internal API v1.0\nA device identifier that SHALL be globally unique\namong all GlobalPlatform TEEs whatever the\nmanufacturer, vendor, or integration.\nSince: TEE Internal Core API v1.1.1\nIf there are multiple GlobalPlatform TEEs on one\ndevice, each such TEE SHALL have a unique\ngpd.tee.deviceID.\nImplementer’s Note\nIt is acceptable to derive this device identifier from\nstatistically unique secret or public information, such\nas a Hardware Unique Key, die identifiers, etc.\nHowever, note that this property is intended to be\npublic and exposed to any software running on the\ndevice, not only to Trusted Applications. The\nderivation SHALL therefore be carefully designed so\nthat it does not compromise secret information.\ngpd.tee.systemTime. Integer Since: TEE Internal API v1.0\nprotectionLevel\nThe protection level provided by the system time\nimplementation. See the function\nTEE_GetSystemTime in section 7.2.1 for more\ndetails.\ngpd.tee.TAPersistentTime. Integer Since: TEE Internal API v1.0\nprotectionLevel\nThe protection level provided for the TA Persistent\nTime. See the function\nTEE_GetTAPersistentTime in section 7.2.3 for\nmore details.\ngpd.tee.arith.maxBigIntSize Integer Since: TEE Internal API v1.0\nMaximum size in bits of the big integers for all the\nfunctions in the TEE Arithmetical API specified in\nsection 8. Beyond this limit, some of the functions\nMAY panic due to insufficient pre-allocated resources\nor hardware limitations.\ngpd.tee.cryptography.ecc Boolean Since: TEE Internal Core API v1.1; deprecated in\nTEE Internal Core API v1.2\nIf set to true, then the Elliptic Curve Cryptographic\n(ECC) algorithms shown in Table 6-2 are supported.\n(This property is deprecated; however, see\nsection 6.10.3 regarding responding when this\nproperty is queried.)\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 90,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 90",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 91 / 375\nProperty Name Type Meaning\ngpd.tee.cryptography.nist Boolean Since: TEE Internal Core API v1.2\nIf set to true, then all of the cryptographic elements\ndefined in Table 6-14 with the Source column marked\nNIST are supported.\nIf it is set to false or is absent, it does not mean\nthat none of these cryptographic elements are\nsupported. See TEE_IsAlgorithmSupported in\nsection 6.2.9.\ngpd.tee.cryptography.bsi-r Boolean Since: TEE Internal Core API v1.2\nIf set to true, then all of the cryptographic elements\ndefined in Table 6-14 with the Source column marked\nBSI-R are supported.\nIf it is set to false or is absent, it does not mean\nthat none of these cryptographic elements are\nsupported. See TEE_IsAlgorithmSupported in\nsection 6.2.9.\ngpd.tee.cryptography.bsi-t Boolean Since: TEE Internal Core API v1.2\nIf set to true, then all of the cryptographic elements\ndefined in Table 6-14 with the Source column marked\nBSI-T are supported.\nIf it is set to false or is absent, it does not mean\nthat none of these cryptographic elements are\nsupported. See TEE_IsAlgorithmSupported in\nsection 6.2.9.\ngpd.tee.cryptography.ietf Boolean Since: TEE Internal Core API v1.2\nIf set to true, then all of the cryptographic elements\ndefined in Table 6-14 with the Source column marked\nIETF are supported.\nIf it is set to false or is absent, it does not mean\nthat none of these cryptographic elements are\nsupported. See TEE_IsAlgorithmSupported in\nsection 6.2.9.\ngpd.tee.cryptography.octa Boolean Since: TEE Internal Core API v1.2\nIf set to true, then the cryptographic elements\ndefined in Table 6-14 with the Source column marked\nOCTA are supported. In addition, all definitions\nrelated to SM3 and SM4 are also supported.\nIf it is set to false or is absent, it does not mean\nthat none of these cryptographic elements are\nsupported. See TEE_IsAlgorithmSupported in\nsection 6.2.9.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 91,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 91",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "92 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nProperty Name Type Meaning\ngpd.tee.trustedStorage. Integer Since: TEE Internal Core API v1.3\nprivate.rollbackProtection\nIndicates the level of rollback detection provided by\ngpd.tee.trustedStorage.perso. Trusted Storage supplied by the implementation:\nrollbackProtection\n100: Rollback detection mechanism for the Trusted\nStorage SHALL be enforced at the REE level.\n1000: Rollback detection mechanism for the\nTrusted Storage SHALL be based on\nTEE-controlled hardware. This hardware SHALL be\nout of reach of software attacks from the REE.\n10000: The Trusted Storage Space SHALL be\nimplemented on TEE-controlled hardware and\nSHALL be immune to rollback.\nAll other values: Reserved for future use\nExternal actors may be able to roll back the Trusted\nStorage in the case of protection levels 100 and 1000\nbut this SHALL be detected by the implementation\nwhere that SHALL enforcement capability is bound\nby the relevant Protection Profile ([TEE PP]).\nIf an active TA attempts to access material held in\nTrusted Storage that has been rolled back, it will\nreceive an error equivalent to a corrupted object.\ngpd.tee.trustedStorage. Integer Since: TEE Internal Core API v1.3\nprotected.rollbackProtection\nIndicates the level of protection from rollback of\nTrusted Storage supplied by the implementation:\n10000: The Trusted Storage Space SHALL be\nimplemented on TEE-controlled hardware and\nSHALL be immune to rollback.\nAll other values: Reserved for future use\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 92,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 92",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 93 / 375\nProperty Name Type Meaning\ngpd.tee.trustedStorage. Integer Since: TEE Internal Core API v1.2; deprecated in\nantiRollback.protectionLevel TEE Internal Core API v1.3 – See Backward\nCompatibility note below.\nIndicates the level of protection from rollback of\nTrusted Storage supplied by the implementation:\n100: Anti-rollback mechanism for the Trusted\nStorage SHALL be enforced at the REE level.\n1000: Anti-rollback mechanism for the Trusted\nStorage SHALL be based on TEE-controlled\nhardware. This hardware SHALL be out of reach of\nsoftware attacks from the REE.\nAll other values: Reserved.\nIf an active TA attempts to access material held in\nTrusted Storage that has been rolled back, it will\nreceive an error equivalent to a corrupted object.\nExternal actors may still be able to roll back the\nTrusted Storage but this SHALL be detected by the\nimplementation where that SHALL enforcement\ncapability is bound by the relevant Protection Profile\n([TEE PP]).\nBackward Compatibility\nVersions prior to TEE Internal Core API v1.2 allowed\nno anti-rollback protection to be reported. For any\nTrusted OS claiming compatibility to v1.2 or later of\nthis specification, reporting no anti-rollback protection\nis no longer allowed, and the Trusted OS SHALL\nimplement some form of anti-rollback protection.\nIf the Trusted Storage Space is implemented entirely\non hardware with a protection level greater than\n1000, then the implementation SHALL set this\nproperty value to 1000; otherwise the lowest\nprotection level SHALL be reported.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 93,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 93",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "94 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nProperty Name Type Meaning\ngpd.tee.trustedStorage. Integer Since: TEE Internal Core API v1.1; deprecated in\nrollbackDetection. TEE Internal Core API v1.3 – See Backward\nprotectionLevel\nCompatibility note below.\nIndicates the level of protection that a Trusted\nApplication can assume from the rollback detection\nmechanism of the Trusted Storage:\n100: Rollback detection mechanism for the Trusted\nStorage is enforced at the REE level.\n1000: Rollback detection mechanism for the\nTrusted Storage is based on TEE-controlled\nhardware. This hardware SHALL be out of reach of\nsoftware attacks from the REE. Users may still be\nable to roll back the Trusted Storage but this\nSHALL be detected by the implementation where\nthat SHALL enforcement capability is bound by the\nrelevant Protection Profile ([TEE PP]).\nAll other values: Reserved.\nBackward Compatibility\nIf the Trusted Storage Space is implemented on\nTEE-controlled hardware immune to rollback then the\nimplementation SHALL set this property value to\n1000.\ngpd.tee.trustedos. String Since: TEE Internal Core API v1.1\nimplementation.version\nThe detailed version number of the Trusted OS.\nThe value of this property SHALL change whenever\nanything changes in the code forming the Trusted OS\nwhich provides the TEE, i.e. any patch SHALL\nchange this string.\ngpd.tee.trustedos. Binary Since: TEE Internal Core API v1.1\nimplementation.binaryversion\nA binary value which is equivalent to\ngpd.tee.trustedos.implementation.version.\nMay be derived from some form of certificate\nindicating the software has been signed, a\nmeasurement of the image, a checksum, a direct\nbinary conversion of\ngpd.tee.trustedos.implementation.version,\nor any other binary value that the TEE manufacturer\nchooses to provide. The Trusted OS manufacturer’s\ndocumentation SHALL state the format of this value.\nThe value of this property SHALL change whenever\nanything changes in the code forming the Trusted OS\nwhich provides the TEE, i.e. any patch SHALL\nchange this binary.\ngpd.tee.trustedos. String Since: TEE Internal Core API v1.1\nmanufacturer\nName of the manufacturer of the Trusted OS.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 94,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 94",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 95 / 375\nProperty Name Type Meaning\ngpd.tee.firmware. String Since: TEE Internal Core API v1.1\nimplementation.version\nThe detailed version number of the firmware which\nsupports the Trusted OS implementation. This\nincludes all privileged software involved in the secure\nbooting and support of the TEE apart from the\nTrusted OS and Trusted Applications.\nThe value of this property SHALL change whenever\nanything changes in this code, i.e. any patch SHALL\nchange this string. The value of this property MAY be\nthe empty string if there is no such software.\ngpd.tee.firmware. Binary Since: TEE Internal Core API v1.1\nimplementation.binaryversion\nA binary value which is equivalent to\ngpd.tee.firmware.implementation.version.\nMay be derived from some form of certificate\nindicating the firmware has been signed, a\nmeasurement of the image, a checksum, a direct\nbinary conversion of\ngpd.tee.firmware.implementation.version,\nor any other binary value that the Trusted OS\nmanufacturer chooses to provide. The Trusted OS\nmanufacturer’s documentation SHALL state the\nformat of this value.\nThe value of this property SHALL change whenever\nanything changes in this code, i.e. any patch SHALL\nchange this binary. The value of this property MAY\nbe a zero-length value if there is no such firmware.\ngpd.tee.firmware.manufacturer String Since: TEE Internal Core API v1.1\nName of the manufacturer of the firmware which\nsupports the Trusted OS or the empty string if there\nis no such firmware.\ngpd.tee.event.maxSources Integer Since: TEE Internal Core API v1.2\nThe maximum number of secure event sources the\nimplementation can support.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 95,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 95",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "96 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.7.1 Specification Version Number Property\nThis specification defines a TEE property containing the version number of the specification that the\nimplementation conforms to. The property can be retrieved using the normal Property Access Functions. The\nproperty SHALL be named “gpd.tee.internalCore.version” and SHALL be of integer type with the\ninterpretation given below.\nThe specification version number property consists of four positions: major, minor, maintenance, and RFU.\nThese four bytes are combined into a 32-bit unsigned integer as follows:\n• The major version number of the specification is placed in the most significant byte.\n• The minor version number of the specification is placed in the second most significant byte.\n• The maintenance version number of the specification is placed in the second least significant byte.\nIf the version is not a maintenance version, this SHALL be zero.\n• The least significant byte is reserved for future use. Currently this byte SHALL be zero.\nTable 4-14b: Specification Version Number Property – 32-bit Integer Structure\nBits [24-31] (MSB) Bits [16-23] Bits [8-15] Bits [0-7] (LSB)\nMajor version number Minor version number Maintenance version Reserved for use by\nof the specification of the specification number of the GlobalPlatform.\nspecification Currently SHALL be zero.\nSo, for example:\n• Specification version 1.1 will be held as 0x01010000 (16842752 in base 10).\n• Specification version 1.2 will be held as 0x01020000 (16908288 in base 10).\n• Specification version 1.2.3 will be held as 0x01020300 (16909056 in base 10).\n• Specification version 12.13.14 will be held as 0x0C0D0E00 (202182144 in base 10).\n• Specification version 212.213.214 will be held as 0xD4D5D600 (3570783744 in base 10).\nThis places the following requirement on the version numbering:\n• No specification can have a Major or Minor or Maintenance version number greater than 255.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 96,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.7.1 Specification Version Number Property",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 97 / 375\n4.8 Panics\n4.8.1 TEE_Panic\nSince: TEE Internal API v1.0\nvoid TEE_Panic(TEE_Result panicCode);\nDescription\nThe TEE_Panic function raises a Panic in the Trusted Application instance.\nWhen a Trusted Application calls the TEE_Panic function, the current instance SHALL be destroyed and all\nthe resources opened by the instance SHALL be reclaimed. All sessions opened from the panicking instance\non another TA SHALL be gracefully closed and all cryptographic objects and operations SHALL be closed\nproperly.\nWhen an instance panics, its clients receive the return code TEE_ERROR_TARGET_DEAD of origin\nTEE_ORIGIN_TEE until they close their session. This applies to Regular Execution Environment clients calling\nthrough the TEE Client API (see [Client API]) and to Trusted Execution Environment clients calling through the\nInternal Client API (see section 4.9).\nWhen this routine is called, an implementation in a non-production environment, such as in a development or\npre-production state, SHALL display the supplied panicCode using the mechanisms defined in\n[TEE TA Debug] (or an implementation-specific alternative) to help the developer understand the programmer\nerror. Diagnostic information SHOULD NOT be exposed outside of a secure development environment.\nOnce an instance is panicked, no TA entry point is ever called again for this instance, not even\nTA_DestroyEntryPoint. The caller cannot expect that the TEE_Panic function will return.\nParameters\n• panicCode: An informative Panic code defined by the TA. May be displayed in traces if traces are\navailable.\nSpecification Number: 10 Function Number: 0x301\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 97,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.8 Panics",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Panic",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "98 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.9 Internal Client API\nThis API allows a Trusted Application to act as a client to another Trusted Application.\n4.9.1 TEE_OpenTASession\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nTEE_Result TEE_OpenTASession(\n[in] TEE_UUID* destination,\nuint32_t cancellationRequestTimeout,\nuint32_t paramTypes,\n[inout] TEE_Param params[4],\n[out] TEE_TASessionHandle* session,\n[out] uint32_t* returnOrigin);\nDescription\nThe function TEE_OpenTASession opens a new session with a Trusted Application.\nThe destination Trusted Application is identified by its UUID passed in destination. A set of four parameters\ncan be passed during the operation. See section 4.9.4 for a detailed specification of how these parameters\nare passed in the paramTypes and params arguments.\nThe result of this function is returned both in the return code and the return origin, stored in the variable pointed\nto by returnOrigin:\n• If the return origin is different from TEE_ORIGIN_TRUSTED_APP, then the function has failed before it\ncould reach the target Trusted Application. The possible return codes are listed in “Return Code”\nbelow.\n• If the return origin is TEE_ORIGIN_TRUSTED_APP, then the meaning of the return code depends on\nthe protocol exposed by the target Trusted Application. However, if TEE_SUCCESS is returned, it\nalways means that the session was successfully opened and if the function returns a code different\nfrom TEE_SUCCESS, it means that the session opening failed.\nWhen the session is successfully opened, i.e. when the function returns TEE_SUCCESS, a valid session handle\nis written into *session. Otherwise, the value TEE_HANDLE_NULL is written into *session.\nParameters\n• destination: A pointer to a TEE_UUID structure containing the UUID of the destination Trusted\nApplication\n• cancellationRequestTimeout: Timeout in milliseconds or the special value\nTEE_TIMEOUT_INFINITE if there is no timeout. After the timeout expires, the TEE SHALL act as\nthough a cancellation request for the operation had been sent.\n• paramTypes: The types of all parameters passed in the operation. See section 4.9.4 for more details.\n• params: The parameters passed in the operation. See section 4.9.4 for more details. These are\nupdated only if the returnOrigin is TEE_ORIGIN_TRUSTED_APP.\nThe params parameter is defined in the prototype as an array of length 4. Implementers should be\naware that the address of the start of the array is passed to the callee.\n• session: A pointer to a variable that will receive the client session handle. The pointer SHALL NOT\nbe NULL. The value is set to TEE_HANDLE_NULL upon error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 98,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.9 Internal Client API",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_OpenTASession",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 99 / 375\n• returnOrigin: A pointer to a variable which will contain the return origin. This field may be NULL if\nthe return origin is not needed.\nSpecification Number: 10 Function Number: 0x403\nReturn Code\n• TEE_SUCCESS: In case of success; the session was successfully opened.\n• Any other value: The opening failed.\nIf the return origin is TEE_ORIGIN_TRUSTED_APP, the return code is defined by the protocol exposed\nby the destination Trusted Application.\nIf the return origin is other than TEE_ORIGIN_TRUSTED_APP, one of the following return codes can be\nreturned:\nTEE_ERROR_OUT_OF_MEMORY: If not enough resources are available to open the session\no\nTEE_ERROR_ITEM_NOT_FOUND: If no Trusted Application matches the requested destination UUID\no\nTEE_ERROR_ACCESS_DENIED: If access to the destination Trusted Application is denied\no\nTEE_ERROR_BUSY: If the destination Trusted Application does not allow more than one session at\no\na time and already has a session in progress\nTEE_ERROR_TARGET_DEAD: If the destination Trusted Application has panicked during the\no\noperation\nTEE_ERROR_CANCEL: If the request is cancelled by anything other than the destination Trusted\no\nApplication\nPanic Reasons\n• If the implementation detects any error that cannot be represented by any defined or implementation\ndefined error code.\n• If memory which was allocated with TEE_MALLOC_NO_SHARE is referenced by one of the parameters.\nBackward Compatibility\nThe error code TEE_CANCEL was added in TEE Internal Core API v1.2.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 99,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 99",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "100 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.9.2 TEE_CloseTASession\nSince: TEE Internal API v1.0\nvoid TEE_CloseTASession(TEE_TASessionHandle session);\nDescription\nThe function TEE_CloseTASession closes a client session.\nParameters\n• session: An opened session handle\nSpecification Number: 10 Function Number: 0x401\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 100,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.9.2 TEE_CloseTASession",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CloseTASession",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 101 / 375\n4.9.3 TEE_InvokeTACommand\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nTEE_Result TEE_InvokeTACommand(\nTEE_TASessionHandle session,\nuint32_t cancellationRequestTimeout,\nuint32_t commandID,\nuint32_t paramTypes,\n[inout] TEE_Param params[4],\n[out] uint32_t* returnOrigin);\nDescription\nThe function TEE_InvokeTACommand invokes a command within a session opened between the client\nTrusted Application instance and a destination Trusted Application instance.\nThe parameter session SHALL reference a valid session handle opened by TEE_OpenTASession.\nUp to four parameters can be passed during the operation. See section 4.9.4 for a detailed specification of\nhow these parameters are passed in the paramTypes and params arguments.\nThe result of this function is returned both in the return code and the return origin, stored in the variable pointed\nto by returnOrigin:\n• If the return origin is different from TEE_ORIGIN_TRUSTED_APP, then the function has failed before it\ncould reach the destination Trusted Application. The possible return codes are listed in “Return Code”\nbelow.\n• If the return origin is TEE_ORIGIN_TRUSTED_APP, then the meaning of the return code is determined\nby the protocol exposed by the destination Trusted Application. It is recommended that the Trusted\nApplication developer choose TEE_SUCCESS (0) to indicate success in their protocol, as this makes it\npossible to determine success or failure without looking at the return origin.\nParameters\n• session: An opened session handle\n• cancellationRequestTimeout: Timeout in milliseconds or the special value\nTEE_TIMEOUT_INFINITE if there is no timeout. After the timeout expires, the TEE SHALL act as\nthough a cancellation request for the operation had been sent.\n• commandID: The identifier of the Command to invoke. The meaning of each Command Identifier\nSHALL be defined in the protocol exposed by the target Trusted Application.\n• paramTypes: The types of all parameters passed in the operation. See section 4.9.4 for more details.\n• params: The parameters passed in the operation. See section 4.9.4 for more details.\nThe params parameter is defined in the prototype as an array of length 4. Implementers should be\naware that the address of the start of the array is passed to the callee.\n• returnOrigin: A pointer to a variable which will contain the return origin. This field may be NULL if\nthe return origin is not needed.\nSpecification Number: 10 Function Number: 0x402\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 101,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.9.3 TEE_InvokeTACommand",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_InvokeTACommand,TEE_SUCCESS",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "102 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nReturn Code\n• If the return origin is different from TEE_ORIGIN_TRUSTED_APP, one of the following return codes can\nbe returned:\nTEE_SUCCESS: In case of success.\no\nTEE_ERROR_OUT_OF_MEMORY: If not enough resources are available to perform the operation\no\nTEE_ERROR_TARGET_DEAD: If the destination Trusted Application has panicked during the\no\noperation\nTEE_ERROR_CANCEL: If the request is cancelled by anything other than the destination Trusted\no\nApplication\n• If the return origin is TEE_ORIGIN_TRUSTED_APP, the return code is defined by the protocol exposed\nby the destination Trusted Application.\nPanic Reasons\n• If the implementation detects that the security characteristics of a memory buffer would be\ndowngraded by the requested access rights. See Table 4-5.\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\n• If memory which was allocated with TEE_MALLOC_NO_SHARE is referenced by one of the parameters.\nBackward Compatibility\nThe error code TEE_CANCEL was added in TEE Internal Core API v1.2.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 102,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 102",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 103 / 375\n4.9.4 Operation Parameters in the Internal Client API\nThe functions TEE_OpenTASession and TEE_InvokeTACommand take paramTypes and params as\narguments. The calling Trusted Application can use these arguments to pass up to four parameters.\nEach of the parameters has a type, which is one of the TEE_PARAM_TYPE_XXX values listed in section 4.2.1.\nThe content of paramTypes SHOULD be built using the macro TEE_PARAM_TYPES (see section 4.3.6.1).\nUnless all parameter types are set to TEE_PARAM_TYPE_NONE, params SHALL NOT be NULL and SHALL\npoint to an array of four TEE_Param elements. Each of the params[i] is interpreted as follows.\nWhen the operation starts, the Framework reads the parameters as described in the following table.\nTable 4-15: Interpretation of params[i] on Entry to Internal Client API\nParameter Type Interpretation of params[i]\nTEE_PARAM_TYPE_NONE Ignored.\nTEE_PARAM_TYPE_VALUE_OUTPUT\nTEE_PARAM_TYPE_VALUE_INPUT Contains two integers in params[i].value.a and\nTEE_PARAM_TYPE_VALUE_INOUT params[i].value.b.\nTEE_PARAM_TYPE_MEMREF_INPUT params[i].memref.buffer and\nTEE_PARAM_TYPE_MEMREF_OUTPUT params[i].memref.size SHALL be initialized with a\nTEE_PARAM_TYPE_MEMREF_INOUT memory buffer that is accessible with the access rights\ndescribed in the type. The buffer can be NULL, in which\ncase size SHALL be set to 0.\nDuring the operation, the destination Trusted Application can update the contents of the OUTPUT or INOUT\nMemory References.\nWhen the operation completes, the Framework updates the structure params[i] as described in the\nfollowing table.\nTable 4-16: Effects of Internal Client API on params[i]\nParameter Type Effects on params[i]\nTEE_PARAM_TYPE_NONE Unchanged.\nTEE_PARAM_TYPE_VALUE_INPUT\nTEE_PARAM_TYPE_MEMREF_INPUT\nTEE_PARAM_TYPE_VALUE_OUTPUT params[i].value.a and params[i].value.b are\nTEE_PARAM_TYPE_VALUE_INOUT updated with the value sent by the destination Trusted\nApplication.\nTEE_PARAM_TYPE_MEMREF_OUTPUT params[i].memref.size is updated to reflect the actual\nTEE_PARAM_TYPE_MEMREF_INOUT or requested size of the buffer.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 103,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.9.4 Operation Parameters in the Internal Client API",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_PARAM_TYPES",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "104 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nThe implementation SHALL enforce the following restrictions on TEE_PARAM_TYPE_MEMREF_XXX values:\n• Where all or part of the referenced memory buffer was passed to the TA from the REE or from another\nTA, the implementation SHALL NOT result in downgrade of the security characteristics of the buffer –\nsee Table 4-5.\n• Where all or part of the referenced buffer was allocated by the TA with the TEE_MALLOC_NO_SHARE\nhint, the implementation SHALL raise a Panic for the TA.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 104,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 104",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 105 / 375\n4.10 Cancellation Functions\nThis section defines functions for Trusted Applications to handle cancellation requested by a Client where a\nClient is either an REE Client Application or a TA.\nWhen a Client requests cancellation using the function TEEC_RequestCancellation (in the case of an\nREE Client using the [Client API]) or a cancellation is created through a timeout (in the case of a TA Client),\nthe implementation SHALL do the following:\n• If the operation has not reached the TA yet but has been queued in the TEE, then it SHALL be retired\nfrom the queue and fail with the return code:\nFor an REE Client, TEEC_ERROR_CANCEL and the origin TEEC_ORIGIN_TEE\no\nFor a TEE Client, TEE_ERROR_CANCEL and the origin TEE_ORIGIN_TEE\no\n• If the operation has been transmitted to the Trusted Application, the implementation SHALL set the\nCancellation Flag of the task executing the command. If the Peripheral and Event APIs are present, a\nTEE_Event_ClientCancel event shall be inserted into the event queue by the session peripheral.\n• If the Trusted Application has unmasked the effects of cancellation by using the function\nTEE_UnmaskCancellation, and if the task is engaged in a cancellable function when the\nCancellation Flag is set, then that cancellable function is interrupted. The Trusted Application can\ndetect that the function has been interrupted because it returns TEE_ERROR_CANCEL. It can then\nexecute cleanup code and possibly fail the current client operation, although it may well report a\nsuccess.\nNote that this version of the specification defines the following cancellable functions: TEE_Wait\no\nand TEE_Event_Wait.\nThe functions TEE_OpenTASession and TEE_InvokeTACommand, while not cancellable per se,\no\nSHALL transmit cancellation requests: If the Cancellation Flag is set and the effects of\ncancellation are not masked, then the Trusted Core Framework SHALL consider that the\ncancellation of the corresponding operation is requested.\n• When the Cancellation Flag is set for a given task, the function TEE_GetCancellationFlag\nSHALL return true, but only in the case the cancellations are not masked. This allows the Trusted\nApplication to poll the Cancellation Flag, for example, when it is engaged in a lengthy active\ncomputation not using cancellable functions such as TEE_Wait.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 105,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.10 Cancellation Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "106 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.10.1 TEE_GetCancellationFlag\nSince: TEE Internal API v1.0\nbool TEE_GetCancellationFlag( void );\nDescription\nThe TEE_GetCancellationFlag function determines whether the current task’s Cancellation Flag is set. If\ncancellations are masked, this function SHALL return false. This function cannot panic.\nSpecification Number: 10 Function Number: 0x501\nReturn Value\n• true if the Cancellation Flag is set and cancellations are not masked\n• false if the Cancellation Flag is not set or if cancellations are masked\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 106,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.10.1 TEE_GetCancellationFlag",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetCancellationFlag",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 107 / 375\n4.10.2 TEE_UnmaskCancellation\nSince: TEE Internal API v1.0\nbool TEE_UnmaskCancellation( void );\nDescription\nThe TEE_UnmaskCancellation function unmasks the effects of cancellation for the current task.\nWhen cancellation requests are unmasked, the Cancellation Flag interrupts cancellable functions such as\nTEE_Wait and requests the cancellation of operations started with TEE_OpenTASession or\nTEE_InvokeTACommand.\nBy default, tasks created to handle a TA entry point have cancellation masked, so that a TA does not have to\ncope with the effects of cancellation requests.\nSpecification Number: 10 Function Number: 0x503\nReturn Value\n• true if cancellations were masked prior to calling this function\n• false otherwise\nPanic Reasons\n• If the implementation detects any error.\n4.10.3 TEE_MaskCancellation\nSince: TEE Internal API v1.0\nbool TEE_MaskCancellation( void );\nDescription\nThe TEE_MaskCancellation function masks the effects of cancellation for the current task.\nWhen cancellation requests are masked, the Cancellation Flag does not have an effect on the cancellable\nfunctions and cannot be retrieved using TEE_GetCancellationFlag.\nBy default, tasks created to handle a TA entry point have cancellation masked, so that a TA does not have to\ncope with the effects of cancellation requests.\nSpecification Number: 10 Function Number: 0x502\nReturn Value\n• true if cancellations were masked prior to calling this function\n• false otherwise\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 107,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.10.2 TEE_UnmaskCancellation",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_MaskCancellation,TEE_UnmaskCancellation",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "108 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.11 Memory Management Functions\nThis section defines the following functions:\n• A function to check the access rights of a given buffer. This can be used in particular to check if the\nbuffer belongs to shared memory.\n• Access to an instance data register, which provides a possibly more efficient alternative to using read-\nwrite C global variables\n• A malloc facility\n• A few utilities to copy and fill data blocks\n4.11.1 TEE_CheckMemoryAccessRights\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_CheckMemoryAccessRights(\nuint32_t accessFlags,\nvoid* buffer, size_t size);\nDescription\nThe TEE_CheckMemoryAccessRights function causes the implementation to examine a buffer of memory\nspecified in the parameters buffer and size and to determine whether the current Trusted Application\ninstance has the access rights requested in the parameter accessFlags. If the characteristics of the buffer\nare compatible with accessFlags, then the function returns TEE_SUCCESS. Otherwise, it returns\nTEE_ERROR_ACCESS_DENIED. Note that the buffer SHOULD NOT be accessed by the function, but the\nimplementation SHOULD check the access rights based on the address of the buffer and internal memory\nmanagement information.\nThe parameter accessFlags can contain one or more of the following flags:\n• TEE_MEMORY_ACCESS_READ: Check that the buffer is entirely readable by the current Trusted\nApplication instance.\n• TEE_MEMORY_ACCESS_WRITE: Check that the buffer is entirely writable by the current Trusted\nApplication instance.\n• TEE_MEMORY_ACCESS_ANY_OWNER:\nIf this flag is not set, then the function checks that the buffer is not shared, i.e. whether it can be\no\nsafely passed in an [in] or [out] parameter.\nIf this flag is set, then the function does not check ownership. It returns TEE_SUCCESS if the\no\nTrusted Application instance has read or write access to the buffer, independently of whether the\nbuffer resides in memory owned by a Client or not.\n• All other flags are reserved for future use and SHOULD be set to 0.\nThe result of this function is valid until:\n• The allocated memory area containing the supplied buffer is passed to TEE_Realloc or TEE_Free.\n• One of the entry points of the Trusted Application returns.\n• Actors outside of the TEE change the memory access rights when the memory is shared with an\noutside entity.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 108,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.11 Memory Management Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CheckMemoryAccessRights",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 109 / 375\nIn the first two situations, the access rights of a given buffer MAY change and the Trusted Application SHOULD\ncall the function TEE_CheckMemoryAccessRights again.\nWhen this function returns TEE_SUCCESS, and as long as this result is still valid, the implementation SHALL\nguarantee the following properties:\n• For the flag TEE_MEMORY_ACCESS_READ and TEE_MEMORY_ACCESS_WRITE, the implementation\nSHALL guarantee that subsequent read or write accesses by the Trusted Application wherever in the\nbuffer will succeed and will not panic.\n• When the flag TEE_MEMORY_ACCESS_ANY_OWNER is not set, the implementation SHALL guarantee\nthat the memory buffer is owned either by the Trusted Application instance or by a more trusted\ncomponent, and cannot be controlled, modified, or observed by a less trusted component, such as the\nClient of the Trusted Application. This means that the Trusted Application can assume the following\nguarantees:\nRead-after-read consistency: If the Trusted Application performs two successive read accesses\no\nto the buffer at the same address and if, between the two read accesses, it performs no write,\neither directly or indirectly through the API to that address, then the two reads SHALL return the\nsame result.\nRead-after-write consistency: If the Trusted Application writes some data in the buffer and\no\nsubsequently reads the same address and if it performs no write, either directly or indirectly\nthrough the API to that address in between, the read SHALL return the data.\nNon-observability: If the Trusted Application writes some data in the buffer, then the data\no\nSHALL NOT be observable by components less trusted than the Trusted Application itself.\nNote that when true memory sharing is implemented between Clients and the Trusted Application, the Memory\nReference Parameters passed to the TA entry points will typically not satisfy these requirements. In this case,\nthe function TEE_CheckMemoryAccessRights SHALL return TEE_ERROR_ACCESS_DENIED. The code\nhandling such buffers has to be especially careful to avoid security issues brought by this lack of guarantees.\nFor example, it can read each byte in the buffer only once and refrain from writing temporary data in the buffer.\nAdditionally, the implementation SHALL guarantee that some types of memory blocks have a minimum set of\naccess rights:\n• The following blocks SHALL allow read and write accesses, SHALL be owned by the Trusted\nApplication instance, and SHOULD NOT allow code execution:\nAll blocks returned by TEE_Malloc or TEE_Realloc\no\nAll the local and global non-const C variables\no\nThe TEE_Param structures passed to the entry points TA_OpenSessionEntryPoint and\no\nTA_InvokeCommandEntryPoint. This applies to the immediate contents of the TEE_Param\nstructures, but not to the pointers contained in the fields of such structures, which can of course\npoint to memory owned by the client. Note that this also means that these TEE_Param structures\nSHALL NOT directly point to the corresponding structures in the TEE Client API (see [Client API])\nor the Internal Client API (see section 4.9). The implementation SHALL perform a copy into a safe\nTA-owned memory buffer before passing the structures to the entry points.\n• The following blocks SHALL allow read accesses, SHALL be owned by the Trusted Application\ninstance, and SHOULD NOT allow code execution:\nAll const local or global C variables\no\n• The following blocks MAY allow read accesses, SHALL be owned by the Trusted Application instance,\nand SHALL allow code execution:\nThe code of the Trusted Application itself\no\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 109,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 109",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "110 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n• When a particular parameter passed in the structure TEE_Param to a TA entry point is a Memory\nReference as specified in its parameter type, then this block, as described by the initial values of the\nfields buffer and size in that structure, SHALL allow read and/or write accesses as specified in\nthe parameter type. As noted above, this buffer is not required to reside in memory owned by the TA\ninstance.\nFinally, any implementation SHALL also guarantee that the NULL pointer cannot be dereferenced. If a Trusted\nApplication attempts to read one byte at the address NULL, it SHALL panic. This guarantee SHALL extend to\na segment of addresses starting at NULL, but the size of this segment is implementation dependent.\nParameters\n• accessFlags: The access flags to check. Valid values are shown in Table 4-5.\n• buffer, size: The description of the buffer to check.\nSpecification Number: 10 Function Number: 0x601\nReturn Code\n• TEE_SUCCESS: If the entire buffer allows the requested accesses\n• TEE_ERROR_ACCESS_DENIED: If at least one byte in the buffer is not accessible with the requested\naccesses\nPanic Reasons\nTEE_CheckMemoryAccessRights SHALL NOT panic for any reason.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for size.\nTEE Internal Core API v1.2 and v1.2.1 specified the [inbuf] annotation on buffer, now deleted.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 110,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 110",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 111 / 375\n4.11.2 TEE_SetInstanceData\nSince: TEE Internal API v1.0\nvoid TEE_SetInstanceData(\n[ctx] void* instanceData );\nDescription\nThe TEE_SetInstanceData and TEE_GetInstanceData functions provide an alternative to writable\nglobal data (writable variables with global scope and writable static variables with global or function scope).\nWhile an implementation SHALL support C global variables, using these functions may be sometimes more\nefficient, especially if only a single instance data variable is required.\nThese two functions can be used to register and access an instance variable. Typically this instance variable\ncan be used to hold a pointer to a Trusted Application-defined memory block containing any writable data that\nneeds instance global scope, or writable static data that needs instance function scope.\nThe value of this pointer is not interpreted by the Framework, and is simply passed back to other\nTA_ functions within this session. Note that *instanceData may be set with a pointer to a buffer allocated\nby the Trusted Application instance or with anything else, such as an integer, a handle, etc. The Framework\nwill not automatically free *instanceData when the session is closed; the Trusted Application instance is\nresponsible for freeing memory if required.\nAn equivalent session context variable for managing session global and static data exists for sessions (see\nTA_OpenSessionEntryPoint, TA_InvokeCommandEntryPoint, and TA_CloseSessionEntryPoint in\nsection 4.3).\nThis function sets the Trusted Application instance data pointer. The data pointer can then be retrieved by the\nTrusted Application instance by calling the TEE_GetInstanceData function.\nParameters\n• instanceData: A pointer to the global Trusted Application instance data. This pointer may be NULL.\nSpecification Number: 10 Function Number: 0x609\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 111,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.11.2 TEE_SetInstanceData",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_SetInstanceData",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "112 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.11.3 TEE_GetInstanceData\nSince: TEE Internal API v1.0\n[ctx] void* TEE_GetInstanceData( void );\nDescription\nThe TEE_GetInstanceData function retrieves the instance data pointer set by the Trusted Application using\nthe TEE_SetInstanceData function.\nSpecification Number: 10 Function Number: 0x603\nReturn Value\nThe value returned is the previously set pointer to the Trusted Application instance data, or NULL if no instance\ndata pointer has yet been set.\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 112,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.11.3 TEE_GetInstanceData",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetInstanceData",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 113 / 375\n4.11.4 TEE_Malloc\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nvoid* TEE_Malloc(\nsize_t size,\nuint32_t hint );\nDescription\nThe TEE_Malloc function allocates space for an object whose size in bytes is specified in the parameter\nsize.\nThe pointer returned is guaranteed to be aligned such that it may be assigned as a pointer to any basic C type.\nThe parameter hint is a hint to the allocator. The valid values for the hint are defined in Table 4-17. The\nvalid hint values are a bitmask and can be independently set. This parameter allows Trusted Applications to\nrefer to various pools of memory or to request special characteristics for the allocated memory by using an\nimplementation-defined hint. Future versions of this specification may introduce additional standard hints.\nThe hint values should be treated as a mask – they can be logically 'or'd together. In Table 4-17:\n• 'x' in a field means that the value of that bit or bits can be 1 or 0.\n• ‘y’ in a field means that the value of that bit or bits is irrelevant to the definition of that row, UNLESS\nalready defined in a previous row, and can be either 1 or 0.\nTable 4-17: Valid Hint Values\nName Bit Number Meaning\n31 30 – 2 1 0\nTEE_MALLOC_FILL_ZERO 0 x x 0 Memory block returned SHALL be filled with\nzeros.\nNote: TEE_MALLOC_NO_FILL has precedence\nover TEE_MALLOC_FILL_ZERO.\nTEE_MALLOC_NO_FILL 0 x x 1 Memory block returned may not be filled with\nzeros\nTEE_MALLOC_NO_SHARE 0 x 1 x The returned block of memory will not be shared\nwith other TA instances.\nReserved 0 y Reserved for future versions of this specification.\nImplementation defined 1 y Reserved for implementation-defined hints.\nThe hint SHALL be attached to the allocated block and SHALL be used when the block is reallocated with\nTEE_Realloc.\nIf the space cannot be allocated, given the current hint value (for example because the hint value is not\nimplemented), a NULL pointer SHALL be returned.\nTEE_MALLOC_NO_SHARE provides a mechanism for a TA developer to indicate that the allocation request is\nnot to be shared with other TAs. Implementations MAY choose to use this hint to allocate memory from memory\npools which are optimized for performance at the expense of sharing.\nTEE_MALLOC_NO_FILL provides a mechanism to allow a TA to indicate that it does not assume that memory\nwill be zero filled. It SHALL be used in conjunction with TEE_MALLOC_NO_SHARE.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 113,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.11.4 TEE_Malloc",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Malloc",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "114 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nA Trusted OS MAY use the TEE_MALLOC_NO_FILL hint to avoid clearing memory on allocation where it is\nsafe to do so. When allocating to a TA, a Trusted OS SHALL zero fill memory which:\n• Has previously been allocated to another TA instance;\n• Has previously been allocated to internal structures of the TEE.\n• Does not have the TEE_MALLOC_NO_SHARE hint.\nParameters\n• size: The size of the buffer to be allocated.\n• hint: A hint to the allocator. See Table 4-17 for valid values.\nSpecification Number: 10 Function Number: 0x604\nReturn Value\nUpon successful completion, with size not equal to zero, the function returns a pointer to the allocated space.\nIf the space cannot be allocated, given the current hint value, a NULL pointer is returned.\nIf the size of the requested space is zero:\n• The value returned is undefined but guaranteed to be different from NULL. This non-NULL value\nensures that the hint can be associated with the returned pointer for use by TEE_Realloc.\n• The Trusted Application SHALL NOT access the returned pointer. The Trusted Application\nSHOULD panic if the memory pointed to by such a pointer is accessed for either read or write.\nPanic Reasons\n• If the implementation detects any error.\n• If TEE_MALLOC_NO_FILL is used without TEE_MALLOC_NO_SHARE.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for size.\nThe hint values TEE_MALLOC_NO_SHARE and TEE_MALLOC_NO_FILL were added in TEE Internal Core\nAPI v1.2.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 114,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 114",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 115 / 375\n4.11.5 TEE_Realloc\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nvoid* TEE_Realloc(\n[inout] void* buffer,\nsize_t newSize );\nDescription\nThe TEE_Realloc function changes the size of the memory object pointed to by buffer to the size specified\nby newSize.\nThe content of the object remains unchanged up to the lesser of the new and old sizes. Space in excess of\nthe old size contains unspecified content.\nIf the new size of the memory object requires movement of the object, the space for the previous instantiation\nof the object is deallocated. If the space cannot be allocated, the original object remains allocated, and this\nfunction returns a NULL pointer.\nIf buffer is NULL, TEE_Realloc is equivalent to TEE_Malloc for the specified size. The associated hint\napplied SHALL be the default value defined in TEE_Malloc.\nIt is a programmer error if buffer does not match a pointer previously returned by TEE_Malloc or\nTEE_Realloc, or if the space has previously been deallocated by a call to TEE_Free or TEE_Realloc.\nIf the hint initially provided when the block was allocated with TEE_Malloc is 0, then the extended space is\nfilled with zeroes. In general, the function TEE_Realloc SHOULD allocate the new memory buffer using\nexactly the same hint as for the buffer initially allocated with TEE_Malloc. In any case, it SHALL NOT\ndowngrade the security or performance characteristics of the buffer.\nNote that any pointer returned by TEE_Malloc or TEE_Realloc and not yet freed or reallocated can be\npassed to TEE_Realloc. This includes the special non-NULL pointer returned when an allocation for 0 bytes\nis requested.\nParameters\n• buffer: The pointer to the object to be reallocated\n• newSize: The new size required for the object\nSpecification Number: 10 Function Number: 0x608\nReturn Value\nUpon successful completion, TEE_Realloc returns a pointer to the (possibly moved) allocated space.\nIf there is not enough available memory, TEE_Realloc returns a NULL pointer and the original buffer is still\nallocated and unchanged.\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 115,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.11.5 TEE_Realloc",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Realloc",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "116 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nBackward Compatibility\nPrior to TEE Internal Core API v1.2:\n• TEE_Realloc specified the [in] annotation on buffer.\n• TEE_Realloc used type uint32_t for the size parameter. On a Trusted OS with natural word\nlength greater than 32 bits this leads to operation limitations, and the size parameter was changed to\na size_t.\nBackward compatibility with a previous version of the Internal Core API can be selected at compile time (see\nsection 3.5.1).\nvoid* TEE_Realloc(\n[in] void* buffer,\nuint32_t newSize );\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 116,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 116",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Realloc",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 117 / 375\n4.11.6 TEE_Free\nSince: TEE Internal API v1.0\nvoid TEE_Free(void *buffer);\nDescription\nThe TEE_Free function causes the space pointed to by buffer to be deallocated; that is, made available\nfor further allocation.\nIf buffer is a NULL pointer, TEE_Free does nothing. Otherwise, it is a programmer error if the argument\ndoes not match a pointer previously returned by the TEE_Malloc or TEE_Realloc if the space has been\ndeallocated by a call to TEE_Free or TEE_Realloc.\nParameters\n• buffer: The pointer to the memory block to be freed\nSpecification Number: 10 Function Number: 0x602\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 117,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.11.6 TEE_Free",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Free",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "118 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.11.7 TEE_MemMove\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nvoid TEE_MemMove(\n[outbuf(size)] void* dest,\n[inbuf(size)] void* src,\nsize_t size );\nDescription\nThe TEE_MemMove function copies size bytes from the buffer pointed to by src into the buffer pointed to\nby dest.\nCopying takes place as if the size bytes from the buffer pointed to by src are first copied into a temporary\narray of size bytes that does not overlap the buffers pointed to by dest and src, and then the size\nbytes from the temporary array are copied into the buffer pointed to by dest.\nParameters\n• dest: A pointer to the destination buffer\n• src: A pointer to the source buffer\n• size: The number of bytes to be copied\nSpecification Number: 10 Function Number: 0x607\nPanic Reasons\n• If the implementation detects any error.\nBackward Compatibility\nPrior to TEE Internal Core API v1.2, TEE_MemMove used type uint32_t for the size parameter. On a\nTrusted OS with natural word length greater than 32 bits this leads to operation limitations, and the size\nparameter was changed to a size_t.\nBackward compatibility with a previous version of the Internal Core API can be selected at compile time (see\nsection 3.5.1).\nvoid TEE_MemMove(\n[inoutbuf(size)] void* buffer1 dest,\n[inbuf(size)] void* buffer2 src,\nuint32_t size);\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 118,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.11.7 TEE_MemMove",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_MemMove",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 119 / 375\n4.11.8 TEE_MemCompare\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nint32_t TEE_MemCompare(\n[inbuf(size)] void* buffer1,\n[inbuf(size)] void* buffer2,\nsize_t size);\nDescription\nThe TEE_MemCompare function compares the first size bytes of the buffer pointed to by buffer1 to the\nfirst size bytes of the buffer pointed to by buffer2.\nParameters\n• buffer1: A pointer to the first buffer\n• buffer2: A pointer to the second buffer\n• size: The number of bytes to be compared\nSpecification Number: 10 Function Number: 0x605\nReturn Value\nThe sign of a non-zero return value is determined by the sign of the difference between the values of the first\npair of bytes (both interpreted as type uint8_t) that differ in the objects being compared.\n• If the first byte that differs is higher in buffer1, then return an integer greater than zero.\n• If the first size bytes of the two buffers are identical, then return zero.\n• If the first byte that differs is higher in buffer2, then return an integer lower than zero.\nPanic Reasons\n• If the implementation detects any error.\nBackward Compatibility\nPrior to TEE Internal Core API v1.2, TEE_MemCompare used type uint32_t for the size parameter. On\na Trusted OS with natural word length greater than 32 bits this leads to operation limitations, and the size\nparameter was changed to a size_t.\nBackward compatibility with a previous version of the Internal Core API can be selected at compile time (see\nsection 3.5.1).\nint32_t TEE_MemCompare(\n[inbuf(size)] void* buffer1,\n[inbuf(size)] void* buffer2,\nuint32_t size);\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 119,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.11.8 TEE_MemCompare",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_MemCompare",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "120 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n4.11.9 TEE_MemFill\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nvoid TEE_MemFill(\n[outbuf(size)] void* buffer,\nuint8_t x,\nsize_t size);\nDescription\nThe TEE_MemFill function writes the byte x into the first size bytes of the buffer pointed to by buffer.\nParameters\n• buffer: A pointer to the destination buffer\n• x: The value to be set\n• size: The number of bytes to be set\nSpecification Number: 10 Function Number: 0x606\nPanic Reasons\n• If the implementation detects any error.\nBackward Compatibility\nPrior to TEE Internal Core API v1.2, TEE_MemFill used type uint32_t for the x and size parameters.\n• The previous definition of x stated that the value of x would be cast to a uint8_t, which has now\nbeen made explicit.\n• Using uint32_t for a size parameter can lead to limitations on some platforms, and the size\nparameter has been changed to a size_t.\nBackward compatibility with a previous version of the Internal Core API can be selected at compile time (see\nsection 3.5.1).\nvoid TEE_MemFill(\n[outbuf(size)] void* buffer,\nuint32_t x,\nuint32_t size);\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 120,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "4.11.9 TEE_MemFill",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_MemFill",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 121 / 375\n5 Trusted Storage API for Data and Keys\nThis section includes the following subsections:\n5.1 Summary of Features and Design ................................................................................ 121\n5.2 Trusted Storage and Rollback Protection ..................................................................... 125\n5.3 Data Types ................................................................................................................... 126\n5.4 Constants...................................................................................................................... 129\n5.5 Generic Object Functions ............................................................................................. 132\n5.6 Transient Object Functions ........................................................................................... 139\n5.7 Persistent Object Functions.......................................................................................... 157\n5.8 Persistent Object Enumeration Functions .................................................................... 166\n5.9 Data Stream Access Functions .................................................................................... 171\n5.1 Summary of Features and Design\nThis section provides a summary of the features and design of the Trusted Storage API.\n• Each TA has access to a set of Trusted Storage Spaces, identified by 32-bit Storage Identifiers.\nThis specification defines three Trusted Storage Spaces for each TA, which are its own private\no\nstorage spaces.\n TEE_STORAGE_PRIVATE\n• A storage space that SHALL be private to the TEE, but that MAY be external to the\nhardware supporting the TEE.\n• Tampering SHALL be detected.\n• Rollback SHALL be detected as described in section 5.2.\n• This storage space MAY NOT be available if the REE is not active.\n• This storage space SHALL be erased by a factory reset.\n TEE_STORAGE_PERSO (Optional)\n• A storage space that SHALL be private to the TEE, but that MAY be external to the\nhardware supporting the TEE.\n• Required by TMF (see [TMF ASN.1] section 5.5).\n• Tampering SHALL be detected.\n• Rollback SHALL be detected as described in section 5.2.\n• This storage space MAY NOT be available if the REE is not active.\n• Immunity from factory reset if present in the gpd.tee.tmf.resetpreserved.entities\nproperty (see [TMF ASN.1] section 6.5.4).\n TEE_STORAGE_PROTECTED (Optional)\n• A storage space with additional characteristics over TEE_STORAGE_PRIVATE including:\nImmunity from tampering.\no\nImmunity from rollback.\no\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 121,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.1 Summary of Features and Design ................................................................................ 121",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_STORAGE_PERSO,TEE_STORAGE_PROTECTED",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "122 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nImmunity from factory reset if present in the\no\ngpd.tee.tmf.resetpreserved.entities property (see [TMF ASN.1]\nsection 6.5.4).\n• This storage space MAY impose relatively low per TA storage limits and MAY impose rate\nlimits. If storage or rate limiting is required, it SHALL be enforced by the Trusted OS.\n• This storage space MAY also be available while the REE is booting. GlobalPlatform believes\nthat this can be implemented using a Replay Protected Memory Block (RPMB).\nUnless explicitly overridden by other specifications, the objects in any Trusted Storage Space are\no\naccessible only to the TA that created them and SHALL NOT be visible to other TEE entities\nexcept those associated directly with implementing the Trusted Storage System.\nOther storage identifiers may be defined in future versions of this specification or by an\no\nimplementation, e.g. to refer to storage spaces shared among multiple TAs or for communicating\nbetween boot-time entities and run-time Trusted Applications.\n• A Trusted Storage Space contains Persistent Objects. Each persistent object is identified by an Object\nIdentifier, which is a variable-length binary buffer from 0 to 64 bytes. Object identifiers can contain\nany bytes, including bytes corresponding to non-printable characters.\n• A persistent object can be a Cryptographic Key Object, a Cryptographic Key-Pair Object, or a Data\nObject.\n• Each persistent object has a type, which precisely defines the content of the object. For example,\nthere are object types for AES keys, RSA key-pairs, data objects, etc.\n• All persistent objects have an associated Data Stream. Persistent data objects have only a data\nstream. Persistent cryptographic objects (that is, keys or key-pairs) have a data stream, Object\nAttributes, and metadata.\nThe Data Stream is entirely managed in the TA memory space. It can be loaded into a\no\nTA-allocated buffer when the object is opened or stored from a TA-allocated buffer when the object\nis created. It can also be accessed as a stream, so it can be used to store large amounts of data\naccessed by small chunks.\nObject Attributes are used for small amounts of data (typically a few tens or hundreds of bytes).\no\nThey can be stored in a memory pool that is separated from the TA instance and some attributes\nmay be hidden from the TA itself. Attributes are used to store the key material in a structured way.\nFor example, an RSA key-pair has an attribute for the modulus, the public exponent, the private\nexponent, etc. When an object is created, all mandatory Object Attributes SHALL be specified and\noptional attributes MAY be specified.\nNote that an implementation is allowed to store more information in an object than the visible\nattributes. For example, some data might be pre-computed and stored internally to accelerate\nsubsequent cryptographic operations.\nThe metadata associated with each cryptographic object includes:\no\n Key Size in bits. The precise meaning depends on the key algorithm. For example, AES key\ncan have 128 bits, 192 bits, or 256 bits; RSA keys can have 1024 bits or 2048 bits or any other\nsupported size, etc.\n Key Usage Flags, which define the operations permitted with the key as well as whether the\nsensitive parts of the key material can be retrieved by the TA or not.\n• A TA can also allocate Transient Objects. Compared to persistent objects:\nTransient objects are held in memory and are automatically wiped and reclaimed when they are\no\nclosed or when the TA instance is destroyed.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 122,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 122",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 123 / 375\nTransient objects contain only attributes and no data stream.\no\nA transient object can be uninitialized, in which case it is an object container allocated with a\no\ncertain object type and maximum size but with no attributes. A transient object becomes initialized\nwhen its attributes are populated. Note that persistent objects are always created initialized. This\nmeans that when the TA wants to generate or derive a persistent key, it has to first use a transient\nobject then write the attributes of a transient object into a persistent object.\nTransient objects have no identifier, they are only manipulated through object handles.\no\nCurrently, transient objects are used for cryptographic keys and key-pairs.\no\n• Any function that accesses a persistent object handle MAY return a status of\nTEE_ERROR_CORRUPT_OBJECT or TEE_ERROR_CORRUPT_OBJECT_2, which indicates that corruption\nof the object has been detected. Before this status is returned, the implementation SHALL delete the\ncorrupt object and MAY close the associated handle; see\ngpd.ta.doesNotCloseHandleOnCorruptedObject on page 86.\n• Any function that accesses a persistent object MAY return a status of\nTEE_ERROR_STORAGE_NOT_AVAILABLE or TEE_ERROR_STORAGE_NOT_AVAILABLE_2, which\nindicates that the storage system in which the object is stored is not accessible for some reason.\n• Persistent and transient objects are manipulated through opaque Object Handles.\nSome functions accept both types of object handles. For example, a cryptographic operation can\no\nbe started with either a transient key handle or a persistent key handle.\nSome functions accept only handles on transient objects. For example, populating the attributes of\no\nan object works only with a transient object because it requires an uninitialized object and\npersistent objects are always fully initialized.\nFinally, the file-like API functions to access the data stream work only with persistent objects\no\nbecause transient objects have no data stream.\nCryptographic operations are described in section 6.\nFigure 5-1 illustrates how a TEE_ObjectHandle is manipulated by the Trusted Storage API. The state\ndiagram is expressed in terms of the state that is revealed in the handleFlags by TEE_GetObjectInfo1.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 123,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 123",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "124 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nFigure 5-1: State Diagram for TEE_ObjectHandle (Informative)\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 124,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 124",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_ObjectHandle",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 125 / 375\n5.2 Trusted Storage and Rollback Protection\nThe level of protection that a Trusted Application can assume from the rollback detection mechanism of the\nTrusted Storage Spaces is implementation defined. The implementation SHALL provide appropriate properties\nas defined in Table 4-14 in section 4.7 to indicate the level of protection provided.\ngpd.tee.trustedStorage.private.rollbackProtection\ngpd.tee.trustedStorage.perso.rollbackProtection\ngpd.tee.trustedStorage.protected.rollbackProtection\nTrusted Applications can query the implementation properties to discover the level of protection.\nTable 5-1: Values of Trusted Storage Space Rollback Protection Properties [obsolete]\nProperty Value Meaning\nThis table existed in previous versions of the specification and was removed in v1.3.\nThe values of the rollback protection properties are discussed in Table 4-14: Implementation Properties.\nSee page 92.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 125,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.2 Trusted Storage and Rollback Protection",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "126 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n5.3 Data Types\n5.3.1 TEE_Attribute\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nAn array of this type is passed whenever a set of attributes is specified as argument to a function of the API.\ntypedef struct {\nuint32_t attributeID;\nunion\n{\nstruct\n{\n[inoutbuf] void* buffer; size_t length;\n} ref;\nstruct\n{\nuint32_t a;\nuint32_t b;\n} value;\n} content;\n} TEE_Attribute;\nAn attribute can be either a buffer attribute or a value attribute. This is determined by bit [29] of the attribute\nidentifier. If this bit is set to 0, then the attribute is a buffer attribute and the field ref SHALL be selected.\nIf the bit is set to 1, then it is a value attribute and the field value SHALL be selected.\nWhen an array of attributes is passed to a function, either to populate an object or to specify operation\nparameters, and if an attribute identifier occurs twice in the array, then only the first occurrence is used.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for length.\nVersions prior to TEE Internal Core API v1.3 used a different notation for buffer.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 126,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.3 Data Types",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 127 / 375\n5.3.2 TEE_ObjectInfo\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\ntypedef struct {\nuint32_t objectType;\nuint32_t objectSize;\nuint32_t maxObjectSize;\nuint32_t objectUsage;\nsize_t dataSize;\nsize_t dataPosition;\nuint32_t handleFlags;\n} TEE_ObjectInfo;\nSee the documentation of function TEE_GetObjectInfo1 in section 5.5.1 for a description of this structure.\nBackward Compatibility\nPrior to TEE Internal Core API v1.2, dataSize and dataPosition were defined as uint32_t. Note that\nobjectType and objectSize have intentionally remained as uint32_t as they are used to define keys\nand similar material which can always be represented in a buffer which can be indexed by a uint32_t.\n5.3.3 TEE_Whence\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\ntypedef uint32_t TEE_Whence;\nThis structure indicates the possible start offset when moving a data position in the data stream associated\nwith a persistent object. The following table lists the legal values for TEE_Whence. All other values are\nreserved.\nTable 5-1b: TEE_Whence Constants 3\nConstant Name Value\nTEE_DATA_SEEK_SET 0x00000000\nTEE_DATA_SEEK_CUR 0x00000001\nTEE_DATA_SEEK_END 0x00000002\nReserved 0x00000003 – 0x7FFFFFFE\nTEE_WHENCE_ILLEGAL_VALUE 0x7FFFFFFF\nImplementation defined 0x80000000 – 0xFFFFFFFF\nTEE_WHENCE_ILLEGAL_VALUE is reserved for testing and validation and SHALL be treated as an undefined\nvalue when provided to the TEE_SeekObjectData function.\nBackward Compatibility\nPrior to TEE Internal Core API v1.2, TEE_Whence was defined as an enum.\n3 See section 3.3.3 for recommendations on constant declaration.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 127,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.3.2 TEE_ObjectInfo",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "128 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n5.3.4 TEE_ObjectHandle\nSince: TEE Internal API v1.0\ntypedef struct __TEE_ObjectHandle* TEE_ObjectHandle;\ntypedef struct <ImplNamespace>_TEE_ObjectHandle* TEE_ObjectHandle;\nTEE_ObjectHandle is an opaque handle (as defined in section 2.4) on an object.\nThese handles are returned by the functions TEE_AllocateTransientObject (section 5.6.1),\nTEE_OpenPersistentObject (section 5.7.1), and TEE_CreatePersistentObject (section 5.7.2).\nIn the above definition, <ImplNamespace> can be replaced with a namespace identifier reserved for the\nimplementation, or the implementation may select some other name and definition provided that it is\ncompatible with assignment of TEE_HANDLE_NULL.\nSince: TEE Internal Core API v1.3.1\nPrevious versions of this specification used the definition __TEE_ObjectHandle* for\nTEE_ObjectHandle.\nThis was changed as names beginning with double underscore are reserved for the C language\nimplementation in [C99]. The name and type used for opaque handle definitions is not, and never has been,\nnormative.\n5.3.5 TEE_ObjectEnumHandle\nSince: TEE Internal API v1.0\ntypedef struct __TEE_ObjectEnumHandle* TEE_ObjectEnumHandle;\ntypedef struct <ImplNamespace>_TEE_ObjectEnumHandle* TEE_ObjectEnumHandle;\nTEE_ObjectEnumHandle is an opaque handle (as defined in section 2.4) on an object enumerator. These\nhandles are returned by the function TEE_AllocatePersistentObjectEnumerator specified in\nsection 5.8.1.\nIn the above definition, <ImplNamespace> can be replaced with a namespace identifier reserved for the\nimplementation, or the implementation may select some other name and definition provided that it is\ncompatible with assignment of TEE_HANDLE_NULL.\nSince: TEE Internal Core API v1.3.1\nPrevious versions of this specification used the definition __TEE_ObjectEnumHandle* for\nTEE_ObjectEnumHandle.\nThis was changed as names beginning with double underscore are reserved for the C language\nimplementation in [C99]. The name and type used for opaque handle definitions is not, and never has been,\nnormative.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 128,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.3.4 TEE_ObjectHandle",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AllocateTransientObject,TEE_CreatePersistentObject,TEE_OpenPersistentObject",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 129 / 375\n5.4 Constants\nNote: See section 3.3.3 for recommendations on constant declaration.\n5.4.1 Constants Used in Trusted Storage API for Data and Keys\nThe following tables pertain to the Trusted Storage API for Data and Keys (section 5).\nTable 5-2: Object Storage Constants\nConstant Name Value\nReserved 0x00000000\nTEE_STORAGE_PRIVATE 0x00000001\nTEE_STORAGE_PERSO 0x00000002\nTEE_STORAGE_PROTECTED 0x00000003\nReserved for future use 0x00000004-0x7FFFFFFE\nTEE_STORAGE_ILLEGAL_VALUE 0x7FFFFFFF\nReserved for implementation defined storage 0x80000000-0xFFFFFFFF\nTEE_STORAGE_ILLEGAL_VALUE is reserved for testing and validation and SHALL be treated as an undefined\nvalue when provided to the TEE_OpenPersistentObject or TEE_CreatePersistentObject function.\nTable 5-3: Data Flag Constants\nConstant Name Value\nTEE_DATA_FLAG_ACCESS_READ 0x00000001\nTEE_DATA_FLAG_ACCESS_WRITE 0x00000002\nTEE_DATA_FLAG_ACCESS_WRITE_META 0x00000004\nTEE_DATA_FLAG_SHARE_READ 0x00000010\nTEE_DATA_FLAG_SHARE_WRITE 0x00000020\nTEE_DATA_FLAG_OVERWRITE 0x00000400\nTEE_DATA_FLAG_EXCLUSIVE 0x00000400\n(deprecated, replace with TEE_DATA_FLAG_OVERWRITE)\nSet bits reserved for use by GlobalPlatform 0x007FF800\nTEE_DATA_FLAG_ILLEGAL_VALUE 0x00800000\nSet bits reserved for implementation defined flags 0xFF000000\nTEE_DATA_FLAG_ILLEGAL_VALUE is reserved for testing and validation and SHALL be treated as an\nundefined value when provided to the TEE_OpenPersistentObject or TEE_CreatePersistentObject\nfunction.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 129,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.4 Constants",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "130 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nTable 5-4: Usage Constants\nConstant Name Value\nTEE_USAGE_EXTRACTABLE 0x00000001\nTEE_USAGE_ENCRYPT 0x00000002\nTEE_USAGE_DECRYPT 0x00000004\nTEE_USAGE_MAC 0x00000008\nTEE_USAGE_SIGN 0x00000010\nTEE_USAGE_VERIFY 0x00000020\nTEE_USAGE_DERIVE 0x00000040\nSet bits reserved for use by GlobalPlatform 0x007FFF80\nTEE_USAGE_ILLEGAL_VALUE 0x00800000\nSet bits reserved for implementation defined flags 0xFF000000\nTEE_USAGE_ILLEGAL_VALUE is reserved for testing and validation and SHALL be treated as an undefined\nvalue when provided to the TEE_RestrictObjectUsage1 or TEE_GetObjectInfo1 function.\nTable 5-4b: Miscellaneous Constants [formerly Table 5-8]\nConstant Name Value\nTEE_DATA_MAX_POSITION 0xFFFFFFFF\nTEE_OBJECT_ID_MAX_LEN 64\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 130,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 130",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 131 / 375\n5.4.2 Constants Used in Cryptographic Operations API\nThe following tables pertain to the Cryptographic Operations API (section 6).\nTable 5-5: Handle Flag Constants\nConstant Name Value\nSet bits reserved for implementation defined flags 0x0000FFFF\nTEE_HANDLE_FLAG_PERSISTENT 0x00010000\nTEE_HANDLE_FLAG_INITIALIZED 0x00020000\nTEE_HANDLE_FLAG_KEY_SET 0x00040000\nTEE_HANDLE_FLAG_EXPECT_TWO_KEYS 0x00080000\nTEE_HANDLE_FLAG_EXTRACTING 0x00100000\nSet bits reserved for use by GlobalPlatform 0xFFE00000\nTable 5-6: Operation Constants\nConstant Name Value\nTEE_OPERATION_CIPHER 1\nTEE_OPERATION_MAC 3\nTEE_OPERATION_AE 4\nTEE_OPERATION_DIGEST 5\nTEE_OPERATION_ASYMMETRIC_CIPHER 6\nTEE_OPERATION_ASYMMETRIC_SIGNATURE 7\nTEE_OPERATION_KEY_DERIVATION 8\nReserved for future use 0x00000009-0x7FFFFFFF\nImplementation defined 0x80000000-0xFFFFFFFF\nTable 5-7: Operation States\nConstant Name Value\nTEE_OPERATION_STATE_INITIAL 0x00000000\nTEE_OPERATION_STATE_ACTIVE 0x00000001\nTEE_OPERATION_STATE_EXTRACTING 0x00000002\nReserved for future use 0x00000003-0x7FFFFFFF\nImplementation defined 0x80000000-0xFFFFFFFF\nTable 5-8: [moved – now Table 5-4b]\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 131,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.4.2 Constants Used in Cryptographic Operations API",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "132 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n5.5 Generic Object Functions\nThese functions can be called on both transient and persistent object handles.\n5.5.1 TEE_GetObjectInfo1\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_GetObjectInfo1(\nTEE_ObjectHandle object,\n[out] TEE_ObjectInfo* objectInfo );\nDescription\nThis function replaces the TEE_GetObjectInfo function, whose use is deprecated.\nThe TEE_GetObjectInfo1 function returns the characteristics of an object. It fills in the following fields in\nthe structure TEE_ObjectInfo (section 5.3.2):\n• objectType: The parameter objectType passed when the object was created\n• objectSize: The current size in bits of the object as determined by its attributes. This will always be\nless than or equal to maxObjectSize. Set to 0 for uninitialized and data only objects.\n• maxObjectSize: The maximum objectSize which this object can represent.\nFor a persistent object, set to objectSize\no\nFor a transient object, set to the parameter maxObjectSize passed to\no\nTEE_AllocateTransientObject\n• objectUsage: A bit vector of the TEE_USAGE_XXX bits defined in Table 5-4.\n• dataSize\nFor a persistent object, set to the current size of the data associated with the object\no\nFor a transient object, always set to 0\no\n• dataPosition\nFor a persistent object, set to the current position in the data for this handle. Data positions for\no\ndifferent handles on the same object may differ.\nFor a transient object, set to 0\no\n• handleFlags: A bit vector containing one or more of the following flags:\nTEE_HANDLE_FLAG_PERSISTENT: Set for a persistent object\no\nTEE_HANDLE_FLAG_INITIALIZED\no\n For a persistent object, always set\n For a transient object, initially cleared, then set when the object becomes initialized\nTEE_DATA_FLAG_XXX: Only for persistent objects, the flags used to open or create the object\no\nParameters\n• object: Handle of the object\n• objectInfo: Pointer to a structure filled with the object information\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 132,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.5 Generic Object Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetObjectInfo1,TEE_ObjectInfo",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 133 / 375\nSpecification Number: 10 Function Number: 0x706\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_CORRUPT_OBJECT: If the persistent object is corrupt. The object handle SHALL behave\nbased on the gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nPanic Reasons\n• If object is not a valid opened object handle.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nPrior to TEE Internal Core API v1.3, the behavior associated with the return code\nTEE_ERROR_CORRUPT_OBJECT resulted in the object handle always being closed.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 133,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 133",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "134 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n5.5.2 TEE_RestrictObjectUsage1\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_RestrictObjectUsage1(\nTEE_ObjectHandle object,\nuint32_t objectUsage );\nDescription\nThis function replaces the TEE_RestrictObjectUsage function, whose use is deprecated.\nThe TEE_RestrictObjectUsage1 function restricts the object usage flags of an object handle to contain at\nmost the flags passed in the objectUsage parameter.\nFor each bit in the parameter objectUsage:\n• If the bit is set to 1, the corresponding usage flag in the object is left unchanged.\n• If the bit is set to 0, the corresponding usage flag in the object is cleared.\nFor example, if the usage flags of the object are set to TEE_USAGE_ENCRYPT | TEE_USAGE_DECRYPT and\nif objectUsage is set to TEE_USAGE_ENCRYPT | TEE_USAGE_EXTRACTABLE, then the only remaining\nusage flag in the object after calling the function TEE_RestrictObjectUsage1 is TEE_USAGE_ENCRYPT.\nNote that an object usage flag can only be cleared. Once it is cleared, it cannot be set to 1 again on a persistent\nobject.\nA transient object’s object usage flags are reset to 1 using the TEE_ResetTransientObject function.\nFor a persistent object, setting the object usage SHALL be an atomic operation.\nParameters\n• object: Handle on an object\n• objectUsage: New object usage, an OR combination of one or more of the TEE_USAGE_XXX\nconstants defined in Table 5-4\nSpecification Number: 10 Function Number: 0x707\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_CORRUPT_OBJECT: If the persistent object is corrupt. The object handle SHALL behave\nbased on the gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nPanic Reasons\n• If object is not a valid opened object handle.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nPrior to TEE Internal Core API v1.3, the behavior associated with the return code\nTEE_ERROR_CORRUPT_OBJECT resulted in the object handle always being closed.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 134,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.5.2 TEE_RestrictObjectUsage1",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_RestrictObjectUsage1",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 135 / 375\n5.5.3 TEE_GetObjectBufferAttribute\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_GetObjectBufferAttribute(\nTEE_ObjectHandle object,\nuint32_t attributeID,\n[outbuf] void* buffer, size_t* size );\nDescription\nThe TEE_GetObjectBufferAttribute function extracts one buffer attribute from an object.\nThe attribute is identified by the argument attributeID. The precise meaning of this parameter depends on\nthe container type and size and is defined in section 6.1.1.\nBit [29] of the attribute identifier SHALL be set to 0; i.e. it SHALL denote a buffer attribute.\nThere are two kinds of object attributes, which are identified by a bit in their handle value (see Table 6-17):\n• Public object attributes can always be extracted whatever the status of the container.\n• Protected attributes can be extracted only if the object’s key usage contains the\nTEE_USAGE_EXTRACTABLE flag.\nSee section 6.1.1 for a definition of all available object attributes, their formats, and their level of protection.\nNote: It is recommended that TA writers do not rely on implementations stripping leading zeros from bignum\nattributes and check actual key size using the TEE_GetObjectInfo1 function. However, calling\nTEE_GetObjectBufferAttribute with a NULL buffer will trigger a TEE_ERROR_SHORT_BUFFER return\nvalue (see section 3.4.4) and is guaranteed to return a size sufficient to hold the attribute.\nParameters\n• object: Handle of the object\n• attributeID: Identifier of the attribute to retrieve\n• buffer, size: Output buffer to get the content of the attribute\nSpecification Number: 10 Function Number: 0x702\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the attribute is not found on this object\n• TEE_ERROR_SHORT_BUFFER: If buffer is NULL or too small to contain the key part\n• TEE_ERROR_CORRUPT_OBJECT: If the persistent object is corrupt. The object handle SHALL behave\nbased on the gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nPanic Reasons\n• If object is not a valid opened object handle.\n• If the object is not initialized.\n• If Bit [29] of attributeID is not set to 0, so the attribute is not a buffer attribute.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 135,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.5.3 TEE_GetObjectBufferAttribute",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetObjectBufferAttribute",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "136 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n• If Bit [28] of attributeID is set to 0, denoting a protected attribute, and the object usage does not\ncontain the TEE_USAGE_EXTRACTABLE flag.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for size.\nPrior to TEE Internal Core API v1.3, the behavior associated with the return code\nTEE_ERROR_CORRUPT_OBJECT resulted in the object handle always being closed.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 136,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 136",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 137 / 375\n5.5.4 TEE_GetObjectValueAttribute\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_GetObjectValueAttribute(\nTEE_ObjectHandle object,\nuint32_t attributeID,\n[outopt] uint32_t* a,\n[outopt] uint32_t* b );\nDescription\nThe TEE_GetObjectValueAttribute function extracts a value attribute from an object.\nThe attribute is identified by the argument attributeID. The precise meaning of this parameter depends on\nthe container type and size and is defined in section 6.1.1.\nBit [29] of the attribute identifier SHALL be set to 1, i.e. it SHALL denote a value attribute.\nThey are two kinds of object attributes, which are identified by a bit in their handle value (see Table 6-17):\n• Public object attributes can always be extracted whatever the status of the container.\n• Protected attributes can be extracted only if the object’s key usage contains the\nTEE_USAGE_EXTRACTABLE flag.\nSee section 6.1.1 for a definition of all available object attributes and their level of protection.\nWhere the format of the attribute (see Table 6-16) does not define a meaning for b, the value returned for b\nis implementation defined.\nParameters\n• object: Handle of the object\n• attributeID: Identifier of the attribute to retrieve\n• a, b: Pointers on the placeholders filled with the attribute fields a and b. Each can be NULL if the\ncorresponding field is not of interest to the caller.\nSpecification Number: 10 Function Number: 0x704\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the attribute is not found on this object\n• TEE_ERROR_ACCESS_DENIED: Deprecated: Handled by a Panic\n• TEE_ERROR_CORRUPT_OBJECT: If the persistent object is corrupt. The object handle SHALL behave\nbased on the gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nPanic Reasons\n• If object is not a valid opened object handle.\n• If the object is not initialized.\n• If Bit [29] of attributeID is not set to 1, so the attribute is not a value attribute.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 137,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.5.4 TEE_GetObjectValueAttribute",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetObjectValueAttribute",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "138 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n• If Bit [28] of attributeID is set to 0, denoting a protected attribute, and the object usage does not\ncontain the TEE_USAGE_EXTRACTABLE flag.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nPrior to TEE Internal Core API v1.3, the behavior associated with the return code\nTEE_ERROR_CORRUPT_OBJECT resulted in the object handle always being closed.\n5.5.5 TEE_CloseObject\nSince: TEE Internal API v1.0\nvoid TEE_CloseObject( TEE_ObjectHandle object );\nDescription\nThe TEE_CloseObject function closes an opened object handle. The object can be persistent or transient.\nFor transient objects, TEE_CloseObject is equivalent to TEE_FreeTransientObject.\nThis function will operate correctly even if the object or the containing storage is corrupt.\nParameters\n• object: Handle on the object to close. If set to TEE_HANDLE_NULL, does nothing.\nSpecification Number: 10 Function Number: 0x701\nPanic Reasons\n• If object is not a valid opened object handle and is not equal to TEE_HANDLE_NULL.\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 138,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.5.5 TEE_CloseObject",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CloseObject",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 139 / 375\n5.6 Transient Object Functions\n5.6.1 TEE_AllocateTransientObject\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_AllocateTransientObject(\nuint32_t objectType,\nuint32_t maxObjectSize,\n[out] TEE_ObjectHandle* object );\nDescription\nThe TEE_AllocateTransientObject function allocates an uninitialized transient object, i.e. a container\nfor attributes. Transient objects are used to hold a cryptographic object (key or key-pair).\nThe object type SHALL be specified. The maximum key size SHALL also be specified with all of the object\ntypes defined in Table 5-9.\nThe value TEE_KEYSIZE_NO_KEY SHOULD be used for maxObjectSize for object types that do not require\na key so that all the container resources can be pre-allocated. For backward compatibility reasons, a Trusted\nOS SHALL treat object types that are not defined in Table 5-9 as though they require TEE_KEYSIZE_NO_KEY.\nAs allocated, the container is uninitialized. It can be initialized by subsequently importing the object material,\ngenerating an object, deriving an object, or loading an object from the Trusted Storage.\nThe initial value of the key usage associated with the container is 0xFFFFFFFF, which means that it contains\nall usage flags. You can use the function TEE_RestrictObjectUsage1 to restrict the usage of the container.\nThe returned handle is used to refer to the newly-created container in all subsequent functions that require an\nobject container: key management and operation functions. The handle remains valid until the container is\ndeallocated using the function TEE_FreeTransientObject.\nAs shown in Table 5-9, the object type determines the possible object size to be passed to\nTEE_AllocateTransientObject, which is not necessarily the size of the object to allocate. In particular, for\nkey objects the size to be passed is one of the appropriate key sizes described in Table 5-9.\nA compliant implementation SHALL implement all object types and key sizes as described in Table 5-9.\nTable 5-9: TEE_AllocateTransientObject Object Types and Key Sizes 4\nObject Type Possible Key Sizes\nTEE_TYPE_AES 128, 192, or 256 bits\nTEE_TYPE_DES Always 64 bits including the parity bits. This gives an effective key\nsize of 56 bits\nTEE_TYPE_DES3 128 or 192 bits including the parity bits. This gives effective key\nsizes of 112 or 168 bits\n4 WARNING: Given the increases in computing power, it is necessary to increase the strength of encryption used with\ntime. Many of the algorithms and key sizes included are known to be weak and are included to support legacy\nimplementations only. TA designers should regularly review the choice of cryptographic primitives and key sizes used\nin their applications and should refer to GlobalPlatform recommendations ([Crypto Rec]) and appropriate government\nguidelines.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 139,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.6 Transient Object Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AllocateTransientObject",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "140 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nObject Type Possible Key Sizes\nTEE_TYPE_HMAC_MD5 Between 64 and 512 bits, multiple of 8 bits\nTEE_TYPE_HMAC_SHA1 Between 80 and 512 bits, multiple of 8 bits\nTEE_TYPE_HMAC_SHA224 Between 112 and 512 bits, multiple of 8 bits\nTEE_TYPE_HMAC_SHA256 Between 192 and 1024 bits, multiple of 8 bits\nTEE_TYPE_HMAC_SHA384 Between 256 and 1024 bits, multiple of 8 bits\nTEE_TYPE_HMAC_SHA512 Between 256 and 1024 bits, multiple of 8 bits\nTEE_TYPE_HMAC_SHA3_224 Between 192 and 1024 bits, multiple of 8 bits\nTEE_TYPE_HMAC_SHA3_256 Between 256 and 1024 bits, multiple of 8 bits\nTEE_TYPE_HMAC_SHA3_384 Between 256 and 1024 bits, multiple of 8 bits\nTEE_TYPE_HMAC_SHA3_512 Between 256 and 1024 bits, multiple of 8 bits\nTEE_TYPE_RSA_PUBLIC_KEY The number of bits in the modulus.\n256, 512, 768, 1024, 1536, 2048, 3072, and 4096 bit keys SHALL\nbe supported. Support for other key sizes including bigger key sizes\nis implementation dependent. Minimum key size is 256 bits.\nTEE_TYPE_RSA_KEYPAIR Same as for RSA public key size.\nTEE_TYPE_DSA_PUBLIC_KEY Depends on algorithm:\nTEE_ALG_DSA_SHA1 Between 512 and 1024 bits,\nmultiple of 64 bits\nTEE_ALG_DSA_SHA224 2048 bits\nTEE_ALG_DSA_SHA256 2048 or 3072 bits\nTEE_ALG_DSA_SHA3_224 2048 or 3072 bits\nTEE_ALG_DSA_SHA3_256 2048 or 3072 bits\nTEE_ALG_DSA_SHA3_384 2048 or 3072 bits\nTEE_ALG_DSA_SHA3_512 2048 or 3072 bits\nTEE_TYPE_DSA_KEYPAIR Same as for DSA public key size.\nTEE_TYPE_DH_KEYPAIR From 256 to 2048 bits, multiple of 8 bits.\nTEE_TYPE_ECDSA_PUBLIC_KEY Between 160 and 521 bits. Conditional: Available only if at least\none of the ECC curves defined in Table 6-14 with \"generic\" equal to\n\"Y\" is supported.\nTEE_TYPE_ECDSA_KEYPAIR Between 160 and 521 bits. Conditional: Available only if at least\none of the ECC curves defined in Table 6-14 with \"generic\" equal to\n\"Y\" is supported. SHALL be same value as for ECDSA public key\nsize (for values, see Table 6-14).\nTEE_TYPE_ECDH_PUBLIC_KEY Between 160 and 521 bits. Conditional: Available only if at least\none of the ECC curves defined in Table 6-14 with \"generic\" equal to\n\"Y\" is supported.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 140,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 140",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 141 / 375\nObject Type Possible Key Sizes\nTEE_TYPE_ECDH_KEYPAIR Between 160 and 521 bits. Conditional: Available only if at least\none of the ECC curves defined in Table 6-14 with \"generic\" equal to\n\"Y\" is supported. SHALL be same value as for ECDH public key size\n(for values, see Table 6-14).\nTEE_TYPE_ED25519_PUBLIC_KEY 256 bits. Conditional: Available only if TEE_ECC_CURVE_25519\ndefined in Table 6-14 is supported.\nTEE_TYPE_ED25519_KEYPAIR\nTEE_TYPE_X25519_PUBLIC_KEY\nTEE_TYPE_X25519_KEYPAIR\nTEE_TYPE_ED448_PUBLIC_KEY 448 bits. Conditional: Available only if TEE_ECC_CURVE_448\ndefined in Table 6-14 is supported.\nTEE_TYPE_ED448_KEYPAIR\nTEE_TYPE_X448_PUBLIC_KEY\nTEE_TYPE_X448_KEYPAIR\nTEE_TYPE_SM2_DSA_PUBLIC_KEY 256 bits. Conditional: Available only if TEE_ECC_CURVE_SM2\ndefined in Table 6-14 is supported.\nTEE_TYPE_SM2_DSA_KEYPAIR\nTEE_TYPE_SM2_KEP_PUBLIC_KEY\nTEE_TYPE_SM2_KEP_KEYPAIR\nTEE_TYPE_SM2_PKE_PUBLIC_KEY\nTEE_TYPE_SM2_PKE_KEYPAIR\nTEE_TYPE_SM4 128 bits. Conditional: Available only if TEE_ECC_CURVE_SM2 is\nsupported.\nTEE_TYPE_HMAC_SM3 Between 80 and 1024 bits, multiple of 8 bits. Conditional: Available\nonly if TEE_ECC_CURVE_SM2 is supported.\nTEE_TYPE_GENERIC_SECRET Multiple of 8 bits, up to 4096 bits. This type is intended for secret\ndata that has been derived from a key derivation scheme.\nParameters\n• objectType: Type of uninitialized object container to be created (see Table 6-13).\n• maxObjectSize: Key Size of the object. Valid values depend on the object type and are defined in\nTable 5-9 above.\n• object: Filled with a handle on the newly created key container\nSpecification Number: 10 Function Number: 0x801\nReturn Code\n• TEE_SUCCESS: On success.\n• TEE_ERROR_OUT_OF_MEMORY: If not enough resources are available to allocate the object handle\n• TEE_ERROR_NOT_SUPPORTED: If the key size is not supported or the object type is not supported.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 141,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 141",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "142 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nBackward Compatibility\nPrior to TEE Internal Core API v1.3, object type TEE_TYPE_DATA was included in Table 5-9, erroneously\nindicating that TEE_AllocateTransientObject could be used to allocate an object of that type.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 142,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 142",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 143 / 375\n5.6.2 TEE_FreeTransientObject\nSince: TEE Internal API v1.0\nvoid TEE_FreeTransientObject(\nTEE_ObjectHandle object );\nDescription\nThe TEE_FreeTransientObject function deallocates a transient object previously allocated with\nTEE_AllocateTransientObject. After this function has been called, the object handle is no longer valid\nand all resources associated with the transient object SHALL have been reclaimed.\nIf the object is initialized, the object attributes are cleared before the object is deallocated.\nThis function does nothing if object is TEE_HANDLE_NULL.\nParameters\n• object: Handle on the object to free\nSpecification Number: 10 Function Number: 0x803\nPanic Reasons\n• If object is not a valid opened object handle and is not equal to TEE_HANDLE_NULL.\n• If the implementation detects any other error.\n5.6.3 TEE_ResetTransientObject\nSince: TEE Internal API v1.0\nvoid TEE_ResetTransientObject(\nTEE_ObjectHandle object );\nDescription\nThe TEE_ResetTransientObject function resets a transient object to its initial state after allocation.\nIf the object is currently initialized, the function clears the object of all its material. The object is then uninitialized\nagain.\nIn any case, the function resets the key usage of the container to 0xFFFFFFFFF.\nThis function does nothing if object is set to TEE_HANDLE_NULL.\nParameters\n• object: Handle on a transient object to reset\nSpecification Number: 10 Function Number: 0x808\nPanic Reasons\n• If object is not a valid opened object handle and is not equal to TEE_HANDLE_NULL.\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 143,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.6.2 TEE_FreeTransientObject",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_FreeTransientObject,TEE_ResetTransientObject",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "144 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n5.6.4 TEE_PopulateTransientObject\nSince: TEE Internal API v1.0\nTEE_Result TEE_PopulateTransientObject(\nTEE_ObjectHandle object,\n[in] TEE_Attribute* attrs, uint32_t attrCount );\nDescription\nThe TEE_PopulateTransientObject function populates an uninitialized object container with object\nattributes passed by the TA in the attrs parameter.\nWhen this function is called, the object SHALL be uninitialized. If the object is initialized, the caller SHALL first\nclear it using the function TEE_ResetTransientObject.\nNote that if the object type is a key-pair, then this function sets both the private and public attributes of the key-\npair.\nAs shown in the following table, the interpretation of the attrs parameter depends on the object type. The\nvalues of all attributes are copied into the object so that the attrs array and all the memory buffers it points\nto may be freed after this routine returns without affecting the object.\nTable 5-10: TEE_PopulateTransientObject Supported Attributes\nObject Type Attributes\nTEE_TYPE_AES For all secret key objects, the TEE_ATTR_SECRET_VALUE SHALL\nbe provided.\nTEE_TYPE_DES\nFor TEE_TYPE_DES and TEE_TYPE_DES3, the buffer associated\nTEE_TYPE_DES3\nwith this attribute SHALL include parity bits.\nTEE_TYPE_SM4\nThese object types are collectively known as the ‘Simple Symmetric\nTEE_TYPE_HMAC_MD5 Key Types’.\nTEE_TYPE_HMAC_SHA1\nTEE_TYPE_HMAC_SHA224\nTEE_TYPE_HMAC_SHA256\nTEE_TYPE_HMAC_SHA384\nTEE_TYPE_HMAC_SHA512\nTEE_TYPE_HMAC_SHA3_224\nTEE_TYPE_HMAC_SHA3_256\nTEE_TYPE_HMAC_SHA3_384\nTEE_TYPE_HMAC_SHA3_512\nTEE_TYPE_HMAC_SM3\nTEE_TYPE_GENERIC_SECRET\nTEE_TYPE_RSA_PUBLIC_KEY The following attributes SHALL be provided:\nTEE_ATTR_RSA_MODULUS\nTEE_ATTR_RSA_PUBLIC_EXPONENT\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 144,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.6.4 TEE_PopulateTransientObject",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_PopulateTransientObject",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 145 / 375\nObject Type Attributes\nTEE_TYPE_RSA_KEYPAIR The following attributes SHALL be provided:\nTEE_ATTR_RSA_MODULUS\nTEE_ATTR_RSA_PUBLIC_EXPONENT\nTEE_ATTR_RSA_PRIVATE_EXPONENT\nThe CRT parameters are optional. If any of these attributes is\nprovided, then all of them SHALL be provided:\nTEE_ATTR_RSA_PRIME1\nTEE_ATTR_RSA_PRIME2\nTEE_ATTR_RSA_EXPONENT1\nTEE_ATTR_RSA_EXPONENT2\nTEE_ATTR_RSA_COEFFICIENT\nTEE_TYPE_ECDSA_PUBLIC_KEY Conditional: If ECC is supported, then the following attributes\nSHALL be provided:\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_ATTR_ECC_CURVE\nTEE_TYPE_ECDSA_KEYPAIR Conditional: If ECC is supported, then the following attributes\nSHALL be provided:\nTEE_ATTR_ECC_PRIVATE_VALUE\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_ATTR_ECC_CURVE\nTEE_TYPE_ECDH_PUBLIC_KEY Conditional: If ECC is supported, then the following attributes\nSHALL be provided:\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_ATTR_ECC_CURVE\nTEE_TYPE_ECDH_KEYPAIR Conditional: If ECC is supported, then the following attributes\nSHALL be provided:\nTEE_ATTR_ECC_PRIVATE_VALUE\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_ATTR_ECC_CURVE\nTEE_TYPE_DSA_PUBLIC_KEY The following attributes SHALL be provided:\nTEE_ATTR_DSA_PRIME\nTEE_ATTR_DSA_SUBPRIME\nTEE_ATTR_DSA_BASE\nTEE_ATTR_DSA_PUBLIC_VALUE\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 145,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 145",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "146 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nObject Type Attributes\nTEE_TYPE_DSA_KEYPAIR The following attributes SHALL be provided:\nTEE_ATTR_DSA_PRIME\nTEE_ATTR_DSA_SUBPRIME\nTEE_ATTR_DSA_BASE\nTEE_ATTR_DSA_PRIVATE_VALUE\nTEE_ATTR_DSA_PUBLIC_VALUE\nTEE_TYPE_DH_KEYPAIR The following attributes SHALL be provided:\nTEE_ATTR_DH_PRIME\nTEE_ATTR_DH_BASE\nTEE_ATTR_DH_PUBLIC_VALUE\nTEE_ATTR_DH_PRIVATE_VALUE\nThe following parameters can optionally be passed:\nTEE_ATTR_DH_SUBPRIME (q)\nIf present, constrains the private value x to be in the range\n[2, q-2], and a mismatch will cause a\nTEE_ERROR_BAD_PARAMETERS error.\nTEE_ATTR_DH_X_BITS (l)\nIf present, constrains the private value x to have l bits, and a\nmismatch will cause a TEE_ERROR_BAD_PARAMETERS error.\nIf neither of these optional parts is specified, then the only constraint\non x is that it is less than p-1.\nTEE_TYPE_ED25519_PUBLIC_KEY Conditional: If TEE_ECC_CURVE_25519 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_ED25519_PUBLIC_VALUE\nTEE_TYPE_ED25519_KEYPAIR Conditional: If TEE_ECC_CURVE_25519 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_ED25519_PUBLIC_VALUE\nTEE_ATTR_ED25519_PRIVATE_VALUE\nTEE_TYPE_X25519_PUBLIC_KEY Conditional: If TEE_ECC_CURVE_25519 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_X25519_PUBLIC_VALUE\nTEE_TYPE_X25519_KEYPAIR Conditional: If TEE_ECC_CURVE_25519 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_X25519_PUBLIC_VALUE\nTEE_ATTR_X25519_PRIVATE_VALUE\nTEE_TYPE_ED448_PUBLIC_KEY Conditional: If TEE_ECC_CURVE_448 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_ED448_PUBLIC_VALUE\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 146,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 146",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_ATTR_DH_SUBPRIME,TEE_ATTR_DH_X_BITS",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 147 / 375\nObject Type Attributes\nTEE_TYPE_ED448_KEYPAIR Conditional: If TEE_ECC_CURVE_448 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_ED448_PUBLIC_VALUE\nTEE_ATTR_ED448_PRIVATE_VALUE\nTEE_TYPE_X448_PUBLIC_KEY Conditional: If TEE_ECC_CURVE_448 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_X448_PUBLIC_VALUE\nTEE_TYPE_X448_KEYPAIR Conditional: If TEE_ECC_CURVE_448 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_X448_PUBLIC_VALUE\nTEE_ATTR_X448_PRIVATE_VALUE\nTEE_TYPE_SM2_DSA_PUBLIC_KEY Conditional: if TEE_ECC_CURVE_SM2 is supported, then the\nfollowing attributes SHALL be provided (each 32 bytes):\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_TYPE_SM2_DSA_KEYPAIR Conditional: if TEE_ECC_CURVE_SM2 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_ECC_PRIVATE_VALUE\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_TYPE_SM2_KEP_PUBLIC_KEY Conditional: if TEE_ECC_CURVE_SM2 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_TYPE_SM2_KEP_KEYPAIR Conditional: if TEE_ECC_CURVE_SM2 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_ECC_PRIVATE_VALUE\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_TYPE_SM2_PKE_PUBLIC_KEY Conditional: if TEE_ECC_CURVE_SM2 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_TYPE_SM2_PKE_KEYPAIR Conditional: if TEE_ECC_CURVE_SM2 is supported, then the\nfollowing attributes SHALL be provided:\nTEE_ATTR_ECC_PRIVATE_VALUE\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 147,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 147",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "148 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nAll mandatory attributes SHALL be specified; otherwise the routine will panic.\nIf attribute values are larger than the maximum size specified when the object was created, the implementation\nSHALL panic.\nThe implementation can attempt to detect whether the attribute values are consistent; for example, if the\nnumbers supposed to be prime are indeed prime. However, it is not required to do these checks fully and\nreliably. If it detects invalid attributes, it SHALL return the error code TEE_ERROR_BAD_PARAMETERS and\nSHALL NOT panic. If it does not detect any inconsistencies, it SHALL be able to later proceed with all\noperations associated with the object without error. In this case, it is not required to make sensible\ncomputations, but all computations SHALL terminate and output some result.\nOnly the attributes specified in Table 5-10 associated with the object’s type are valid. The presence of any\nother attribute in the attribute list is an error and will cause the routine to panic.\nParameters\n• object: Handle on an already created transient and uninitialized object\n• attrs, attrCount: Array of object attributes\nSpecification Number: 10 Function Number: 0x807\nReturn Code\n• TEE_SUCCESS: In case of success. In this case, the content of the object SHALL be initialized.\n• TEE_ERROR_BAD_PARAMETERS: If an incorrect or inconsistent attribute value is detected. In this case,\nthe content of the object SHALL remain uninitialized.\nPanic Reasons\n• If object is not a valid opened object handle that is transient and uninitialized.\n• If some mandatory attribute is missing.\n• If attrs includes an attribute that is not defined for the object’s type.\n• If an attribute value is too big to fit within the maximum object size specified when the object was\ncreated.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 148,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 148",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 149 / 375\n5.6.5 TEE_InitRefAttribute, TEE_InitValueAttribute\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nvoid TEE_InitRefAttribute(\n[out] TEE_Attribute* attr,\nuint32_t attributeID,\n[inbuf] void* buffer, size_t length );\nvoid TEE_InitValueAttribute(\n[out] TEE_Attribute* attr,\nuint32_t attributeID,\nuint32_t a,\nuint32_t b );\nDescription\nThe TEE_InitRefAttribute and TEE_InitValueAttribute helper functions can be used to populate\na single attribute either with a reference to a buffer or with integer values.\nFor example, the following code can be used to initialize a DH key generation:\nTEE_Attribute attrs[3];\nTEE_InitRefAttribute(&attrs[0], TEE_ATTR_DH_PRIME, &p, len);\nTEE_InitRefAttribute(&attrs[1], TEE_ATTR_DH_BASE, &g, len);\nTEE_InitValueAttribute(&attrs[2], TEE_ATTR_DH_X_BITS, xBits, 0);\nTEE_GenerateKey(key, 1024, attrs, sizeof(attrs)/sizeof(TEE_Attribute));\nNote that in the case of TEE_InitRefAttribute, only the buffer pointer is copied, not the content of the\nbuffer. This means that the attribute structure maintains a pointer back to the supplied buffer. It is the\nresponsibility of the TA author to ensure that the contents of the buffer maintain their value until the attributes\narray is no longer in use.\nParameters\n• attr: attribute structure (defined in section 5.3.1) to initialize\n• attributeID: Identifier of the attribute to populate, defined in section 6.1.1\n• buffer, length: Input buffer that holds the content of the attribute. Assigned to the corresponding\nmembers of the attribute structure defined in section 5.3.1.\n• a: unsigned integer value to assign to the a member of the attribute structure defined in\nsection 5.3.1\n• b: unsigned integer value to assign to the b member of the attribute structure defined in\nsection 5.3.1\nTEE_InitRefAttribute: Specification Number: 10 Function Number: 0x805\nTEE_InitValueAttribute: Specification Number: 10 Function Number: 0x806\nPanic Reasons\n• If Bit [29] of attributeID describing whether the attribute identifier is a value or reference (as\ndiscussed in Table 6-17) is not consistent with the function.\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 149,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.6.5 TEE_InitRefAttribute, TEE_InitValueAttribute",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GenerateKey,TEE_InitRefAttribute,TEE_InitValueAttribute",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "150 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for length.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 150,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 150",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 151 / 375\n5.6.6 TEE_CopyObjectAttributes1\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_CopyObjectAttributes1(\nTEE_ObjectHandle destObject,\nTEE_ObjectHandle srcObject );\nDescription\nThis function replaces the TEE_CopyObjectAttributes function, whose use is deprecated.\nThe TEE_CopyObjectAttributes1 function populates an uninitialized object handle with the attributes of\nanother object handle; that is, it populates the attributes of destObject with the attributes of srcObject.\nIt is most useful in the following situations:\n• To extract the public key attributes from a key-pair object\n• To copy the attributes from a persistent object into a transient object\ndestObject SHALL refer to an uninitialized object handle and SHALL therefore be a transient object.\nThe source and destination objects SHALL have compatible types and sizes in the following sense:\n• The type of destObject SHALL be a subtype of srcObject, i.e. one of the conditions listed in the\nfollowing table SHALL be true.\nTable 5-11: TEE_CopyObjectAttributes1 Parameter Types\nType of srcObject Type of destObject\nAny Equal to type of srcObject\nTEE_TYPE_RSA_KEYPAIR TEE_TYPE_RSA_PUBLIC_KEY\nTEE_TYPE_DSA_KEYPAIR TEE_TYPE_DSA_PUBLIC_KEY\nTEE_TYPE_ECDSA_KEYPAIR (optional) TEE_TYPE_ECDSA_PUBLIC_KEY (optional)\nTEE_TYPE_ECDH_KEYPAIR (optional) TEE_TYPE_ECDH_PUBLIC_KEY (optional)\nTEE_TYPE_ED25519_KEYPAIR (optional) TEE_TYPE_ED25519_PUBLIC_KEY (optional)\nTEE_TYPE_X25519_KEYPAIR (optional) TEE_TYPE_X25519_PUBLIC_KEY (optional)\nTEE_TYPE_ED448_KEYPAIR (optional) TEE_TYPE_ED448_PUBLIC_KEY (optional)\nTEE_TYPE_X448_KEYPAIR (optional) TEE_TYPE_X448_PUBLIC_KEY (optional)\nTEE_TYPE_SM2_DSA_KEYPAIR (optional) TEE_TYPE_SM2_DSA_PUBLIC_KEY (optional)\nTEE_TYPE_SM2_KEP_KEYPAIR (optional) TEE_TYPE_SM2_KEP_PUBLIC_KEY (optional)\nTEE_TYPE_SM2_PKE_KEYPAIR (optional) TEE_TYPE_SM2_PKE_PUBLIC_KEY (optional)\n• The size of srcObject SHALL be less than or equal to the maximum size of destObject.\nThe effect of this function on destObject is identical to the function TEE_PopulateTransientObject\nexcept that the attributes are taken from srcObject instead of from parameters.\nThe object usage of destObject is set to the bitwise AND of the current object usage of destObject and\nthe object usage of srcObject.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 151,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.6.6 TEE_CopyObjectAttributes1",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CopyObjectAttributes1,TEE_TYPE_ECDH_KEYPAIR,TEE_TYPE_ECDH_PUBLIC_KEY,TEE_TYPE_ECDSA_KEYPAIR,TEE_TYPE_ECDSA_PUBLIC_KEY,TEE_TYPE_ED25519_KEYPAIR,TEE_TYPE_ED25519_PUBLIC_KEY,TEE_TYPE_ED448_KEYPAIR,TEE_TYPE_ED448_PUBLIC_KEY,TEE_TYPE_SM2_DSA_KEYPAIR,TEE_TYPE_SM2_DSA_PUBLIC_KEY,TEE_TYPE_SM2_KEP_KEYPAIR,TEE_TYPE_SM2_KEP_PUBLIC_KEY,TEE_TYPE_SM2_PKE_KEYPAIR,TEE_TYPE_SM2_PKE_PUBLIC_KEY,TEE_TYPE_X25519_KEYPAIR,TEE_TYPE_X25519_PUBLIC_KEY,TEE_TYPE_X448_KEYPAIR,TEE_TYPE_X448_PUBLIC_KEY",
          "has_api_definitions": true,
          "api_count": 19
        }
      },
      {
        "page_content": "152 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nParameters\n• destObject: Handle on an uninitialized transient object\n• srcObject: Handle on an initialized object\nSpecification Number: 10 Function Number: 0x809\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_CORRUPT_OBJECT: If the persistent object is corrupt. The object handle SHALL behave\nbased on the gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nPanic Reasons\n• If srcObject is not initialized.\n• If destObject is initialized.\n• If the type and size of srcObject and destObject are not compatible.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.2 and v1.2.1 specified [in] and [out] annotations, now deleted.\nPrior to TEE Internal Core API v1.3, the behavior associated with the return code\nTEE_ERROR_CORRUPT_OBJECT resulted in the object handle always being closed.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 152,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 152",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 153 / 375\n5.6.7 TEE_GenerateKey\nSince: TEE Internal API v1.0\nTEE_Result TEE_GenerateKey(\nTEE_ObjectHandle object,\nuint32_t keySize,\n[in] TEE_Attribute* params, uint32_t paramCount );\nDescription\nThe TEE_GenerateKey function generates a random key or a key-pair and populates a transient key object\nwith the generated key material.\nThe size passed in the keySize parameter is dependent on the operation:\n• Where the key size is variable depending on the attributes provided for the object type, keySize\nSHALL be 0. The size of the generated key SHALL be less than or equal to the maximum key size\nspecified when the transient object was created.\n• Where the key size is known for the attributes provided, the keySize parameter SHALL be less than\nor equal to the maximum key size specified when the transient object was created. The valid values\nfor key size are defined in Table 5-9.\nAs shown in the following table, the generation algorithm can take parameters depending on the object type.\nTable 5-12: TEE_GenerateKey Parameters\nObject Type Details\nTEE_TYPE_AES No parameter is necessary. The function generates the attribute\nTEE_ATTR_SECRET_VALUE. The generated value SHALL be the full\nTEE_TYPE_DES\nkey size.\nTEE_TYPE_DES3\nTEE_TYPE_SM4\nTEE_TYPE_HMAC_MD5\nTEE_TYPE_HMAC_SHA1\nTEE_TYPE_HMAC_SHA224\nTEE_TYPE_HMAC_SHA256\nTEE_TYPE_HMAC_SHA384\nTEE_TYPE_HMAC_SHA512\nTEE_TYPE_HMAC_SHA3_224\nTEE_TYPE_HMAC_SHA3_256\nTEE_TYPE_HMAC_SHA3_384\nTEE_TYPE_HMAC_SHA3_512\nTEE_TYPE_HMAC_SM3\nTEE_TYPE_GENERIC_SECRET\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 153,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.6.7 TEE_GenerateKey",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GenerateKey",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "154 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nObject Type Details\nTEE_TYPE_RSA_KEYPAIR No parameter is required.\nThe TEE_ATTR_RSA_PUBLIC_EXPONENT attribute may be specified;\nif omitted, the default value is 65537.\nKey generation SHALL follow the rules defined in [NIST SP800-56B].\nThe function generates and populates the following attributes:\nTEE_ATTR_RSA_MODULUS\nTEE_ATTR_RSA_PUBLIC_EXPONENT (if not specified)\nTEE_ATTR_RSA_PRIVATE_EXPONENT\nTEE_ATTR_RSA_PRIME1\nTEE_ATTR_RSA_PRIME2\nTEE_ATTR_RSA_EXPONENT1\nTEE_ATTR_RSA_EXPONENT2\nTEE_ATTR_RSA_COEFFICIENT\nTEE_TYPE_DSA_KEYPAIR The following domain parameters SHALL be passed to the function:\nTEE_ATTR_DSA_PRIME\nTEE_ATTR_DSA_SUBPRIME\nTEE_ATTR_DSA_BASE\nThe function generates and populates the following attributes:\nTEE_ATTR_DSA_PUBLIC_VALUE\nTEE_ATTR_DSA_PRIVATE_VALUE\nTEE_TYPE_DH_KEYPAIR The following domain parameters SHALL be passed to the function:\nTEE_ATTR_DH_PRIME\nTEE_ATTR_DH_BASE\nThe following parameters can optionally be passed:\nTEE_ATTR_DH_SUBPRIME (q): If present, constrains the private\nvalue x to be in the range [2, q-2]\nTEE_ATTR_DH_X_BITS (l) If present, constrains the private value x\nto have l bits\nIf neither of these optional parts is specified, then the only\nconstraint on x is that it is less than p-1.\nThe function generates and populates the following attributes:\nTEE_ATTR_DH_PUBLIC_VALUE\nTEE_ATTR_DH_PRIVATE_VALUE\nTEE_ATTR_DH_X_BITS (number of bits in x)\nTEE_TYPE_ECDSA_KEYPAIR The following domain parameters SHALL be passed to the function:\nTEE_ATTR_ECC_CURVE\nThe function generates and populates the following attributes:\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_ATTR_ECC_PRIVATE_VALUE\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 154,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 154",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_ATTR_DH_SUBPRIME,TEE_ATTR_DH_X_BITS,TEE_ATTR_RSA_PUBLIC_EXPONENT",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 155 / 375\nObject Type Details\nTEE_TYPE_ECDH_KEYPAIR The following domain parameters SHALL be passed to the function:\nTEE_ATTR_ECC_CURVE\nThe function generates and populates the following attributes:\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_ATTR_ECC_PRIVATE_VALUE\nTEE_TYPE_ED25519_KEYPAIR No parameter is required\nThe function generates and populates the following attributes:\nTEE_ATTR_ED25519_PUBLIC_VALUE\nTEE_ATTR_ED25519_PRIVATE_VALUE\nTEE_TYPE_X25519_KEYPAIR No parameter is required\nThe function generates and populates the following attributes:\nTEE_ATTR_X25519_PUBLIC_VALUE\nTEE_ATTR_X25519_PRIVATE_VALUE\nTEE_TYPE_ED448_KEYPAIR No parameter is required\nThe function generates and populates the following attributes:\nTEE_ATTR_ED448_PUBLIC_VALUE\nTEE_ATTR_ED448_PRIVATE_VALUE\nTEE_TYPE_X448_KEYPAIR No parameter is required\nThe function generates and populates the following attributes:\nTEE_ATTR_X448_PUBLIC_VALUE\nTEE_ATTR_X448_PRIVATE_VALUE\nTEE_TYPE_SM2_DSA_KEYPAIR No parameter is required\nThe function generates and populates the following attributes:\nTEE_ATTR_ECC_PRIVATE_VALUE\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_TYPE_SM2_KEP_KEYPAIR No parameter is required\nThe function generates and populates the following attributes:\nTEE_ATTR_ECC_PRIVATE_VALUE\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_TYPE_SM2_PKE_KEYPAIR No parameter is required\nThe function generates and populates the following attributes:\nTEE_ATTR_ECC_PRIVATE_VALUE\nTEE_ATTR_ECC_PUBLIC_VALUE_X\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 155,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 155",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "156 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nOnce the key material has been generated, the transient object is populated exactly as in the function\nTEE_PopulateTransientObject except that the key material is randomly generated internally instead of\nbeing passed by the caller.\nParameters\n• object: Handle on an uninitialized transient key to populate with the generated key\n• keySize: Requested key size.\n• params, paramCount: Parameters for the key generation. The values of all parameters are copied\ninto the object so that the params array and all the memory buffers it points to may be freed after this\nroutine returns without affecting the object.\nSpecification Number: 10 Function Number: 0x804\nReturn Code\n• TEE_SUCCESS: On success.\n• TEE_ERROR_BAD_PARAMETERS: If an incorrect or inconsistent attribute is detected. The checks that\nare performed depend on the implementation.\nPanic Reasons\n• If object is not a valid opened object handle that is transient and uninitialized.\n• If keySize is not supported or is too large.\n• If a mandatory parameter is missing.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 156,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 156",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 157 / 375\n5.7 Persistent Object Functions\n5.7.1 TEE_OpenPersistentObject\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_OpenPersistentObject(\nuint32_t storageID,\n[in(objectIDLength)] void* objectID, size_t objectIDLen,\nuint32_t flags,\n[out] TEE_ObjectHandle* object );\nDescription\nThe TEE_OpenPersistentObject function opens a handle on an existing persistent object. It returns a\nhandle that can be used to access the object’s attributes and data stream.\nThe storageID parameter indicates which Trusted Storage Space to access. Possible values are defined\nin Table 5-2.\nThe flags parameter is a set of flags that controls the access rights and sharing permissions with which the\nobject handle is opened. The value of the flags parameter is constructed by a bitwise-inclusive OR of flags\nfrom the following list:\n• Access control flags:\nTEE_DATA_FLAG_ACCESS_READ: The object is opened with the read access right. This allows the\no\nTrusted Application to call the function TEE_ReadObjectData.\nTEE_DATA_FLAG_ACCESS_WRITE: The object is opened with the write access right. This allows\no\nthe Trusted Application to call the functions TEE_WriteObjectData and\nTEE_TruncateObjectData.\nTEE_DATA_FLAG_ACCESS_WRITE_META: The object is opened with the write-meta access right.\no\nThis allows the Trusted Application to call the functions\nTEE_CloseAndDeletePersistentObject1 and TEE_RenamePersistentObject.\n• Sharing permission control flags:\nTEE_DATA_FLAG_SHARE_READ: The caller allows another handle on the object to be created with\no\nread access.\nTEE_DATA_FLAG_SHARE_WRITE: The caller allows another handle on the object to be created\no\nwith write access.\n• Other flags are reserved for future use and SHALL be set to 0.\nMultiple handles may be opened on the same object simultaneously, but sharing SHALL be explicitly allowed\nas described in section 5.7.3.\nThe initial data position in the data stream is set to 0.\nEvery Trusted Storage implementation is expected to return TEE_ERROR_CORRUPT_OBJECT if a Trusted\nApplication attempts to open an object and the TEE determines that its contents (or those of the storage itself)\nhave been tampered with or rolled back.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 157,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.7 Persistent Object Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_OpenPersistentObject",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "158 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nParameters\n• storageID: The storage to use. Valid values are defined in Table 5-2.\n• objectID, objectIDLen: The object identifier. Note that this buffer cannot reside in shared\nmemory.\n• flags: The flags which determine the settings under which the object is opened. Valid values are\ndefined in Table 5-3.\n• object: A pointer to the handle, which contains the opened handle upon successful completion.\nIf this function fails for any reason, the value pointed to by object is set to TEE_HANDLE_NULL.\nWhen the object handle is no longer required, it SHALL be closed using a call to the\nTEE_CloseObject function.\nSpecification Number: 10 Function Number: 0x903\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the storage denoted by storageID does not exist or if the object\nidentifier cannot be found in the storage\n• TEE_ERROR_ACCESS_CONFLICT: If an access right conflict (see section 5.7.3) was detected while\nopening the object\n• TEE_ERROR_OUT_OF_MEMORY: If there is not enough memory to complete the operation\n• TEE_ERROR_CORRUPT_OBJECT: If the storage or object is corrupt\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible. It may be associated with the device but unplugged, busy, or inaccessible for\nsome other reason.\nPanic Reasons\n• If objectIDLen is greater than TEE_OBJECT_ID_MAX_LEN.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for objectIDLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 158,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 158",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 159 / 375\n5.7.2 TEE_CreatePersistentObject\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_CreatePersistentObject(\nuint32_t storageID,\n[in(objectIDLength)] void* objectID, size_t objectIDLen,\nuint32_t flags,\nTEE_ObjectHandle attributes,\n[inbuf] void* initialData, size_t initialDataLen,\n[outopt] TEE_ObjectHandle* object );\nDescription\nThe TEE_CreatePersistentObject function creates a persistent object with initial attributes and an initial\ndata stream content. The storageID parameter indicates which Trusted Storage Space to access; possible\nvalues are defined in Table 5-2.\nThe flags parameter is a set of flags that controls the access rights, sharing permissions, and object creation\nmechanism with which the object handle is opened. The value of the flags parameter is constructed by a\nbitwise-inclusive OR of flags from the following list:\n• Access control flags:\nTEE_DATA_FLAG_ACCESS_READ: The object is opened with the read access right. This allows the\no\nTrusted Application to call the function TEE_ReadObjectData.\nTEE_DATA_FLAG_ACCESS_WRITE: The object is opened with the write access right. This allows\no\nthe Trusted Application to call the functions TEE_WriteObjectData and\nTEE_TruncateObjectData.\nTEE_DATA_FLAG_ACCESS_WRITE_META: The object is opened with the write-meta access right.\no\nThis allows the Trusted Application to call the functions\nTEE_CloseAndDeletePersistentObject1 and TEE_RenamePersistentObject.\n• Sharing permission control flags:\nTEE_DATA_FLAG_SHARE_READ: The caller allows another handle on the object to be created with\no\nread access.\nTEE_DATA_FLAG_SHARE_WRITE: The caller allows another handle on the object to be created\no\nwith write access.\n• TEE_DATA_FLAG_OVERWRITE: As summarized in Table 5-13:\nIf this flag is present and the object exists, then the object is deleted and re-created as an atomic\no\noperation: that is, the TA sees either the old object or the new one.\nIf the flag is absent and the object exists, then the function SHALL return\no\nTEE_ERROR_ACCESS_CONFLICT.\n• Other flags are reserved for future use and SHALL be set to 0.\nThe attributes of the newly created persistent object are taken from attributes, which can be another\npersistent object or an initialized transient object. The object type, size, and usage are copied from\nattributes.\nTo create a pure data object, the attributes argument can also be NULL. If attributes is NULL, the\nobject type SHALL be set to TEE_TYPE_DATA to create a pure data object.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 159,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.7.2 TEE_CreatePersistentObject",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CreatePersistentObject",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "160 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nMultiple handles may be opened on the same object simultaneously, but sharing SHALL be explicitly allowed\nas described in section 5.7.3.\nThe initial data position in the data stream is set to 0.\nTo transform an initialized transient object into a persistent object, see the description of the object\nparameter following Table 5-13.\nTable 5-13: Effect of TEE_DATA_FLAG_OVERWRITE on Behavior of\nTEE_CreatePersistentObject\nTEE_DATA_FLAG_OVERWRITE Object Object Created? Return Code\nin flags Exists\nAbsent No Yes TEE_SUCCESS\nAbsent Yes No TEE_ERROR_ACCESS_CONFLICT\nPresent No Yes TEE_SUCCESS\nPresent Yes Deleted and re-created TEE_SUCCESS\nas an atomic operation\nParameters\n• storageID: The storage to use. Valid values are defined in Table 5-2.\n• objectID, objectIDLen: The object identifier. Note that this cannot reside in shared memory.\n• flags: The flags which determine the settings under which the object is opened\n• attributes: A handle on a persistent object or an initialized transient object from which to take the\npersistent object attributes. Can be TEE_HANDLE_NULL if the persistent object contains no attribute;\nfor example, if it is a pure data object.\n• initialData, initialDataLen: The initial data content of the persistent object\n• object: An optional pointer to the handle.\nWhen object is not NULL:\nContains the opened handle upon successful completion.\no\nIf this function fails for any reason, the value pointed to by object is set to TEE_HANDLE_NULL.\no\nWhen the object handle is no longer required, it SHALL be closed using a call to the\no\nTEE_CloseObject function.\nWhen object is NULL:\nIf attributes is a handle on an initialized transient object, the initialized transient object SHALL\no\nbe transformed to a persistent object.\nSpecification Number: 10 Function Number: 0x902\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the storage denoted by storageID does not exist\n• TEE_ERROR_ACCESS_CONFLICT: If an access right conflict (see section 5.7.3) was detected while\nopening the object\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 160,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 160",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 161 / 375\n• TEE_ERROR_OUT_OF_MEMORY: If there is not enough memory to complete the operation\n• TEE_ERROR_STORAGE_NO_SPACE: If insufficient space is available to create the persistent object\n• TEE_ERROR_CORRUPT_OBJECT: If the storage is corrupt\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible. It may be associated with the device but unplugged, busy, or inaccessible for\nsome other reason.\nPanic Reasons\n• If objectIDLen is greater than TEE_OBJECT_ID_MAX_LEN.\n• If attributes is not TEE_HANDLE_NULL and is not a valid handle on an initialized object\ncontaining the type and attributes of the persistent object to create.\n• If attributes is not a handle on an initialized transient object and object is NULL.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for objectIDLen and initialDataLen.\nPrior to TEE Internal Core API v1.3, output parameter object was mandatory.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 161,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 161",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "162 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n5.7.3 Persistent Object Sharing Rules\nMultiple handles may be opened on the same object simultaneously using the functions\nTEE_OpenPersistentObject or TEE_CreatePersistentObject, but sharing SHALL be explicitly\nallowed. More precisely, at any one time the following constraints apply: If more than one handle is opened\non the same object, and if any of these object handles was opened with the flag\nTEE_DATA_FLAG_ACCESS_READ, then all the object handles SHALL have been opened with the flag\nTEE_DATA_FLAG_SHARE_READ. There is a corresponding constraint with the flags\nTEE_DATA_FLAG_ACCESS_WRITE and TEE_DATA_FLAG_SHARE_WRITE. Accessing an object with\nACCESS_WRITE_META rights is exclusive and can never be shared.\nWhen one of the functions TEE_OpenPersistentObject or TEE_CreatePersistentObject is called\nand if opening the object would violate these constraints, then the function returns the return code\nTEE_ERROR_ACCESS_CONFLICT.\nAny bits in flags not defined in Table 5-3 of section 5.4 are reserved for future use and SHALL be set to\nzero.\nThe examples in Table 5-14 illustrate the behavior of the TEE_OpenPersistentObject function when called\ntwice on the same object. Note that for readability, the flag names used in Table 5-14 have been abbreviated\nby removing the ‘TEE_DATA_FLAG_’ prefix from their name, and any non-TEE_SUCCESS return codes have\nbeen shortened by removing the ‘TEE_ERROR_’ prefix.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 162,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.7.3 Persistent Object Sharing Rules",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 163 / 375\nTable 5-14: Examples of TEE_OpenPersistentObject Sharing Rules\nValue of flags for Return Code of\nValue of flags for\nSecond Second Comments\nFirst Open/Create\nOpen/Create Open/Create\nACCESS_READ ACCESS_READ ACCESS_CONFLICT The object handles have not\nbeen opened with the flag\nSHARE_READ. Only the first call\nwill succeed.\nACCESS_READ | ACCESS_READ ACCESS_CONFLICT Not all the object handles have\nSHARE_READ been opened with the flag\nSHARE_READ. Only the first call\nwill succeed.\nACCESS_READ | ACCESS_READ | TEE_SUCCESS All the object handles have been\nSHARE_READ SHARE_READ opened with the flag\nSHARE_READ.\nACCESS_READ ACCESS_WRITE ACCESS_CONFLICT Objects are not opened with\nshare flags. Only the first call will\nsucceed.\nACCESS_WRITE_META ACCESS_READ | ACCESS_CONFLICT The write-meta flag indicates an\nSHARE_READ | exclusive access to the object.\nACCESS_WRITE |\nOnly the first Open/Create will\nSHARE_WRITE\nsucceed.\nACCESS_WRITE_META (Anything) ACCESS_CONFLICT The write-meta flag indicates an\n| (Anything) exclusive access to the object.\nOnly the first Open/Create will\nsucceed.\nACCESS_READ | ACCESS_WRITE | TEE_SUCCESS All the object handles have been\nSHARE_READ | SHARE_READ | opened with the share flags.\nSHARE_WRITE SHARE_WRITE\nACCESS_READ | ACCESS_WRITE_META ACCESS_CONFLICT The write-meta flag indicates an\nSHARE_READ | exclusive access to the object.\nACCESS_WRITE |\nOnly the first call will succeed.\nSHARE_WRITE\nSHARE_READ ACCESS_WRITE | ACCESS_CONFLICT An object can be opened with\nSHARE_WRITE only share flags, which locks the\naccess to an object against a\ngiven mode. Here the first call\nprevents subsequent accesses in\nwrite mode.\n0 ACCESS_READ | ACCESS_CONFLICT An object can be opened with no\nSHARE_READ flag set, which completely locks\nall subsequent attempts to\naccess the object. Only the first\ncall will succeed.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 163,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 163",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "164 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n5.7.4 TEE_CloseAndDeletePersistentObject1\nSince: TEE Internal Core API v1.1\nTEE_Result TEE_CloseAndDeletePersistentObject1( TEE_ObjectHandle object );\nDescription\nThis function replaces the TEE_CloseAndDeletePersistentObject function, whose use is\ndeprecated.\nThe TEE_CloseAndDeletePersistentObject1 function marks an object for deletion and closes the object\nhandle.\nThe object handle SHALL have been opened with the write-meta access right, which means access to the\nobject is exclusive.\nDeleting an object is atomic; once this function returns, the object is definitely deleted and no more open\nhandles for the object exist. This SHALL be the case even if the object or the storage containing it have become\ncorrupted.\nThe only reason this routine can fail is if the storage area containing the object becomes inaccessible (e.g. the\nuser removes the media holding the object). In this case TEE_ERROR_STORAGE_NOT_AVAILABLE SHALL be\nreturned.\nIf object is TEE_HANDLE_NULL, the function does nothing.\nParameters\n• object: The object handle\nSpecification Number: 10 Function Number: 0x905\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nPanic Reasons\n• If object is not a valid handle on a persistent object opened with the write-meta access right.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 164,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.7.4 TEE_CloseAndDeletePersistentObject1",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CloseAndDeletePersistentObject1",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 165 / 375\n5.7.5 TEE_RenamePersistentObject\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_RenamePersistentObject(\nTEE_ObjectHandle object,\n[in(newObjectIDLen)] void* newObjectID, size_t newObjectIDLen );\nDescription\nThe function TEE_RenamePersistentObject changes the identifier of an object. The object handle SHALL\nhave been opened with the write-meta access right, which means access to the object is exclusive.\nRenaming an object is an atomic operation; either the object is renamed or nothing happens.\nParameters\n• object: The object handle\n• newObjectID, newObjectIDLen: A buffer containing the new object identifier. The identifier\ncontains arbitrary bytes, including the zero byte. The identifier length SHALL be less than or equal to\nTEE_OBJECT_ID_MAX_LEN and can be zero. The buffer containing the new object identifier cannot\nreside in shared memory.\nSpecification Number: 10 Function Number: 0x904\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ACCESS_CONFLICT: If an object with the same identifier already exists\n• TEE_ERROR_CORRUPT_OBJECT: If the object is corrupt. The object handle SHALL behave based on\nthe gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nPanic Reasons\n• If object is not a valid handle on a persistent object that has been opened with the write-meta\naccess right.\n• If newObjectID resides in shared memory.\n• If newObjectIDLen is more than TEE_OBJECT_ID_MAX_LEN.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for newObjectIDLen.\nPrior to TEE Internal Core API v1.3, the behavior associated with the return code\nTEE_ERROR_CORRUPT_OBJECT resulted in the object handle always being closed.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 165,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.7.5 TEE_RenamePersistentObject",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_RenamePersistentObject",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "166 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n5.8 Persistent Object Enumeration Functions\n5.8.1 TEE_AllocatePersistentObjectEnumerator\nSince: TEE Internal API v1.0\nTEE_Result TEE_AllocatePersistentObjectEnumerator(\n[out] TEE_ObjectEnumHandle* objectEnumerator );\nDescription\nThe TEE_AllocatePersistentObjectEnumerator function allocates a handle on an object enumerator.\nOnce an object enumerator handle has been allocated, it can be reused for multiple enumerations.\nParameters\n• objectEnumerator: A pointer filled with the newly-allocated object enumerator handle on success.\nSet to TEE_HANDLE_NULL in case of error.\nSpecification Number: 10 Function Number: 0xA01\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_OUT_OF_MEMORY: If there is not enough memory to allocate the enumerator handle\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\n5.8.2 TEE_FreePersistentObjectEnumerator\nSince: TEE Internal API v1.0\nvoid TEE_FreePersistentObjectEnumerator(\nTEE_ObjectEnumHandle objectEnumerator );\nDescription\nThe TEE_FreePersistentObjectEnumerator function deallocates all resources associated with an object\nenumerator handle. After this function is called, the handle is no longer valid.\nParameters\n• objectEnumerator: The handle to close. If objectEnumerator is TEE_HANDLE_NULL, then this\nfunction does nothing.\nSpecification Number: 10 Function Number: 0xA02\nPanic Reasons\n• If objectEnumerator is not a valid handle on an object enumerator.\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 166,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.8 Persistent Object Enumeration Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AllocatePersistentObjectEnumerator,TEE_FreePersistentObjectEnumerator",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 167 / 375\n5.8.3 TEE_ResetPersistentObjectEnumerator\nSince: TEE Internal API v1.0\nvoid TEE_ResetPersistentObjectEnumerator(\nTEE_ObjectEnumHandle objectEnumerator );\nDescription\nThe TEE_ResetPersistentObjectEnumerator function resets an object enumerator handle to its initial\nstate after allocation. If an enumeration has been started, it is stopped.\nThis function does nothing if objectEnumerator is TEE_HANDLE_NULL.\nParameters\n• objectEnumerator: The handle to reset\nSpecification Number: 10 Function Number: 0xA04\nPanic Reasons\n• If objectEnumerator is not TEE_HANDLE_NULL and is not a valid handle on an object\nenumerator.\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 167,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.8.3 TEE_ResetPersistentObjectEnumerator",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_ResetPersistentObjectEnumerator",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "168 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n5.8.4 TEE_StartPersistentObjectEnumerator\nSince: TEE Internal API v1.0\nTEE_Result TEE_StartPersistentObjectEnumerator(\nTEE_ObjectEnumHandle objectEnumerator,\nuint32_t storageID );\nDescription\nThe TEE_StartPersistentObjectEnumerator function starts the enumeration of all the persistent objects\nin a given Trusted Storage. The object information can be retrieved by calling the function\nTEE_GetNextPersistentObject repeatedly.\nThe enumeration does not necessarily reflect a given consistent state of the storage: During the enumeration,\nother TAs or other instances of the TA may create, delete, or rename objects. It is not guaranteed that all\nobjects will be returned if objects are created or destroyed while the enumeration is in progress.\nTo stop an enumeration, the TA can call the function TEE_ResetPersistentObjectEnumerator, which\ndetaches the enumerator from the Trusted Storage. The TA can call the function\nTEE_FreePersistentObjectEnumerator to completely deallocate the object enumerator.\nIf this function is called on an enumerator that has already been started, the enumeration is first reset then\nstarted.\nParameters\n• objectEnumerator: A valid handle on an object enumerator\n• storageID: The identifier of the storage in which the objects SHALL be enumerated. Possible values\nare defined in Table 5-2.\nSpecification Number: 10 Function Number: 0xA05\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If the storage does not exist or if there is no object in the specified\nstorage\n• TEE_ERROR_CORRUPT_OBJECT: If the storage is corrupt\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nPanic Reasons\n• If objectEnumerator is not a valid handle on an object enumerator.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 168,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.8.4 TEE_StartPersistentObjectEnumerator",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_StartPersistentObjectEnumerator",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 169 / 375\n5.8.5 TEE_GetNextPersistentObject\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_GetNextPersistentObject(\nTEE_ObjectEnumHandle objectEnumerator,\n[out] TEE_ObjectInfo* objectInfo,\n[out] void* objectID,\n[out] size_t* objectIDLen );\nDescription\nThe TEE_GetNextPersistentObject function gets the next object in an enumeration and returns\ninformation about the object: type, size, identifier, etc.\nIf there are no more objects in the enumeration or if there is no enumeration started, then the function returns\nTEE_ERROR_ITEM_NOT_FOUND.\nIf while enumerating objects a corrupt object is detected, then its object ID SHALL be returned in objectID,\nobjectInfo SHALL be zeroed, and the function SHALL return TEE_ERROR_CORRUPT_OBJECT.\nIf the set of available objects changes while an enumeration is taking place, then objects may be reported\nmore than once, or not at all.\nParameters\n• objectEnumerator: A handle on the object enumeration\n• objectInfo: A pointer to a TEE_ObjectInfo filled with the object information as specified in the\nfunction TEE_GetObjectInfo1 in section 5.5.1. It may be NULL.\n• objectID: Pointer to an array able to hold at least TEE_OBJECT_ID_MAX_LEN bytes. On return, the\nobject identifier is written to this location\n• objectIDLen: Filled with the size of the object identifier (from 0 to TEE_OBJECT_ID_MAX_LEN)\nSpecification Number: 10 Function Number: 0xA03\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_ITEM_NOT_FOUND: If there are no more elements in the object enumeration or if no\nenumeration is started on this handle\n• TEE_ERROR_CORRUPT_OBJECT: If the storage or returned object is corrupt\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 169,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.8.5 TEE_GetNextPersistentObject",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetNextPersistentObject",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "170 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nPanic Reasons\n• If objectEnumerator is not a valid handle on an object enumerator.\n• If objectID is NULL.\n• If objectIDLen is NULL.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for objectIDLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 170,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 170",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 171 / 375\n5.9 Data Stream Access Functions\nThese functions can be used to access the data stream of persistent objects. They work like a file API.\n5.9.1 TEE_ReadObjectData\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_ReadObjectData(\nTEE_ObjectHandle object,\n[out] void* buffer,\nsize_t size,\n[out] size_t* count );\nDescription\nThe TEE_ReadObjectData function attempts to read size bytes from the data stream associated with the\nobject object into the buffer pointed to by buffer.\nThe object handle SHALL have been opened with the read access right.\nThe bytes are read starting at the position in the data stream currently stored in the object handle. The handle’s\nposition is incremented by the number of bytes actually read.\nOn completion TEE_ReadObjectData sets the number of bytes actually read in the uint32_t pointed to\nby count. The value written to *count may be less than size if the number of bytes until the end-of-\nstream is less than size. It is set to 0 if the position at the start of the read operation is at or beyond the\nend-of-stream. These are the only cases where *count may be less than size.\nNo data transfer can occur past the current end of stream. If an attempt is made to read past the end-of-\nstream, the TEE_ReadObjectData function stops reading data at the end-of-stream and returns the data\nread up to that point. This is still a success. The position indicator is then set at the end-of-stream. If the\nposition is at, or past, the end of the data when this function is called, then no bytes are copied to *buffer\nand *count is set to 0.\nParameters\n• object: The object handle\n• buffer: A pointer to the memory which, upon successful completion, contains the bytes read\n• size: The number of bytes to read\n• count: A pointer to the variable which upon successful completion contains the number of bytes read\nSpecification Number: 10 Function Number: 0xB01\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_CORRUPT_OBJECT: If the object is corrupt. The object handle SHALL behave based on\nthe gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 171,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.9 Data Stream Access Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_ReadObjectData",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "172 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nPanic Reasons\n• If object is not a valid handle on a persistent object opened with the read access right.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for size.\nPrior to TEE Internal Core API v1.2, TEE_ReadObjectData used a different type for count.\nPrior to TEE Internal Core API v1.3, the behavior associated with the return code\nTEE_ERROR_CORRUPT_OBJECT resulted in the object handle always being closed.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 172,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 172",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 173 / 375\n5.9.2 TEE_WriteObjectData\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_WriteObjectData(\nTEE_ObjectHandle object,\n[inbuf] void* buffer, size_t size );\nDescription\nThe TEE_WriteObjectData function writes size bytes from the buffer pointed to by buffer to the data\nstream associated with the open object handle object.\nThe object handle SHALL have been opened with the write access permission.\nIf the current data position points before the end-of-stream, then size bytes are written to the data stream,\noverwriting bytes starting at the current data position. If the current data position points beyond the stream’s\nend, then the data stream is first extended with zero bytes until the length indicated by the data position\nindicator is reached, and then size bytes are written to the stream. Thus, the size of the data stream can be\nincreased as a result of this operation.\nIf the operation would move the data position indicator to beyond its maximum possible value, then\nTEE_ERROR_OVERFLOW is returned and the operation fails.\nThe data position indicator is advanced by size. The data position indicators of other object handles opened\non the same object are not changed.\nWriting in a data stream is atomic; either the entire operation completes successfully or no write is done.\nParameters\n• object: The object handle\n• buffer: The buffer containing the data to be written\n• size: The number of bytes to write\nSpecification Number: 10 Function Number: 0xB04\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_STORAGE_NO_SPACE: If insufficient storage space is available\n• TEE_ERROR_OVERFLOW: If the value of the data position indicator resulting from this operation would\nbe greater than TEE_DATA_MAX_POSITION\n• TEE_ERROR_CORRUPT_OBJECT: If the object is corrupt. The object handle SHALL behave based on\nthe gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nPanic Reasons\n• If object is not a valid handle on a persistent object opened with the write access right.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 173,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.9.2 TEE_WriteObjectData",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_WriteObjectData",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "174 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for size.\nPrior to TEE Internal Core API v1.3:\n• TEE_WriteObjectData defined buffer as an [in].\n• The behavior associated with the return code TEE_ERROR_CORRUPT_OBJECT resulted in the object\nhandle always being closed.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 174,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 174",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 175 / 375\n5.9.3 TEE_TruncateObjectData\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_TruncateObjectData(\nTEE_ObjectHandle object,\nsize_t size );\nDescription\nThe function TEE_TruncateObjectData changes the size of a data stream. If size is less than the current\nsize of the data stream then all bytes beyond size are removed. If size is greater than the current size of\nthe data stream then the data stream is extended by adding zero bytes at the end of the stream.\nThe object handle SHALL have been opened with the write access permission.\nThis operation does not change the data position of any handle opened on the object. Note that if the current\ndata position of such a handle is beyond size, the data position will point beyond the object data’s end after\ntruncation.\nTruncating a data stream is atomic; either the data stream is successfully truncated or nothing happens.\nParameters\n• object: The object handle\n• size: The new size of the data stream\nSpecification Number: 10 Function Number: 0xB03\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_STORAGE_NO_SPACE: If insufficient storage space is available to perform the operation\n• TEE_ERROR_CORRUPT_OBJECT: If the object is corrupt. The object handle SHALL behave based on\nthe gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nPanic Reasons\n• If object is not a valid handle on a persistent object opened with the write access right.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nPrior to TEE Internal Core API v1.2, a different type was used for size.\nPrior to TEE Internal Core API v1.3, the behavior associated with the return code\nTEE_ERROR_CORRUPT_OBJECT resulted in the object handle always being closed.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 175,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.9.3 TEE_TruncateObjectData",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_TruncateObjectData",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "176 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n5.9.4 TEE_SeekObjectData\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_SeekObjectData(\nTEE_ObjectHandle object,\nintmax_t offset,\nTEE_Whence whence );\nDescription\nThe TEE_SeekObjectData function sets the data position indicator associated with the object handle.\nThe parameter whence controls the meaning of offset:\n• If whence is TEE_DATA_SEEK_SET, the data position is set to offset bytes from the beginning of\nthe data stream.\n• If whence is TEE_DATA_SEEK_CUR, the data position is set to its current position plus offset.\n• If whence is TEE_DATA_SEEK_END, the data position is set to the size of the object data plus\noffset.\nThe TEE_SeekObjectData function may be used to set the data position beyond the end of stream; this\ndoes not constitute an error. However, the data position indicator does have a maximum value which is\nTEE_DATA_MAX_POSITION. If the value of the data position indicator resulting from this operation would be\ngreater than TEE_DATA_MAX_POSITION, the error TEE_ERROR_OVERFLOW is returned.\nIf an attempt is made to move the data position before the beginning of the data stream, the data position is\nset at the beginning of the stream. This does not constitute an error.\nParameters\n• object: The object handle\n• offset: The number of bytes to move the data position. A positive value moves the data position\nforward; a negative value moves the data position backward.\n• whence: The position in the data stream from which to calculate the new position\nSpecification Number: 10 Function Number: 0xB02\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_OVERFLOW: If the value of the data position indicator resulting from this operation would\nbe greater than TEE_DATA_MAX_POSITION\n• TEE_ERROR_CORRUPT_OBJECT: If the object is corrupt. The object handle SHALL behave based on\nthe gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nPanic Reasons\n• If object is not a valid handle on a persistent object.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 176,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "5.9.4 TEE_SeekObjectData",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_SeekObjectData",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 177 / 375\nBackward Compatibility\nPrior to TEE Internal Core API v1.3:\n• A different type was used for offset.\n• The behavior associated with the return code TEE_ERROR_CORRUPT_OBJECT resulted in the object\nhandle always being closed.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 177,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 177",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "178 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6 Cryptographic Operations API\nThe Cryptographic Operations API defines how to actually perform cryptographic operations.\nAs discussed in section 2.2.3, it is not the role of this specification to guide the reader in determining which\ncryptographic capabilities may be safe for their purposes, and this specification recognizes that in some cases\nthe use of weak cryptography by a TA may be better than the use of that same cryptography by an application\noutside of a TEE.\nGlobalPlatform does provide recommendations for best practices and acceptable cryptography usage. These\ncan be found in GlobalPlatform Cryptographic Algorithm Recommendations ([Crypto Rec]), and relevant\nsections of that document MAY be applied to the interfaces and API offered by this specification. As always,\nthe developer should refer to appropriate security guidelines.\nFollowing the general principles discussed below, this section includes the following subsections:\n6.1 Data Types ................................................................................................................... 181\n6.2 Generic Operation Functions........................................................................................ 184\n6.3 Message Digest Functions ........................................................................................... 202\n6.4 Symmetric Cipher Functions ........................................................................................ 206\n6.5 MAC Functions ............................................................................................................. 211\n6.6 Authenticated Encryption Functions ............................................................................. 216\n6.7 Asymmetric Functions .................................................................................................. 224\n6.8 Key Derivation Functions .............................................................................................. 233\n6.9 Random Data Generation Function .............................................................................. 237\n6.10 Cryptographic Algorithms Specification ........................................................................ 238\n6.11 Object or Operation Attributes ...................................................................................... 246\nGeneral Principles\n• Cryptographic operations can be pre-allocated for a given operation type, algorithm, and key size.\nResulting Cryptographic Operation Handles can be reused for multiple operations.\n• When required by the operation, the Cryptographic Operation Key can be set up independently and\nreused for multiple operations. Note that some cryptographic algorithms, such as AES-XTS, require\ntwo keys.\n• An operation may be in three states: initial state where nothing is going on, active state where an\noperation is in progress, and extracting state where a digest extraction operation is in progress.\n• The cryptographic algorithms listed in Table 6-1 are supported in this specification.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 178,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.1 Data Types ................................................................................................................... 181",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 179 / 375\nTable 6-1: Supported Cryptographic Algorithms 5\nAlgorithm Type Supported Algorithm\nDigests MD5 SHA-256 SHA3-224 SHAKE128\nSHA-1 SHA-224 SHA3-256 SHAKE256\nSHA-384 SHA3-384\nSHA-512 SHA3-512\nSM3-256\nSymmetric ciphers DES\nTriple-DES with double-length and triple-length keys\nAES\nSM4\nMessage Authentication Codes DES-MAC\n(MACs)\nAES-MAC\nAES-CMAC\nHMAC with one of the supported digests\nAuthenticated Encryption (AE) AES-CCM with support for Additional Authenticated Data (AAD)\nAES-GCM with support for Additional Authenticated Data (AAD)\nAsymmetric Encryption RSA PKCS1-V1.5\nSchemes\nRSA OAEP\nAsymmetric Signature Schemes DSA\nRSA PKCS1-V1.5\nRSA PSS\nKey Exchange Algorithms Diffie-Hellman\n• A number of cryptographic algorithms are optional in this specification. Optional algorithms if\nimplemented SHALL be supported as defined in the following table.\nTable 6-2: Optional Cryptographic Algorithms\nAlgorithm Type Optional Supported Algorithm\nAsymmetric Signature Schemes on generic ECDSA Required if supporting any curve for\ncurve types which \"Generic\" in Table 6-14 is Y\nKey Exchange Algorithms on generic curve ECDH Required if supporting any curve for\ntypes which \"Generic\" in Table 6-14 is Y\nAsymmetric Signature on Edwards Curves ED25519 Required if any Edwards curve is\nsupported\n5 WARNING: Given the increases in computing power, it is necessary to increase the strength of encryption used with\ntime. Many of the algorithms and key sizes included are known to be weak and are included to support legacy\nimplementations only. TA designers should regularly review the choice of cryptographic primitives and key sizes used\nin their applications and should refer to GlobalPlatform recommendations ([Crypto Rec]) and appropriate government\nguidelines.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 179,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 179",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "180 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nAlgorithm Type Optional Supported Algorithm\nKey Exchange Algorithms on Edwards Curves X25519 Required if any Edwards curve is\nsupported\nAsymmetric Signature on Edwards Curves ED448 Required if Edwards curve 448 is\nsupported\nKey Exchange Algorithms on Edwards Curves X448 Required if Edwards curve 448 is\nsupported\nVarious asymmetric Elliptic Curve-based SM2 Requires support for SM3 and SM4\ncryptographic schemes using the SM2 curve\nVarious signature and HMAC schemes based SM3\non the SM3 hash function\nVarious symmetric encryption-based schemes SM4\nbased on SM4 symmetric encryption\n• Digest, symmetric ciphers, MACs, and AE operations are always multi-stage, i.e. data can be provided\nin successive chunks to the API. On the other hand, asymmetric operations are always single stage.\n• Operation states can be copied from one operation handle into an uninitialized operation handle. This\nallows the TA to duplicate or fork a multi-stage operation, for example.\n• The various modes of Ed25519 and Ed448 can cause confusion. RFC 8032 ([Ed25519]) defines three\nversions of Ed25519:\nA version that takes the entire message and cannot take a context string, known as Ed25519.\no\nA version that takes a context string, known as Ed25519ctx.\no\nA version that takes a context string and a hash of the original message, known as Ed25519ph.\no\nThe reason for this three-way split is that originally only version 1 existed, with versions 2 and 3 being\nadded to later versions of the RFC.\nEd448 was designed after the three Ed25519 versions and doesn't have an equivalent to the first\nversion of Ed25519: There are only the 'ctx' and 'ph' versions. Confusingly, these are commonly known\nas 'Ed448' and 'Ed448ph'. It is not actually possible to use Ed448 without a context string: The closest\nis to use an empty context string. For clarity, this specification indicates the requirement to support\ncontext by using the 'Ed448ctx' term.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 180,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 180",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 181 / 375\n6.1 Data Types\n6.1.1 TEE_OperationMode\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nThe TEE_OperationMode type is used to specify one of the available cryptographic operations. Table 6-3\ndefines the legal values of TEE_OperationMode.\ntypedef uint32_t TEE_OperationMode;\nTable 6-3: Possible TEE_OperationMode Values 6\nConstant Name Value Comment\nTEE_MODE_ENCRYPT 0x00000000 Encryption mode\nTEE_MODE_DECRYPT 0x00000001 Decryption mode\nTEE_MODE_SIGN 0x00000002 Signature generation mode\nTEE_MODE_VERIFY 0x00000003 Signature verification mode\nTEE_MODE_MAC 0x00000004 MAC mode\nTEE_MODE_DIGEST 0x00000005 Digest mode\nTEE_MODE_DERIVE 0x00000006 Key derivation mode\nReserved for future 0x00000007 – 0x7FFFFFFE\nGlobalPlatform specifications\nTEE_MODE_ILLEGAL_VALUE 0x7FFFFFFF\nImplementation defined 0x80000000 – 0xFFFFFFFF\nTEE_MODE_ILLEGAL_VALUE is reserved for testing and validation and SHALL be treated as an undefined\nvalue when provided to a cryptographic operation function.\nBackward Compatibility\nPrior to TEE Internal Core API v1.2, TEE_OperationMode was defined as an enum.\n6 See section 3.3.3 for recommendations on constant declaration.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 181,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.1 Data Types",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "182 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.1.2 TEE_OperationInfo\nSince: TEE Internal API v1.0\ntypedef struct {\nuint32_t algorithm;\nuint32_t operationClass;\nuint32_t mode;\nuint32_t digestLength;\nuint32_t maxKeySize;\nuint32_t keySize;\nuint32_t requiredKeyUsage;\nuint32_t handleState;\n} TEE_OperationInfo;\nSee the documentation of function TEE_GetOperationInfo in section 6.2.3 for a description of this\nstructure.\n6.1.3 TEE_OperationInfoMultiple\nSince: TEE Internal Core API v1.1\ntypedef struct {\nuint32_t keySize;\nuint32_t requiredKeyUsage;\n} TEE_OperationInfoKey;\ntypedef struct {\nuint32_t algorithm;\nuint32_t operationClass;\nuint32_t mode;\nuint32_t digestLength;\nuint32_t maxKeySize;\nuint32_t handleState;\nuint32_t operationState;\nuint32_t numberOfKeys;\nTEE_OperationInfoKey keyInformation[];\n} TEE_OperationInfoMultiple;\nSee the documentation of function TEE_GetOperationInfoMultiple in section 6.2.4 for a description of\nthis structure.\nThe buffer size to allocate to hold details of N keys is given by\nsizeof(TEE_OperationInfoMultiple) + N * sizeof(TEE_OperationInfoKey)\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 182,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.1.2 TEE_OperationInfo",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 183 / 375\n6.1.4 TEE_OperationHandle\nSince: TEE Internal API v1.0\ntypedef struct __TEE_OperationHandle* TEE_OperationHandle;\ntypedef struct <ImplNamespace>_TEE_OperationHandle* TEE_OperationHandle;\nTEE_OperationHandle is an opaque handle (as defined in section 2.4) on a cryptographic operation. These\nhandles are returned by the function TEE_AllocateOperation specified in section 6.2.1.\nIn the above definition, <ImplNamespace> can be replaced with a namespace identifier reserved for the\nimplementation, or the implementation may select some other name and definition provided that it is\ncompatible with assignment of TEE_HANDLE_NULL.\nSince: TEE Internal Core API v1.3.1\nPrevious versions of this specification used the definition __TEE_OperationHandle* for\nTEE_OperationHandle.\nThis was changed as names beginning with double underscore are reserved for the C language\nimplementation in [C99]. The name and type used for opaque handle definitions is not, and never has been,\nnormative.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 183,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.1.4 TEE_OperationHandle",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "184 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.2 Generic Operation Functions\nExcept where otherwise indicated, the functions in this section are common to all types of cryptographic\noperation. These functions support the following types of cryptographic operations:\n• Message Digests; see section 6.3\n• Symmetric Ciphers; see section 6.4\n• MACs; see section 6.5\n• Authenticated Encryptions; see section 6.6\n• Asymmetric Operations; see section 6.7\n• Key Derivations; see section 6.8\n6.2.1 TEE_AllocateOperation\nSince: TEE Internal API v1.0\nTEE_Result TEE_AllocateOperation(\nTEE_OperationHandle* operation,\nuint32_t algorithm,\nuint32_t mode,\nuint32_t maxKeySize );\nDescription\nThe TEE_AllocateOperation function allocates a handle for a new cryptographic operation and sets the\nmode and algorithm type. If this function does not return with TEE_SUCCESS then there is no valid handle\nvalue.\nOnce a cryptographic operation has been created, the implementation SHALL guarantee that all resources\nnecessary for the operation are allocated and that any operation with a key of at most maxKeySize bits can\nbe performed. For algorithms that take multiple keys, the maxKeySize parameter specifies the size of the\nlargest key. It is up to the implementation to properly allocate space for multiple keys if the algorithm so\nrequires.\nThe parameter algorithm SHALL be one of the constants defined in section 6.10.1.\nThe parameter mode SHALL be one of the constants defined in section 6.1.1. It SHALL be compatible with\nthe algorithm as defined by Table 6-4.\nThe parameter maxKeySize SHALL be a valid value as defined in Table 5-9 for the algorithm, for algorithms\nreferenced in Table 5-9. For all other algorithms, the maxKeySize parameter may have any value.\nThe operation is placed in initial state.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 184,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.2 Generic Operation Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AllocateOperation",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 185 / 375\nTable 6-4: TEE_AllocateOperation Algorithms Allowed per Mode and Object Type\nAlgorithm Object Type Modes\nTEE_ALG_AES_CBC_NOPAD\nTEE_ALG_AES_CCM\nTEE_ALG_AES_CTR\nTEE_MODE_ENCRYPT\nTEE_ALG_AES_CTS TEE_TYPE_AES\nTEE_MODE_DECRYPT\nTEE_ALG_AES_ECB_NOPAD\nTEE_ALG_AES_GCM\nTEE_ALG_AES_XTS\nTEE_ALG_DES_CBC_NOPAD TEE_MODE_ENCRYPT\nTEE_TYPE_DES\nTEE_ALG_DES_ECB_NOPAD TEE_MODE_DECRYPT\nTEE_ALG_DES3_CBC_NOPAD TEE_MODE_ENCRYPT\nTEE_TYPE_DES3\nTEE_ALG_DES3_ECB_NOPAD TEE_MODE_DECRYPT\nTEE_ALG_SM4_CBC_NOPAD\nTEE_ALG_SM4_CBC_PKCS5\nTEE_MODE_ENCRYPT\nTEE_ALG_SM4_CTR TEE_TYPE_SM4\nTEE_MODE_DECRYPT\nTEE_ALG_SM4_ECB_NOPAD\nTEE_ALG_SM4_ECB_PKCS5\nTEE_ALG_RSA_NOPAD\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA1\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA224\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA256\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA384\nTEE_TYPE_RSA_KEYPAIR TEE_MODE_ENCRYPT\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA512\nTEE_TYPE_RSA_PUBLIC_KEY TEE_MODE_DECRYPT\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA3_224\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA3_256\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA3_384\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA3_512\nTEE_ALG_RSAES_PKCS1_V1_5\nTEE_TYPE_SM2_PKE_KEYPAIR TEE_MODE_ENCRYPT\nTEE_ALG_SM2_PKE\nTEE_TYPE_SM2_PKE_PUBLIC_KEY TEE_MODE_DECRYPT\nTEE_ALG_AES_CBC_MAC_NOPAD\nTEE_ALG_AES_CBC_MAC_PKCS5 TEE_TYPE_AES TEE_MODE_MAC\nTEE_ALG_AES_CMAC\nTEE_ALG_DES_CBC_MAC_NOPAD\nTEE_TYPE_DES TEE_MODE_MAC\nTEE_ALG_DES_CBC_MAC_PKCS5\nTEE_ALG_DES3_CBC_MAC_NOPAD\nTEE_TYPE_DES3 TEE_MODE_MAC\nTEE_ALG_DES3_CBC_MAC_PKCS5\nTEE_ALG_HMAC_MD5 TEE_TYPE_HMAC_MD5 TEE_MODE_MAC\nTEE_ALG_HMAC_SHA1 TEE_TYPE_HMAC_SHA1 TEE_MODE_MAC\nTEE_ALG_HMAC_SHA224 TEE_TYPE_HMAC_SHA224 TEE_MODE_MAC\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 185,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 185",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "186 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nAlgorithm Object Type Modes\nTEE_ALG_HMAC_SHA256 TEE_TYPE_HMAC_SHA256 TEE_MODE_MAC\nTEE_ALG_HMAC_SHA384 TEE_TYPE_HMAC_SHA384 TEE_MODE_MAC\nTEE_ALG_HMAC_SHA512 TEE_TYPE_HMAC_SHA512 TEE_MODE_MAC\nTEE_ALG_HMAC_SHA3_224 TEE_TYPE_HMAC_SHA3_224 TEE_MODE_MAC\nTEE_ALG_HMAC_SHA3_256 TEE_TYPE_HMAC_SHA3_256 TEE_MODE_MAC\nTEE_ALG_HMAC_SHA3_384 TEE_TYPE_HMAC_SHA3_384 TEE_MODE_MAC\nTEE_ALG_HMAC_SHA3_512 TEE_TYPE_HMAC_SHA3_512 TEE_MODE_MAC\nTEE_ALG_HMAC_SM3 TEE_TYPE_HMAC_SM3 TEE_MODE_MAC\nTEE_ALG_MD5\nTEE_ALG_SHA1\nTEE_ALG_SHA224\nTEE_ALG_SHA256\nTEE_ALG_SHA384\nTEE_ALG_SHA3_224\nNo associated object type TEE_MODE_DIGEST\nTEE_ALG_SHA3_256\nTEE_ALG_SHA3_384\nTEE_ALG_SHA3_512\nTEE_ALG_SHAKE128\nTEE_ALG_SHAKE256\nTEE_ALG_SM3\nTEE_ALG_DSA_SHA1\nTEE_ALG_DSA_SHA224\nTEE_ALG_DSA_SHA256\nTEE_TYPE_DSA_KEYPAIR TEE_MODE_SIGN\nTEE_ALG_DSA_SHA3_224\nTEE_TYPE_DSA_PUBLIC_KEY TEE_MODE_VERIFY\nTEE_ALG_DSA_SHA3_256\nTEE_ALG_DSA_SHA3_384\nTEE_ALG_DSA_SHA3_512\nTEE_ALG_ECDSA_SHA1\nTEE_ALG_ECDSA_SHA224\nTEE_ALG_ECDSA_SHA256\nTEE_ALG_ECDSA_SHA384\nTEE_TYPE_ECDSA_KEYPAIR TEE_MODE_SIGN\nTEE_ALG_ECDSA_SHA512\nTEE_TYPE_ECDSA_PUBLIC_KEY TEE_MODE_VERIFY\nTEE_ALG_ECDSA_SHA3_224\nTEE_ALG_ECDSA_SHA3_256\nTEE_ALG_ECDSA_SHA3_384\nTEE_ALG_ECDSA_SHA3_512\nTEE_TYPE_ED25519_KEYPAIR TEE_MODE_SIGN\nTEE_ALG_ED25519\nTEE_TYPE_ED25519_PUBLIC_KEY TEE_MODE_VERIFY\nTEE_TYPE_ED448_KEYPAIR TEE_MODE_SIGN\nTEE_ALG_ED448\nTEE_TYPE_ED448_PUBLIC_KEY TEE_MODE_VERIFY\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 186,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 186",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 187 / 375\nAlgorithm Object Type Modes\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA1\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA224\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA256\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA384\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA512\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA3_224\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA3_256\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA3_384\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA3_512\nTEE_TYPE_RSA_KEYPAIR TEE_MODE_SIGN\nTEE_ALG_RSASSA_PKCS1_V1_5_MD5\nTEE_TYPE_RSA_PUBLIC_KEY TEE_MODE_VERIFY\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA1\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA224\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA256\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA384\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA512\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA3_224\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA3_256\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA3_384\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA3_512\nTEE_TYPE_SM2_DSA_KEYPAIR TEE_MODE_SIGN\nTEE_ALG_SM2_DSA_SM3\nTEE_TYPE_SM2_DSA_PUBLIC_KEY TEE_MODE_VERIFY\nTEE_ALG_DH_DERIVE_SHARED_SECRET TEE_TYPE_DH_KEYPAIR TEE_MODE_DERIVE\nTEE_ALG_ECDH_DERIVE_SHARED_SECRET TEE_TYPE_ECDH_KEYPAIR TEE_MODE_DERIVE\nTEE_ALG_X25519 TEE_TYPE_X25519_KEYPAIR TEE_MODE_DERIVE\nTEE_ALG_X448 TEE_TYPE_X448_KEYPAIR TEE_MODE_DERIVE\nTEE_ALG_SM2_KEP TEE_TYPE_SM2_KEP_KEYPAIR TEE_MODE_DERIVE\nTEE_ALG_HKDF TEE_TYPE_HKDF TEE_MODE_DERIVE\nNote that all algorithms listed in Table 6-4 SHALL be supported by any compliant implementation (except the\nelliptic curve algorithms, which are optional; Table 6-11 identifies those algorithms explicitly). However, a\nparticular implementation may also support more implementation-defined algorithms, modes, or key sizes.\nParameters\n• operation: Reference to generated operation handle\n• algorithm: One of the cipher algorithms listed in section 6.10.1\n• mode: The operation mode\n• maxKeySize: Maximum key size in bits for the operation – must be a valid value for the algorithm as\ndefined in Table 5-9.\nSpecification Number: 10 Function Number: 0xC01\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 187,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 187",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "188 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_OUT_OF_MEMORY: If there are not enough resources to allocate the operation\n• TEE_ERROR_NOT_SUPPORTED: If the mode is not compatible with the algorithm or key size or if the\nalgorithm is not one of the listed algorithms or if maxKeySize is not appropriate for the algorithm.\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 188,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 188",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 189 / 375\n6.2.2 TEE_FreeOperation\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nvoid TEE_FreeOperation( TEE_OperationHandle operation );\nDescription\nThe TEE_FreeOperation function deallocates all resources associated with an operation handle. After this\nfunction is called, the operation handle is no longer valid. All cryptographic material in the operation is\ndestroyed.\nThe function does nothing if operation is TEE_HANDLE_NULL.\nParameters\n• operation: Reference to operation handle\nSpecification Number: 10 Function Number: 0xC03\nPanic Reasons\n• If operation is not a valid handle on an operation and is not equal to TEE_HANDLE_NULL.\n• If the implementation detects any other error.\nBackward Compatibility\nPrior to TEE Internal Core API v1.2, TEE_FreeOperation MAY panic if operation is TEE_HANDLE_NULL.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 189,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.2.2 TEE_FreeOperation",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_FreeOperation",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "190 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.2.3 TEE_GetOperationInfo\nSince: TEE Internal API v1.0\nvoid TEE_GetOperationInfo(\nTEE_OperationHandle operation,\n[out] TEE_OperationInfo* operationInfo );\nDescription\nThe TEE_GetOperationInfo function returns information about an operation handle. It fills the following\nfields in the structure operationInfo (defined in section 6.2.1):\n• algorithm, mode, maxKeySize: The parameters passed to the function\nTEE_AllocateOperation\n• operationClass: One of the constants from Table 5-6, describing the kind of operation.\n• keySize:\nFor an operation that makes no use of keys, 0.\no\nFor an operation that uses a single key, the actual size of this key.\no\nFor an operation that uses multiple keys, 0.\no\n The actual value of keySize can be obtained by calling the\nTEE_GetOperationInfoMultiple routine defined in section 6.2.4.\n• requiredKeyUsage:\nFor an operation that makes no use of keys, 0.\no\nFor an operation that uses a single key, a bit vector that describes the necessary bits in the object\no\nusage for TEE_SetOperationKey to succeed without panicking.\nFor an operation that uses multiple keys, 0.\no\n The actual value of requiredKeyUsage can be obtained by calling the\nTEE_GetOperationInfoMultiple routine defined in section 6.2.4.\n• digestLength:\nFor non-XOF MAC, AE, or Digest, describes the number of bytes in the digest or tag.\no\nFor XOF operations, 0.\no\nFor all other operations, this value is undefined.\no\n• handleState: A bit vector describing the current state of the operation. Contains one or more of the\nfollowing flags:\nTEE_HANDLE_FLAG_EXPECT_TWO_KEYS: Set if the algorithm expects two keys to be set, using\no\nTEE_SetOperationKey2.\nTEE_HANDLE_FLAG_KEY_SET: Set if the required operation key has been set. Always set for\no\ndigest operations.\nTEE_HANDLE_FLAG_INITIALIZED: For multi-stage operations, this flag is set using one of the\no\nTEE_XXXInit functions, and reset (set back to zero) using one of the TEE_XXXFinal functions\nor the TEE_ResetOperation function. This flag is always set for Digest operations.\nTEE_HANDLE_FLAG_EXTRACTING: Set for Digest operations when the operation is in the\no\nextracting state.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 190,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.2.3 TEE_GetOperationInfo",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetOperationInfo",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 191 / 375\nParameters\n• operation: Handle on the operation\n• operationInfo: Pointer to a structure filled with the operation information\nSpecification Number: 10 Function Number: 0xC04\nPanic Reasons\n• If operation is not a valid opened operation handle.\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 191,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 191",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "192 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.2.4 TEE_GetOperationInfoMultiple\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nTEE_Result TEE_GetOperationInfoMultiple(\nTEE_OperationHandle operation,\n[outbuf] TEE_OperationInfoMultiple* operationInfoMultiple, size_t*\noperationSize );\nDescription\nThe TEE_GetOperationInfoMultiple function returns information about an operation handle. It fills the\nfollowing fields in the structure operationInfoMultiple (defined in section 6.1.3):\n• algorithm, mode, maxKeySize: The parameters passed to the function\nTEE_AllocateOperation.\n• operationClass: One of the constants from Table 5-6, describing the kind of operation.\n• digestLength: For a MAC, AE, or Digest, describes the number of bytes in the digest or tag. For\nother kinds of operation, or when the digest length is unknown, this value SHALL be zero.\n• handleState: A bit vector describing the current state of the operation. Contains one or more of the\nfollowing flags:\nTEE_HANDLE_FLAG_EXPECT_TWO_KEYS: Set if the algorithm expects two keys to be set, using\no\nTEE_SetOperationKey2.\nTEE_HANDLE_FLAG_KEY_SET: Set if all required operation keys have been set. Always set for\no\ndigest operations.\nTEE_HANDLE_FLAG_INITIALIZED: For multi-stage operations, this flag is set using one of the\no\nTEE_XXXInit functions, and reset (set back to zero) using one of the TEE_XXXFinal functions\nor the TEE_ResetOperation function. This flag is always set for Digest operations.\nTEE_HANDLE_FLAG_EXTRACTING: Set for Digest operations when the operation is in the\no\nextracting state.\n• operationState: One of the values from Table 5-7. This is set to\nTEE_OPERATION_STATE_ACTIVE if the operation is in active state, to\nTEE_OPERATION_STATE_INITIAL if the operation is in the initial state, and to\nTEE_OPERATION_STATE_EXTRACTING if the operation is in the extracting state.\n• numberOfKeys: This is set to the number of keys required by this operation. It indicates the number\nof TEE_OperationInfoKey structures which follow. May be 0 for an operation which requires no\nkeys.\n• keyInformation: This array contains numberOfKeys entries, each of which defines the details for\none key used by the operation, in the order they are defined. If the buffer is larger than required to\nsupport numberOfKeys entries, the additional space is not initialized or modified. For each element:\nkeySize: If a key is programmed in the operation, the actual size of this key; otherwise 0.\no\nrequiredKeyUsage: A bit vector that describes the necessary bits in the object usage for\no\nTEE_SetOperationKey or TEE_SetOperationKey2 to succeed without panicking.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 192,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.2.4 TEE_GetOperationInfoMultiple",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetOperationInfoMultiple",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 193 / 375\nParameters\n• operation: Handle on the operation\n• operationInfoMultiple, operationSize: Buffer filled with the operation information. The\nnumber of keys which can be contained is given by:\n(*operationSize–\nsizeof(TEE_OperationInfoMultiple))/sizeof(TEE_OperationInfoKey)+1\nSpecification Number: 10 Function Number: 0xC08\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_SHORT_BUFFER: If the operationInfo buffer is not large enough to hold a\nTEE_OperationInfoMultiple (defined in section 6.1.3) structure containing the number of keys\nrequired by a TEE_Operation of the type supplied. Table C-1 points to the normative references\nwhich define this information.\nPanic Reasons\n• If operation is not a valid opened operation handle.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for operationSize.\nTEE Internal Core API v1.2 clarified the legal values for digestLength.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 193,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 193",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_OperationInfoMultiple",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "194 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.2.5 TEE_ResetOperation\nSince: TEE Internal API v1.0\nvoid TEE_ResetOperation( TEE_OperationHandle operation );\nDescription\nFor a multi-stage operation, the TEE_ResetOperation function resets the TEE_OperationHandle to the\nstate after the initial TEE_AllocateOperation call with the addition of any keys which were configured\nsubsequent to this so that the TEE_OperationHandle can be reused with the same keys.\nThis function can be called on any operation and at any time after the key is set, but is meaningful only for the\nmulti-stage operations, i.e. symmetric ciphers, MACs, AEs, and digests.\nWhen such a multi-stage operation is active, i.e. when it has been initialized but not yet successfully finalized,\nthen the operation is reset to initial state. The operation key(s) are not cleared.\nParameters\n• operation: Handle on the operation\nSpecification Number: 10 Function Number: 0xC05\nPanic Reasons\n• If operation is not a valid opened operation handle.\n• If the key has not been set yet.\n• Hardware or cryptographic algorithm failure\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 194,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.2.5 TEE_ResetOperation",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_ResetOperation",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 195 / 375\n6.2.6 TEE_SetOperationKey\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_SetOperationKey(\nTEE_OperationHandle operation,\nTEE_ObjectHandle key );\nDescription\nThe TEE_SetOperationKey function programs the key of an operation; that is, it associates an operation\nwith a key.\nThe key material is copied from the key object handle into the operation. After the key has been set, there is\nno longer any link between the operation and the key object. The object handle can be closed or reset and\nthis will not affect the operation. This copied material exists until the operation is freed using\nTEE_FreeOperation or another key is set into the operation.\nThis function accepts handles on both transient key objects and persistent key objects.\nThe operation SHALL be in initial state afterwards.\nKey object types referenced in Table 5-9 SHALL be sized as defined in the table; otherwise the key object size\nmay have any value up to the maximum key size compatible with the operation. The operation mode SHALL\nbe compatible with key usage:\n• In general, the operation mode SHALL be allowed in the object usage.\n• For the TEE_ALG_RSA_NOPAD algorithm:\nThe only supported modes are TEE_MODE_ENCRYPT and TEE_MODE_DECRYPT.\no\nFor TEE_MODE_ENCRYPT, the object usage SHALL contain both the TEE_USAGE_ENCRYPT and\no\nTEE_USAGE_VERIFY flags.\nFor TEE_MODE_DECRYPT, the object usage SHALL contain both the TEE_USAGE_DECRYPT and\no\nTEE_USAGE_SIGN flags.\n• For a public key object, the allowed operation modes depend on the type of key and are specified in\nthe following table.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 195,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.2.6 TEE_SetOperationKey",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_SetOperationKey",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "196 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nTable 6-5: Public Key Allowed Modes\nKey Type Allowed Operation Modes\nTEE_TYPE_RSA_PUBLIC_KEY TEE_MODE_VERIFY or TEE_MODE_ENCRYPT\nTEE_TYPE_DSA_PUBLIC_KEY TEE_MODE_VERIFY\nTEE_TYPE_ECDSA_PUBLIC_KEY (optional) TEE_MODE_VERIFY\nTEE_TYPE_ED25519_PUBLIC_KEY (optional)\nTEE_TYPE_ED448_PUBLIC_KEY (optional)\nTEE_TYPE_ECDH_PUBLIC_KEY (optional) TEE_MODE_DERIVE\nTEE_TYPE_X25519_PUBLIC_KEY (optional)\nTEE_TYPE_X448_PUBLIC_KEY (optional)\nTEE_TYPE_SM2_DSA_PUBLIC_KEY (optional) TEE_MODE_VERIFY\nTEE_TYPE_SM2_KEP_PUBLIC_KEY (optional) TEE_MODE_DERIVE\nTEE_TYPE_SM2_PKE_PUBLIC_KEY (optional) TEE_MODE_ENCRYPT or TEE_MODE_DECRYPT\n• If the object is a key-pair then the key parts used in the operation depend on the operation mode as\ndefined in the following table.\nTable 6-6: Key-Pair Parts for Operation Modes\nOperation Mode Key Parts Used\nTEE_MODE_VERIFY Public\nTEE_MODE_SIGN Private\nTEE_MODE_ENCRYPT Public\nTEE_MODE_DECRYPT Private\nTEE_MODE_DERIVE Public and Private\nIf key is set to TEE_HANDLE_NULL, then the operation key is cleared.\nIf a key is present in the operation, then it is cleared and all key material copied into the operation is destroyed\nbefore the new key is inserted.\nParameters\n• operation: Operation handle\n• key: A handle on a key object\nSpecification Number: 10 Function Number: 0xC06\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_CORRUPT_OBJECT: If the object is corrupt. The object handle SHALL behave based on\nthe gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the persistent object is stored in a storage area which is\ncurrently inaccessible.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 196,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 196",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_TYPE_ECDH_PUBLIC_KEY,TEE_TYPE_ECDSA_PUBLIC_KEY,TEE_TYPE_ED25519_PUBLIC_KEY,TEE_TYPE_ED448_PUBLIC_KEY,TEE_TYPE_SM2_DSA_PUBLIC_KEY,TEE_TYPE_SM2_KEP_PUBLIC_KEY,TEE_TYPE_SM2_PKE_PUBLIC_KEY,TEE_TYPE_X25519_PUBLIC_KEY,TEE_TYPE_X448_PUBLIC_KEY",
          "has_api_definitions": true,
          "api_count": 9
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 197 / 375\nPanic Reasons\n• If operation is not a valid opened operation handle.\n• If key is not TEE_HANDLE_NULL and is not a valid handle on a key object.\n• If key is not initialized.\n• If the type, size, or usage of key is not compatible with the algorithm, mode, or size of the\noperation.\n• If the flag TEE_HANDLE_FLAG_INITIALIZED is set on the operation.\n• Hardware or cryptographic algorithm failure\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.2 and v1.2.1 specified the [in] annotation on key, now deleted.\nPrior to TEE Internal Core API v1.3, the behavior associated with the return code\nTEE_ERROR_CORRUPT_OBJECT resulted in the object handle always being closed.\nPrior to TEE Internal Core API v1.3, a panic resulted when operation was not in the initial state.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 197,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 197",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "198 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.2.7 TEE_SetOperationKey2\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_SetOperationKey2(\nTEE_OperationHandle operation,\nTEE_ObjectHandle key1,\nTEE_ObjectHandle key2 );\nDescription\nThe TEE_SetOperationKey2 function initializes an existing operation with two keys. This is used only for\nthe algorithms TEE_ALG_AES_XTS and TEE_ALG_SM2_KEP.\nThis function works like TEE_SetOperationKey except that two keys are set instead of a single key.\nkey1 and key2 SHALL both be non-NULL or both NULL. key1 and key2 SHALL NOT refer to keys with\nbitwise identical TEE_ATTR_SECRET_VALUE attributes.\n• For TEE_ALG_SM2_KEP, key1 is the handle to the key object that contains the long-term key, and\nkey2 is the handle to the key object that contains the ephemeral key.\n• For TEE_ALG_AES_XTS, key1 and key2 SHALL support key sizes of 128 and 256 bits.\nParameters\n• operation: Operation handle\n• key1: A handle on a key object\n• key2: A handle on a key object\nSpecification Number: 10 Function Number: 0xC07\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_CORRUPT_OBJECT: If the key1 object is corrupt. The object handle SHALL behave\nbased on the gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_CORRUPT_OBJECT_2: If the key2 object is corrupt. The object handle SHALL behave\nbased on the gpd.ta.doesNotCloseHandleOnCorruptObject property.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE: If the key1 object is stored in a storage area which is\ncurrently inaccessible.\n• TEE_ERROR_STORAGE_NOT_AVAILABLE_2: If the key2 object is stored in a storage area which is\ncurrently inaccessible.\n• TEE_ERROR_SECURITY: If the key1 object and the key2 object are the same.\nPanic Reasons\n• If operation is not a valid opened operation handle.\n• If key1 and key2 are not both TEE_HANDLE_NULL and key1 or key2 or both are not valid\nhandles on a key object.\n• If key1 and/or key2 are not initialized.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 198,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.2.7 TEE_SetOperationKey2",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_SetOperationKey2",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 199 / 375\n• If the type, size, or usage of key1 or key2 is not compatible with the algorithm, mode, or size of the\noperation.\n• If operation is not in initial state.\n• Hardware or cryptographic algorithm failure\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nThe TEE_ERROR_SECURITY return code was added in TEE Internal Core API v1.2.\nTEE Internal Core API v1.2 and v1.2.1 specified the [in] annotation on key1 and key2, now deleted.\nIf a TA indicates backward compatibility with a version of this specification before v1.2, the implementation\nMAY allow key1 and key2 to be the same.\nPrior to TEE Internal Core API v1.3, the behavior associated with the return codes\nTEE_ERROR_CORRUPT_OBJECT and TEE_ERROR_CORRUPT_OBJECT_2 resulted in the object handle always\nbeing closed.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 199,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 199",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "200 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.2.8 TEE_CopyOperation\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nvoid TEE_CopyOperation(\nTEE_OperationHandle dstOperation,\nTEE_OperationHandle srcOperation );\nDescription\nThe TEE_CopyOperation function copies an operation state from one operation handle into another\noperation handle. This also copies the key material associated with the source operation.\nThe state of srcOperation including the key material currently set up is copied into dstOperation.\nThis function is useful in the following use cases:\n• “Forking” a digest operation after feeding some amount of initial data\n• Computing intermediate digests\nThe algorithm and mode of dstOperation SHALL be equal to the algorithm and mode of srcOperation.\nThe state of srcOperation (initial/active/extracting) is copied to dstOperation.\nIf srcOperation has no key programmed, then the key in dstOperation is cleared. If there is a key\nprogrammed in srcOperation, then the maximum key size of dstOperation SHALL be greater than or\nequal to the actual key size of srcOperation.\nParameters\n• dstOperation: Handle on the destination operation\n• srcOperation: Handle on the source operation\nSpecification Number: 10 Function Number: 0xC02\nPanic Reasons\n• If dstOperation or srcOperation is not a valid opened operation handle.\n• If the algorithm or mode differ in dstOperation and srcOperation.\n• If srcOperation has a key and its size is greater than the maximum key size of dstOperation.\n• Hardware or cryptographic algorithm failure.\n• If the implementation detects any other error.\nBackward Compatibility\nTEE Internal Core API v1.2 and v1.2.1 specified the [out] and [in] annotations, now deleted.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 200,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.2.8 TEE_CopyOperation",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CopyOperation",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 201 / 375\n6.2.9 TEE_IsAlgorithmSupported\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_IsAlgorithmSupported(\nuint32_t algId\nuint32_t element );\nDescription\nThe TEE_IsAlgorithmSupported function can be used to determine whether a combination of algId and\nelement is supported. Implementations SHALL return TEE_ERROR_NOT_SUPPORTED for any value of algId\nor element which is reserved for future use.\nParameters\n• algId: An algorithm identifier from Table 6-11\n• element: A cryptographic element from Table 6-14. Where algId fully defines the required\nsupport, the special value TEE_CRYPTO_ELEMENT_NONE SHOULD be used.\nSpecification Number: 10 Function Number: 0xC09\nReturn Code\n• TEE_SUCCESS: The requested combination of algId and element is supported.\n• TEE_ERROR_NOT_SUPPORTED: The requested combination of algId and element is not\nsupported.\nPanic Reasons\nTEE_IsAlgorithmSupported SHALL NOT panic.\nBackward Compatibility\nTEE Internal Core API v1.2 and v1.2.1 specified the [in] annotation on algId and element, now deleted.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 201,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.2.9 TEE_IsAlgorithmSupported",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_IsAlgorithmSupported",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "202 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.3 Message Digest Functions\nFigure 6-1 illustrates how a TEE_OperationHandle is manipulated by the Message Digest functions. The\nstate diagram is expressed in terms of the state that is revealed in the handleState flags by\nTEE_GetOperationInfo and TEE_GetOperationInfoMultiple.\nFigure 6-1: State Diagram for TEE_OperationHandle for Message Digest Functions (Informative)\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 202,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.3 Message Digest Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 203 / 375\n6.3.1 TEE_DigestUpdate\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nvoid TEE_DigestUpdate(\nTEE_OperationHandle operation,\n[inbuf] void* chunk, size_t chunkSize );\nDescription\nThe TEE_DigestUpdate function accumulates message data for hashing. The message does not have to\nbe block aligned. Subsequent calls to this function are possible.\nThe operation may be in either initial or active state and becomes active.\nParameters\n• operation: Handle of a running Message Digest operation\n• chunk, chunkSize: Chunk of data to be hashed\nSpecification Number: 10 Function Number: 0xD02\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_DIGEST.\n• If input data exceeds maximum length for algorithm.\n• Hardware or cryptographic algorithm failure.\n• It is illegal to call TEE_DigestUpdate when in the extracting state.\n• If the implementation detects any other error.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for chunkSize.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 203,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.3.1 TEE_DigestUpdate",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_DigestUpdate",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "204 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.3.2 TEE_DigestDoFinal\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_DigestDoFinal(\nTEE_OperationHandle operation,\n[inbuf] void* chunk, size_t chunkLen,\n[outbuf] void* hash, size_t *hashLen );\nDescription\nThe TEE_DigestDoFinal function finalizes the message digest operation and produces the message hash.\nAfterwards the Message Digest operation is reset to initial state and can be reused.\nThe input operation may be in either initial, active, or extracting state and becomes initial.\nIf TEE_DigestExtract has returned some or all of a digest, then TEE_DigestDoFinal will only return the\nremaining part, which may be zero in length.\nIf you are using an XOF function, hashLen bytes will be returned.\nParameters\n• operation: Handle of a running Message Digest operation\n• chunk, chunkLen: Last chunk of data to be hashed\n• hash, hashLen: Output buffer filled with the message hash\nSpecification Number: 10 Function Number: 0xD01\nReturn Code\n• TEE_SUCCESS: On success.\n• TEE_ERROR_SHORT_BUFFER: Only returned in the case of a non-XOF operation. Returned if the\noutput buffer is too small. In this case, the operation is not finalized.\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_DIGEST.\n• If input data exceeds maximum length for algorithm.\n• Hardware or cryptographic algorithm failure.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\n• It is illegal to call TEE_DigestDoFinal with chunklen > 0 when in the extracting state.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for chunkLen and hashLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 204,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.3.2 TEE_DigestDoFinal",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_DigestDoFinal",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 205 / 375\n6.3.3 TEE_DigestExtract\nSince: TEE Internal Core API v1.3\nTEE_Result TEE_DigestExtract(\nTEE_OperationHandle operation,\n[outbuf] void* hash,\nsize_t *hashLen );\nDescription\nThe TEE_DigestExtract function extracts some or all of the digest depending on the size of the hash\nbuffer.\nThe operation may be in either initial, active, or extracting state and the state becomes extracting.\nSubsequent calls to this function are possible.\nIf called with a non-XOF DIGEST operation handle (e.g. SHA-3), then TEE_DigestExtract will attempt to\nreturn the digest material from that digest function. Depending on whether there is still digest material to return,\na subsequent call to TEE_DigestExtract or TEE_DigestDoFinal may return no data.\nParameters\n• operation: Handle of a running Message Digest operation\n• hash: Filled with the unreported part of the digest\n• hashLen: Length of the unreported part of the digest\nSpecification Number: 10 Function Number: 0xD03\nReturn Code\n• TEE_SUCCESS: On success.\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_DIGEST.\n• Hardware or cryptographic algorithm failure\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 205,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.3.3 TEE_DigestExtract",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_DigestExtract",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "206 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.4 Symmetric Cipher Functions\nThese functions define the way to perform symmetric cipher operations, such as AES. They cover both block\nciphers and stream ciphers.\nFigure 6-2 illustrates how a TEE_OperationHandle is manipulated by the Symmetric Cipher functions. The\nstate diagram is expressed in terms of the state that is revealed in the handleState flags by\nTEE_GetOperationInfo and TEE_GetOperationInfoMultiple.\nFigure 6-2: State Diagram for TEE_OperationHandle for Symmetric Cipher Functions (Informative)\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.\nnoitarepOeerF_EET\nStart Key\nLifecycle operations\nTEE_AllocateOperation Alternate use cases\nTEE_CopyOperation* Cryptographic operations\nTEE_SetOperationKey[2] denotes either\nTEE_SetOperationKey or TEE_SetOperationKey2\nTEE_SetOperationKey[2]**\n* The state of the copied handle determines the state of the\ncreated TEE_OperationHandle\n** TEE_SetOperationKey[2] called with a key set to\nTEE_SetOperationKey[2]**\nnot KEY_SET && TEE_HANDLE_NULL\nnot INITIALIZED\nTEE_SetOperationKey[2]\nTEE_ResetOperation\nTEE_CopyOperation*\nKEY_SET &&\nnot INITIALIZED\nStart\nTEE_ResetOperation\nTEE_CipherInit TEE_CipherDoFinal\nTEE_SetOperationKey[2]\nTEE_FreeOperation KEY_SET && TEE_CipherInit\nINITIALIZED TEE_CipherUpdate\nEnd\nTEE_SetOperationKey[2]**\nTEE_CopyOperation*\nStart",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 206,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.4 Symmetric Cipher Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 207 / 375\n6.4.1 TEE_CipherInit\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nvoid TEE_CipherInit(\nTEE_OperationHandle operation,\n[inbuf] void* IV, size_t IVLen );\nDescription\nThe TEE_CipherInit function starts the symmetric cipher operation.\nThe operation SHALL have been associated with a key.\nIf the operation is in active state, it is reset and then initialized.\nIf the operation is in initial state, it is moved to active state.\nThe counter for algorithm TEE_ALG_AES_CTR or TEE_ALG_SM4_CTR SHALL be encoded as a 16-byte buffer\nin big-endian form. Between two consecutive blocks, the counter SHALL be incremented by 1. If it reaches the\nlimit of all 128 bits set to 1, it SHALL wrap around to 0.\nParameters\n• operation: A handle on an opened cipher operation setup with a key\n• IV, IVLen: Buffer containing the operation Initialization Vector as appropriate (as indicated in the\nfollowing table).\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 207,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.4.1 TEE_CipherInit",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CipherInit",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "208 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nTable 6-6b: Symmetric Encrypt/Decrypt Operation Parameters\nAlgorithm IV Required Meaning of IV\nTEE_ALG_AES_CBC_NOPAD Yes\nTEE_ALG_AES_CCM Yes Nonce value\nTEE_ALG_AES_CTR Yes Initial Counter Value\nTEE_ALG_AES_CTS Yes\nTEE_ALG_AES_ECB_NOPAD No\nTEE_ALG_AES_GCM Yes Nonce value\nTEE_ALG_AES_XTS Yes Tweak value\nTEE_ALG_DES_CBC_NOPAD Yes\nTEE_ALG_DES_ECB_NOPAD No\nTEE_ALG_DES3_CBC_NOPAD Yes\nTEE_ALG_DES3_ECB_NOPAD No\nTEE_ALG_SM4_CBC_NOPAD Yes IV SHOULD be randomly generated. This is the\nresponsibility of the caller.\nTEE_ALG_SM4_CBC_PKCS5 Yes IV SHOULD be randomly generated. This is the\nresponsibility of the caller.\nTEE_ALG_SM4_CTR Yes Initial Counter Value\nTEE_ALG_SM4_ECB_NOPAD No\nTEE_ALG_SM4_ECB_PKCS5 No\nSpecification Number: 10 Function Number: 0xE02\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_CIPHER.\n• If no key is programmed in the operation.\n• If the Initialization Vector does not have the length required by the algorithm.\n• Hardware or cryptographic algorithm failure\n• If the implementation detects any other error.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for IVLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 208,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 208",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 209 / 375\n6.4.2 TEE_CipherUpdate\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_CipherUpdate(\nTEE_OperationHandle operation,\n[inbuf] void* srcData, size_t srcLen,\n[outbuf] void* destData, size_t *destLen );\nDescription\nThe TEE_CipherUpdate function encrypts or decrypts input data.\nInput data does not have to be a multiple of block size. Subsequent calls to this function are possible. Unless\none or more calls of this function have supplied sufficient input data, no output is generated. The cipher\noperation is finalized with a call to TEE_CipherDoFinal.\nThe buffers srcData and destData SHALL be either completely disjoint or equal in their starting positions.\nThe operation SHALL be in active state.\nParameters\n• operation: Handle of a running Cipher operation\n• srcData, srcLen: Input data buffer to be encrypted or decrypted\n• destData, destLen: Output buffer\nSpecification Number: 10 Function Number: 0xE03\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_SHORT_BUFFER: If the output buffer is not large enough to contain the output. In this\ncase, the input is not fed into the algorithm.\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_CIPHER.\n• If the operation has not been started yet with TEE_CipherInit or has already been finalized.\n• If operation is not in active state.\n• Hardware or cryptographic algorithm failure.\n• If srcData and destData are not completely disjoint or do not have equal starting positions.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for srcLen and destLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 209,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.4.2 TEE_CipherUpdate",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CipherUpdate",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "210 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.4.3 TEE_CipherDoFinal\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_CipherDoFinal(\nTEE_OperationHandle operation,\n[inbuf] void* srcData, size_t srcLen,\n[outbufopt] void* destData, size_t *destLen );\nDescription\nThe TEE_CipherDoFinal function finalizes the cipher operation, processing data that has not been\nprocessed by previous calls to TEE_CipherUpdate as well as data supplied in srcData. The operation\nhandle can be reused or re-initialized.\nThe buffers srcData and destData SHALL be either completely disjoint or equal in their starting positions.\nThe operation SHALL be in active state. If the result is not TEE_ERROR_SHORT_BUFFER, the operation enters\ninitial state afterwards.\nParameters\n• operation: Handle of a running Cipher operation\n• srcData, srcLen: Reference to final chunk of input data to be encrypted or decrypted\n• destData, destLen: Output buffer. Can be omitted if the output is to be discarded, e.g. because it is\nknown to be empty.\nSpecification Number: 10 Function Number: 0xE01\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_SHORT_BUFFER: If the output buffer is not large enough to contain the output\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_CIPHER.\n• If the operation has not been started yet with TEE_CipherInit or has already been finalized.\n• If the total length of the input is not a multiple of a block size when the algorithm of the operation is a\nsymmetric block cipher which does not specify padding.\n• If operation is not in active state.\n• Hardware or cryptographic algorithm failure.\n• If srcData and destData are not completely disjoint or do not have equal starting positions.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for srcLen and destLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 210,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.4.3 TEE_CipherDoFinal",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CipherDoFinal",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 211 / 375\n6.5 MAC Functions\nThese functions are used to perform MAC (Message Authentication Code) operations, such as HMAC or\nAES-CMAC operations.\nThese functions are not used for Authenticated Encryption algorithms, which SHALL use the functions defined\nin section 6.6.\nFigure 6-3 illustrates how a TEE_OperationHandle is manipulated by the MAC functions. The state diagram\nis expressed in terms of the state that is revealed in the handleState flags by TEE_GetOperationInfo\nand TEE_GetOperationInfoMultiple.\nFigure 6-3: State Diagram for TEE_OperationHandle for MAC Functions (Informative)\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 211,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.5 MAC Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "212 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.5.1 TEE_MACInit\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nvoid TEE_MACInit(\nTEE_OperationHandle operation,\nvoid* IV, size_t IVLen );\nDescription\nThe TEE_MACInit function initializes a MAC operation.\nThe operation SHALL have been associated with a key.\nIf the operation is in active state, it is reset and then initialized.\nIf the operation is in initial state, it moves to active state.\nIf the MAC algorithm does not require an IV, the parameters IV, IVLen are ignored.\nParameters\n• operation: Operation handle\n• IV, IVLen: Input buffer containing the operation Initialization Vector, if applicable\nSpecification Number: 10 Function Number: 0xF03\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_MAC.\n• If no key is programmed in the operation.\n• If the Initialization Vector does not have the length required by the algorithm.\n• Hardware or cryptographic algorithm failure\n• If the implementation detects any other error.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for IVLen.\nPrior to TEE Internal Core API v1.3, TEE_MACInit specified the [inbuf] annotation on IV, now deleted.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 212,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.5.1 TEE_MACInit",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_MACInit",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 213 / 375\n6.5.2 TEE_MACUpdate\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nvoid TEE_MACUpdate(\nTEE_OperationHandle operation,\n[inbuf] void* chunk, size_t chunkSize );\nDescription\nThe TEE_MACUpdate function accumulates data for a MAC calculation.\nInput data does not have to be a multiple of the block size. Subsequent calls to this function are possible.\nTEE_MACComputeFinal or TEE_MACCompareFinal are called to complete the MAC operation.\nThe operation SHALL be in active state.\nParameters\n• operation: Handle of a running MAC operation\n• chunk, chunkSize: Chunk of the message to be MACed\nSpecification Number: 10 Function Number: 0xF04\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_MAC.\n• If the operation has not been started yet with TEE_MACInit or has already been finalized.\n• If input data exceeds maximum length for algorithm.\n• If operation is not in active state.\n• Hardware or cryptographic algorithm failure\n• If the implementation detects any other error.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for chunkSize.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 213,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.5.2 TEE_MACUpdate",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_MACUpdate",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "214 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.5.3 TEE_MACComputeFinal\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_MACComputeFinal(\nTEE_OperationHandle operation,\n[inbuf] void* message, size_t messageLen,\n[outbuf] void* mac, size_t *macLen );\nDescription\nThe TEE_MACComputeFinal function finalizes the MAC operation with a last chunk of message, and\ncomputes the MAC. Afterwards the operation handle can be reused or re-initialized with a new key.\nThe operation SHALL be in active state. If the result is not TEE_ERROR_SHORT_BUFFER, the operation enters\ninitial state afterwards.\nParameters\n• operation: Handle of a MAC operation\n• message, messageLen: Input buffer containing a last message chunk to MAC\n• mac, macLen: Output buffer filled with the computed MAC\nSpecification Number: 10 Function Number: 0xF02\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_SHORT_BUFFER: If the output buffer is not large enough to contain the computed MAC\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_MAC.\n• If the operation has not been started yet with TEE_MACInit or has already been finalized.\n• If input data exceeds maximum length for algorithm.\n• If operation is not in active state.\n• Hardware or cryptographic algorithm failure\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for messageLen and macLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 214,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.5.3 TEE_MACComputeFinal",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_MACComputeFinal",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 215 / 375\n6.5.4 TEE_MACCompareFinal\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_MACCompareFinal(\nTEE_OperationHandle operation,\n[inbuf] void* message, size_t messageLen,\n[inbuf] void* mac, size_t macLen );\nDescription\nThe TEE_MACCompareFinal function finalizes the MAC operation and compares the MAC with the buffer\npassed to the function. Afterwards the operation handle can be reused and initialized with a new key.\nThe operation SHALL be in active state and moves to initial state afterwards.\nParameters\n• operation: Handle of a MAC operation\n• message, messageLen: Input buffer containing the last message chunk to MAC\n• mac, macLen: Input buffer containing the MAC to check\nSpecification Number: 10 Function Number: 0xF01\nReturn Code\n• TEE_SUCCESS: If the computed MAC corresponds to the MAC passed in the parameter mac.\n• TEE_ERROR_MAC_INVALID: If the computed MAC does not correspond to the value passed in the\nparameter mac. This is regarded as a successful conclusion to the operation, and the operation\nmoves to the initial state.\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_MAC.\n• If the operation has not been started yet with TEE_MACInit or has already been finalized.\n• If input data exceeds maximum length for algorithm.\n• If operation is not in active state.\n• Hardware or cryptographic algorithm failure\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for messageLen and macLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 215,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.5.4 TEE_MACCompareFinal",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_MACCompareFinal",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "216 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.6 Authenticated Encryption Functions\nThese functions are used for Authenticated Encryption operations, i.e. the TEE_ALG_AES_CCM and\nTEE_ALG_AES_GCM algorithms.\nFigure 6-4 illustrates how a TEE_OperationHandle is manipulated by the Authenticated Encryption\nfunctions. The state diagram is expressed in terms of the state that is revealed in the handleState flags by\nTEE_GetOperationInfo and TEE_GetOperationInfoMultiple.\nFigure 6-4: State Diagram for TEE_OperationHandle for Authenticated Encryption Functions\n(Informative)\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.\nsnoitcnuF\nnoitarepO\ncireneG\nnoitarepOeerF_EET\nStart Key\nLifecycle operations\nAlternate use cases\nTEE_AllocateOperation\nTEE_CopyOperation* Cryptographic operations\nTEE_SetOperationKey** * The state of the copied handle determines the\nstate of the created TEE_OperationHandle\n** TEE_SetOperationKey called with a key set to\nnot KEY_SET &&\nTEE_SetOperationKey**\nTEE_HANDLE_NULL\nnot INITIALIZED\nTEE_SetOperationKey\nTEE_ResetOperation\nKEY_SET && TEE_CopyOperation*\nnot INITIALIZED\nStart\nTEE_ResetOperation\nTEE_SetOperationKey\nTEE_AEInit\nTEE_AEEncryptFinal\nTEE_AEDecryptFinal\nTEE_FreeOperation\nKEY_SET &&\nINITIALIZED TEE_AEUpdateAAD\nTEE_AEUpdate\nEnd\nTEE_SetOperationKey**\nTEE_CopyOperation *\nStart",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 216,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.6 Authenticated Encryption Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 217 / 375\n6.6.1 TEE_AEInit\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nTEE_Result TEE_AEInit(\nTEE_OperationHandle operation,\n[inbuf] void* nonce, size_t nonceLen,\nuint32_t tagLen,\nsize_t AADLen,\nsize_t payloadLen );\nDescription\nThe TEE_AEInit function initializes an Authentication Encryption operation.\nThe operation must be in the initial state and remains in the initial state afterwards.\nParameters\n• operation: A handle on the operation\n• nonce, nonceLen: The operation nonce or IV\n• tagLen: Size in bits of the tag\nFor AES-GCM, SHALL be 128, 120, 112, 104, or 96\no\nFor AES-CCM, SHALL be 128, 112, 96, 80, 64, 48, or 32\no\n• AADLen: Length in bytes of the AAD\nUsed only for AES-CCM; otherwise ignored.\no\n• payloadLen: Length in bytes of the payload\nUsed only for AES-CCM; otherwise ignored.\no\nSpecification Number: 10 Function Number: 0x1003\nReturn Code\n• TEE_SUCCESS: On success.\n• TEE_ERROR_NOT_SUPPORTED: If the tag length is not supported by the algorithm\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_AE.\n• If no key is programmed in the operation.\n• If the nonce length is not compatible with the length required by the algorithm.\n• If operation is not in initial state.\n• Hardware or cryptographic algorithm failure.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 217,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.6.1 TEE_AEInit",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AEInit",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "218 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nBackward Compatibility\nTEE Internal Core API v1.1 used type uint32_t for nonceLen.\nPrior to TEE Internal Core API v1.2, AADLen and payloadLen used type uint32_t.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 218,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 218",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 219 / 375\n6.6.2 TEE_AEUpdateAAD\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nvoid TEE_AEUpdateAAD(\nTEE_OperationHandle operation,\n[inbuf] void* AADdata, size_t AADdataLen );\nDescription\nThe TEE_AEUpdateAAD function feeds a new chunk of Additional Authentication Data (AAD) to the AE\noperation. Subsequent calls to this function are possible.\nThe operation SHALL be in initial state and remains in initial state afterwards.\nParameters\n• operation: Handle on the AE operation\n• AADdata, AADdataLen: Input buffer containing the chunk of AAD\nSpecification Number: 10 Function Number: 0x1005\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_AE.\n• If the operation has not been started yet using TEE_AEInit, or has already been finalized.\n• If the AAD length would exceed the length permitted by the algorithm.\n• If operation is not in initial state.\n• Hardware or cryptographic algorithm failure\n• If the implementation detects any other error.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for AADdataLen.\nVersions of TEE_AEUpdateAAD prior to TEE Internal Core API v1.2 could be called in any state and entered\nactive state on return.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 219,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.6.2 TEE_AEUpdateAAD",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AEUpdateAAD",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "220 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.6.3 TEE_AEUpdate\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nTEE_Result TEE_AEUpdate(\nTEE_OperationHandle operation,\n[inbuf] void* srcData, size_t srcLen,\n[outbuf] void* destData, size_t *destLen );\nDescription\nThe TEE_AEUpdate function accumulates data for an Authentication Encryption operation.\nInput data does not have to be a multiple of block size. Subsequent calls to this function are possible. Unless\none or more calls of this function have supplied sufficient input data, no output is generated.\nThe buffers srcData and destData SHALL be either completely disjoint or equal in their starting positions.\nWarning: when using this routine to decrypt the returned data may be corrupt since the integrity check is not\nperformed until all the data has been processed. If this is a concern then only use the TEE_AEDecryptFinal\nroutine.\nThe operation may be in either initial or active state. If the result is not TEE_ERROR_SHORT_BUFFER and if\nsrcLen != 0, then the operation will be in active state afterwards.\nParameters\n• operation: Handle of a running AE operation\n• srcData, srcLen: Input data buffer to be encrypted or decrypted\n• destData, destLen: Output buffer\nSpecification Number: 10 Function Number: 0x1004\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_SHORT_BUFFER: If the output buffer is not large enough to contain the output\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_AE.\n• If the operation has not been started yet using TEE_AEInit, or has already been finalized.\n• If the AAD length required by the algorithm has not been provided yet.\n• If the maximum payload length for the algorithm would be exceeded.\n• Hardware or cryptographic algorithm failure.\n• If srcData and destData are not completely disjoint or do not have equal starting positions.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 220,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.6.3 TEE_AEUpdate",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AEUpdate",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 221 / 375\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for srcLen and destLen.\nPrior to TEE Internal Core API v1.2, TEE_AEUpdate could be called in any state and could enter active\nstate on return regardless of the value of srcLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 221,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 221",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "222 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.6.4 TEE_AEEncryptFinal\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nTEE_Result TEE_AEEncryptFinal(\nTEE_OperationHandle operation,\n[inbuf] void* srcData, size_t srcLen,\n[outbufopt] void* destData, size_t* destLen,\n[outbuf] void* tag, size_t* tagLen );\nDescription\nThe TEE_AEEncryptFinal function processes data that has not been processed by previous calls to\nTEE_AEUpdate as well as data supplied in srcData. It completes the AE operation and computes the tag.\nThe operation handle can be reused or newly initialized.\nThe buffers srcData and destData SHALL be either completely disjoint or equal in their starting positions.\nThe operation may be in either initial or active state. If the result is not TEE_ERROR_SHORT_BUFFER, the\noperation enters initial state afterwards.\nParameters\n• operation: Handle of a running AE operation\n• srcData, srcLen: Reference to final chunk of input data to be encrypted\n• destData, destLen: Output buffer. Can be omitted if the output is to be discarded, e.g. because it is\nknown to be empty, as described in section 3.4.5.\n• tag, tagLen: Output buffer filled with the computed tag\nSpecification Number: 10 Function Number: 0x1002\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_SHORT_BUFFER: If the output or tag buffer is not large enough to contain the output\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_AE.\n• If the operation has not been started yet using TEE_AEInit, or has already been finalized.\n• If the required payload or AAD length is known but has not been provided.\n• Hardware or cryptographic algorithm failure.\n• If srcData and destData are not completely disjoint or do not have equal starting positions.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for srcLen, destLen, and tagLen.\nPrior to TEE Internal Core API v1.2, a valid destData buffer was always required.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 222,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.6.4 TEE_AEEncryptFinal",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AEEncryptFinal",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 223 / 375\n6.6.5 TEE_AEDecryptFinal\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_AEDecryptFinal(\nTEE_OperationHandle operation,\n[inbuf] void* srcData, size_t srcLen,\n[outbuf] void* destData, size_t *destLen,\n[in] void* tag, size_t tagLen );\nDescription\nThe TEE_AEDecryptFinal function processes data that has not been processed by previous calls to\nTEE_AEUpdate as well as data supplied in srcData. It completes the AE operation and compares the\ncomputed tag with the tag supplied in the parameter tag.\nThe operation handle can be reused or newly initialized.\nThe buffers srcData and destData SHALL be either completely disjoint or equal in their starting positions.\nThe operation may be in either initial or active state. If the result is not TEE_ERROR_SHORT_BUFFER, the\noperation enters initial state afterwards.\nParameters\n• operation: Handle of a running AE operation\n• srcData, srcLen: Reference to final chunk of input data to be decrypted\n• destData, destLen: Output buffer. Can be omitted if the output is to be discarded, e.g. because it is\nknown to be empty.\n• tag, tagLen: Input buffer containing the tag to compare\nSpecification Number: 10 Function Number: 0x1001\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_SHORT_BUFFER: If the output buffer is not large enough to contain the output\n• TEE_ERROR_MAC_INVALID: If the computed tag does not match the supplied tag. This is regarded as\na successful conclusion to the operation, and the operation moves to the initial state.\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_AE.\n• If the operation has not been started yet using TEE_AEInit, or has already been finalized.\n• If the required payload or AAD length is known but has not been provided.\n• Hardware or cryptographic algorithm failure.\n• If srcData and destData are not completely disjoint or do not have equal starting positions.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for srcLen, destLen, and tagLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 223,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.6.5 TEE_AEDecryptFinal",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AEDecryptFinal",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "224 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.7 Asymmetric Functions\nThese functions allow the encryption and decryption of data using asymmetric algorithms, signatures of\ndigests, and verification of signatures.\nNote that asymmetric encryption is always “single-stage”, which differs from symmetric ciphers which are\nalways “multi-stage”.\nFigure 6-5 illustrates how a TEE_OperationHandle is manipulated by the Asymmetric functions. The state\ndiagram is expressed in terms of the state that is revealed in the handleState flags by\nTEE_GetOperationInfo and TEE_GetOperationInfoMultiple.\nFigure 6-5: State Diagram for TEE_OperationHandle for Asymmetric Functions (Informative)\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 224,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.7 Asymmetric Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 225 / 375\n6.7.1 TEE_AsymmetricEncrypt, TEE_AsymmetricDecrypt\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nTEE_Result TEE_AsymmetricEncrypt(\nTEE_OperationHandle operation,\n[in] TEE_Attribute* params, uint32_t paramCount,\n[inbuf] void* srcData, size_t srcLen,\n[outbuf] void* destData, size_t *destLen );\nTEE_Result TEE_AsymmetricDecrypt(\nTEE_OperationHandle operation,\n[in] TEE_Attribute* params, uint32_t paramCount,\n[inbuf] void* srcData, size_t srcLen,\n[outbuf] void* destData, size_t *destLen );\nDescription\nThe TEE_AsymmetricEncrypt function encrypts a message within an asymmetric operation, and the\nTEE_AsymmetricDecrypt function decrypts the result.\nThese functions can be called only with an operation of certain algorithms. Table 6-4 on page 185 lists the\nalgorithms that are supported for various modes; see the asymmetric algorithms listed for modes\nTEE_MODE_ENCRYPT and TEE_MODE_DECRYPT.\nThe parameters params, paramCount contain the operation parameters listed in the following table.\nTable 6-7: Asymmetric Encrypt/Decrypt Operation Parameters\nAlgorithm Possible Operation Parameters\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_XXX TEE_ATTR_RSA_OAEP_LABEL: This parameter is\noptional. If not present, an empty label is assumed.\nTEE_ATTR_RSA_OAEP_MGF_HASH: This parameter is\noptional. If present, a value from the\nTEE_MODE_DIGEST section of Table 6-4 indicates the\nhash algorithm to be used with the MGF1 function. If\nnot present, the hash algorithm for the MGF1 function is\ndetermined by the implementation.\nSince: TEE Internal Core API v1.3.1:\nIf the selected algorithm is TEE_ALG_RSAES_PKCS1_OAEP_MGF1_XXX, where XXX represents a hash\nalgorithm, this hash algorithm is to be interpreted as the hash algorithm used for the OAEP function.\nPrevious versions of this specification did not provide mechanisms to allow the hash algorithms for OAEP\nand MGF1 to be specified separately and did not specify a default hash algorithm for MGF1.\nImplementations compliant with previous versions of this specification may use different hash algorithms\nwith MGF1 for a given value of TEE_ALG_RSAES_PKCS1_OAEP_MGF1_XXX, and this specification allows\nthe previous behavior of a given implementation to be maintained for backward compatibility.\nIf TEE_ATTR_RSA_OAEP_MGF_HASH is not provided, the hash algorithm is implementation defined. See\nthe backward compatibility notes for this section.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 225,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.7.1 TEE_AsymmetricEncrypt, TEE_AsymmetricDecrypt",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AsymmetricDecrypt,TEE_AsymmetricEncrypt",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "226 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nImplementations SHALL support at least SHA-1, SHA-256, SHA-384, and SHA-512 for MGF1; all other\nalgorithms are optional. An implementation SHALL return TEE_ERROR_NOT_SUPPORTED if an unsupported\nalgorithm is requested.\nSupport for SHA-3 variants of TEE_ALG_RSAES_PKCS1_OAEP_MGF1_XXX is optional. An implementation\nSHALL return TEE_ERROR_NOT_SUPPORTED if an unsupported algorithm is requested.\nParameters\n• operation: Handle on the operation, which SHALL have been suitably set up with an operation key\n• params, paramCount: Optional operation parameters\n• srcData, srcLen: Input buffer\n• destData, destLen: Output buffer\nTEE_AsymmetricDecrypt: Specification Number: 10 Function Number: 0x1101\nTEE_AsymmetricEncrypt: Specification Number: 10 Function Number: 0x1102\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_SHORT_BUFFER: If the output buffer is not large enough to hold the result\n• TEE_ERROR_BAD_PARAMETERS\nIf the length of the input buffer is not consistent with the algorithm or key size. Refer to Table 5-9\no\nfor algorithm references and supported sizes.\nIf an incorrect or inconsistent attribute is detected. The checks that are performed depend on the\no\nimplementation.\n• TEE_ERROR_CIPHERTEXT_INVALID: If the ciphertext is invalid for the given key, for example\nbecause of invalid padding.\n• TEE_ERROR_NOT_SUPPORTED: If the implementation does not support the requested combination of\nhash algorithms for OAEP and MGF1.\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_ASYMMETRIC_CIPHER.\n• If no key is programmed in the operation.\n• If the mode is not compatible with the function.\n• Hardware or cryptographic algorithm failure\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for srcLen and destLen of both functions.\nThe error code TEE_ERROR_CIPHERTEXT_INVALID was added in TEE Internal Core API v1.2.\nPrior to v1.3.1, if the selected algorithm was TEE_ALG_RSAES_PKCS1_OAEP_MGF1_xxx, where xxx\nrepresents a hash algorithm, it was implementation specific as to whether this algorithm applied to the OAEP\nalgorithm, the MGF1 algorithm, or both.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 226,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 226",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 227 / 375\nPrior to v1.3.1, support for TEE_ALG_RSAES_PKCS1_OAEP_MGF1_xxx, where xxx is a SHA-3 algorithm\nvariant, was mandatory.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 227,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 227",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "228 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.7.2 TEE_AsymmetricSignDigest\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_AsymmetricSignDigest(\nTEE_OperationHandle operation,\n[in] TEE_Attribute* params, uint32_t paramCount,\n[inbuf] void* digest, size_t digestLen,\n[outbuf] void* signature, size_t *signatureLen\n);\nDescription\nThe TEE_AsymmetricSignDigest function signs a message digest within an asymmetric operation.\nNote that only an already hashed message can be signed, with the exception of TEE_ALG_ED25519 and\nTEE_ALG_ED448 for which digest and digestLen refer to the message to be signed.\nThis function can be called only with an operation of an algorithm listed for modes TEE_MODE_SIGN and\nTEE_MODE_VERIFY in Table 6-4 on page 185.\nThe parameters params, paramCount contain the operation parameters listed in Table 6-8.\nTable 6-8: Asymmetric Sign/Verify Operation Parameters\nAlgorithm Possible Operation Parameters\nTEE_ALG_RSASSA_ TEE_ATTR_RSA_PSS_SALT_LENGTH: Number of bytes in the salt. This\nPKCS1_PSS_MGF1_XXX parameter is optional. If not present, the salt length is equal to the hash length.\nTEE_ALG_ED25519 Since: TEE Internal Core API v1.3 – See Backward Compatibility note at end of\nsection.\nTEE_ATTR_EDDSA_PREHASH: Optional a and b uint32_t, default 0,0.\nIf a=1 and b=0, then:\no\n The algorithm selected is Ed25519ph ([Ed25519]).\n The digest parameter is the pre-hashed message.\n If TEE_ATTR_EDDSA_CTX is not present, then the context string is\nassumed to be empty.\nIf a=0 and b=0, then:\no\n The digest parameter is the message in full.\n If TEE_ATTR_EDDSA_CTX is present, then the algorithm selected is\nEd25519ctx; otherwise it is Ed25519.\na = 0x7FFF FFFF should be treated as an illegal value in this context.\no\nValues of a from 0x0000 0000 to 0x7FFF FFFE are reserved for\no\nGlobalPlatform, and may have been defined above. When a is in this\nrange, the value of b will be defined by GlobalPlatform.\nValues of a from 0x8000 0000 to 0xFFFF FFFF are reserved for\no\nimplementers. When a is in this range, the value of b will be defined by\nthe implementer.\nTEE_ATTR_EDDSA_CTX: Optional buffer, maximum length 255.\nIf present, TEE_ATTR_EDDSA_CTX is the context string.\no\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 228,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.7.2 TEE_AsymmetricSignDigest",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AsymmetricSignDigest",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 229 / 375\nAlgorithm Possible Operation Parameters\nTEE_ALG_ED448 TEE_ATTR_EDDSA_PREHASH: Optional a and b uint32_t, default 0,0.\nIf a=1 and b=0, then:\no\n The algorithm selected is Ed448ph ([Ed25519]).\n The digest parameter is the pre-hashed message.\nIf a=0 and b=0, then the digest parameter is the message in full.\no\na = 0x7FFF FFFF is a GlobalPlatform reserved value and should be\no\ntreated as an illegal value in this context.\nValues of a from 0x0000 0002 to 0x7FFF FFFE are reserved for\no\nGlobalPlatform. When a is in this range, the value of b will be defined\nby GlobalPlatform.\nValues of a from 0x8000 0000 to 0xFFFF FFFF are reserved for\no\nimplementers. When a is in this range, the value of b will be defined by\nthe implementer.\nTEE_ATTR_EDDSA_CTX: Optional buffer, maximum length 255.\nIf present, TEE_ATTR_EDDSA_CTX is the context string; otherwise the\no\ncontext string is assumed to be empty.\nWhere a hash algorithm is specified in the algorithm, digestLen SHALL be equal to the digest length of this\nhash algorithm. For TEE_ALG_ED25519 and TEE_ALG_ED448, if the TEE_ATTR_EDDSA_PREHASH attribute\nhas a=1 , b=0, then the implementation SHALL accept a digestLen of 64, and MAY accept other values.\nParameters\n• operation: Handle on the operation, which SHALL have been suitably set up with an operation key\n• params, paramCount: Optional operation parameters\n• digest, digestLen: Input buffer containing the input message digest\n• signature, signatureLen: Output buffer written with the signature of the digest\nSpecification Number: 10 Function Number: 0x1103\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_SHORT_BUFFER: If the signature buffer is not large enough to hold the result\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_ASYMMETRIC_SIGNATURE.\n• If no key is programmed in the operation.\n• If the operation mode is not TEE_MODE_SIGN.\n• If digestLen is not equal to the hash size of the algorithm in non-XOF functions\n• Hardware or cryptographic algorithm failure\n• If an optional algorithm which is not supported by the Trusted OS is passed in\nTEE_OperationHandle.\n• If an illegal value is passed as an operation parameter.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 229,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 229",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "230 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for digestLen and signatureLen.\nTEE Internal Core API v1.3:\nRenamed TEE_ATTR_ED25519_CTX to TEE_ATTR_EDDSA_CTX.\nDeprecated use of TEE_ATTR_ED25519_PH, replacing it with the generic TEE_ATTR_EDDSA_PREHASH.\nNote that these two operation parameters are not identical when used with Ed25519 because the earlier\nversion didn’t cover the full spectrum of Ed25519 options.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 230,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 230",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 231 / 375\n6.7.3 TEE_AsymmetricVerifyDigest\nSince: TEE Internal Core API v1.3 – See Backward Compatibility note below.\nTEE_Result TEE_AsymmetricVerifyDigest(\nTEE_OperationHandle operation,\n[in] TEE_Attribute* params, uint32_t paramCount,\n[inbuf] void* digest, size_t digestLen,\n[inbuf] void* signature, size_t signatureLen );\nDescription\nThe TEE_AsymmetricVerifyDigest function verifies a message digest signature within an asymmetric\noperation.\nThis function can be called only with an operation of an algorithm listed for modes TEE_MODE_SIGN and\nTEE_MODE_VERIFY in Table 6-4 on page 185.\nThe parameters params, paramCount contain the operation parameters listed in Table 6-8 on page 228.\nTable 6-9: Asymmetric Verify Operation Parameters [obsolete]\nAlgorithm Possible Operation Parameters\nThis table existed in previous versions of the specification and was removed in v1.3.\nThe information previously in this table has been merged into Table 6-8.\nWhere a hash algorithm is specified in the algorithm, digestLen SHALL be equal to the digest length of this\nhash algorithm. For TEE_ALG_ED25519 and TEE_ALG_ED448, if the TEE_ATTR_EDDSA_PREHASH attribute\nhas a=1 , b=0, then the implementation SHALL accept a digestLen of 64, and MAY accept other values.\nParameters\n• operation: Handle on the operation, which SHALL have been suitably set up with an operation key\n• params, paramCount: Optional operation parameters\n• digest, digestLen: Input buffer containing the input message digest\n• signature, signatureLen: Input buffer containing the signature to verify\nSpecification Number: 10 Function Number: 0x1104\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_SIGNATURE_INVALID: If the signature is invalid\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_ASYMMETRIC_SIGNATURE.\n• If no key is programmed in the operation.\n• If the operation mode is not TEE_MODE_VERIFY.\n• If digestLen is not equal to the hash size of the algorithm\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 231,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.7.3 TEE_AsymmetricVerifyDigest",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_AsymmetricVerifyDigest",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "232 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n• Hardware or cryptographic algorithm failure\n• If an optional algorithm which is not supported by the Trusted OS is passed in\nTEE_OperationHandle.\n• If an illegal value is passed as an operation parameter.\n• If the implementation detects any other error associated with this function that is not explicitly\nassociated with a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for digestLen and signatureLen.\nTEE Internal Core API v1.3:\nRenamed TEE_ATTR_ED25519_CTX to TEE_ATTR_EDDSA_CTX.\nDeprecated use of TEE_ATTR_ED25519_PH, replacing it with the generic TEE_ATTR_EDDSA_PREHASH.\nNote that these two operation parameters are not identical when used with Ed25519 because the earlier\nversion didn’t cover the full spectrum of Ed25519 options.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 232,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 232",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 233 / 375\n6.8 Key Derivation Functions\nFigure 6-6 illustrates how a TEE_OperationHandle is manipulated by the Key Derivation functions. The\nstate diagram is expressed in terms of the state that is revealed in the handleState flags by\nTEE_GetOperationInfo and TEE_GetOperationInfoMultiple.\nFigure 6-6: State Diagram for TEE_OperationHandle for Key Derivation Functions (Informative)\n6.8.1 TEE_DeriveKey\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nvoid TEE_DeriveKey(\nTEE_OperationHandle operation,\n[inout] TEE_Attribute* params, uint32_t paramCount,\nTEE_ObjectHandle derivedKey );\nDescription\nThe TEE_DeriveKey function takes one of the Key Derivation Operation Parameters in Table 6-10 as input,\nand outputs a key object.\nThe TEE_DeriveKey function can only be used with algorithms defined in Table 6-10.\nThe parameters params, paramCount contain the operation parameters listed in Table 6-10.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 233,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.8 Key Derivation Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_DeriveKey",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "234 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nTable 6-10: Key Derivation Operation Parameters\nAlgorithm Possible Operation Parameters Output Key Type\nTEE_ALG_DH_DERIVE_ TEE_ATTR_DH_PUBLIC_VALUE TEE_TYPE_GENERIC_SECRET\nSHARED_SECRET\nPublic key of the other party. This parameter\nis mandatory.\nTEE_ALG_ECDH_DERIVE_ TEE_ATTR_ECC_PUBLIC_VALUE_X TEE_TYPE_GENERIC_SECRET\nSHARED_SECRET TEE_ATTR_ECC_PUBLIC_VALUE_Y\nPublic key of the other party. These\nparameters are mandatory.\nTEE_ALG_X25519 TEE_ATTR_X25519_PUBLIC_VALUE TEE_TYPE_GENERIC_SECRET\nPublic key of the other party. This parameter\nis mandatory.\nTEE_ALG_X448 TEE_ATTR_X448_PUBLIC_VALUE TEE_TYPE_GENERIC_SECRET\nPublic key of the other party. This parameter\nis mandatory.\nTEE_ALG_SM2_KEP Mandatory parameters: TEE_TYPE_GENERIC_SECRET,\nTEE_ATTR_ECC_PUBLIC_VALUE_X TEE_TYPE_HMAC_SM3, or\nTEE_ATTR_ECC_PUBLIC_VALUE_Y\nTEE_TYPE_SM4\nPublic key of the other party.\nTEE_ATTR_SM2_KEP_USER\nValue specifying the role of the user.\nValue 0 means initiator and non-zero\nmeans responder.\nTEE_ATTR_ECC_EPHEMERAL_PUBLIC_VALUE_X\nTEE_ATTR_ECC_EPHEMERAL_PUBLIC_VALUE_Y\nEphemeral public key of the other party.\nTEE_ATTR_SM2_ID_INITIATOR\nIdentifier of initiator.\nTEE_ATTR_SM2_ID_RESPONDER\nIdentifier of responder.\nOptional parameters:\nIf peers want to confirm key agreement, they\ncan provide:\nTEE_ATTR_SM2_KEP_CONFIRMATION_IN\nConfirmation value from the other peer\n(optional).\nTEE_ATTR_SM2_KEP_CONFIRMATION_OUT\nConfirmation value of the caller (optional).\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 234,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 234",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 235 / 375\nAlgorithm Possible Operation Parameters Output Key Type\nTEE_ALG_HKDF Optional parameters: Any Simple Symmetric Key\nTEE_ATTR_HKDF_SALT Type (see Table 5-10)\nIf present, TEE_ATTR_HKDF_SALT is the\nsalt value; otherwise the salt is set to\nhashLen zero octets. (hashLen denotes\nthe length of the hash function output in\noctets.)\nTEE_ATTR_HKDF_INFO\nIf present, TEE_ATTR_HKDF_INFO is the\ninfo value; otherwise the info value is set to a\nzero-length string.\nTEE_ATTR_HKDF_HASH_ALGORITHM\nIf present, TEE_ATTR_HKDF_HASH_\nALGORITHM SHALL be TEE_ALG_SHA256;\notherwise TEE_ALG_SHA256 is used.\nTEE_ATTR_KDF_KEY_SIZE\nIf present, TEE_ATTR_KDF_KEY_SIZE is the\ndesired output length in octets; otherwise the\nmaximum length of the derived key object\nconverted to octets is used.\nThe derivedKey handle SHALL refer to an object with one of the types listed in Table 6-10 as an Output\nKey Type for the algorithm to be used.\nThe caller SHALL have set the private part of the operation DH key using the TEE_SetOperationKey\nfunction.\nThe caller SHALL pass the other party’s public key as a parameter of the TEE_DeriveKey function.\nOn completion the derived key is placed into the TEE_ATTR_SECRET_VALUE attribute of the derivedKey\nhandle.\nIn the case of TEE_ALG_SM2_KEP, the caller SHALL have set the long-term and ephemeral private key of the\ncaller by using TEE_SetOperationKey2. The caller must provide additional attributes specifying role,\nephemeral public key of other peer, and identifiers of both peers. Two roles exist, initiator and responder; one\nor both of the parties may confirm the Key Agreement result. The function computes and populates the\nTEE_ATTR_SM2_KEP_CONFIRMATION_OUT parameter, which the other peer will use as the\nTEE_ATTR_SM2_KEP_CONFIRMATION_IN parameter.\nNote that in the case of TEE_ATTR_SM2_KEP_CONFIRMATION_OUT, the attribute structure maintains a pointer\nback to the caller-supplied buffer. It is the responsibility of the TA author to ensure that buffer is correctly sized\nand that the buffer pointed to remains valid until the attributes array is no longer in use.\nParameters\n• operation: Handle on the operation, which SHALL have been suitably set up with an operation key\n• params, paramCount: Operation parameters\n• derivedKey: Handle on an uninitialized transient object to be filled with the derived key\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 235,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 235",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "236 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nSpecification Number: 10 Function Number: 0x1201\nPanic Reasons\n• If operation is not a valid operation handle of class TEE_OPERATION_KEY_DERIVATION.\n• If the object derivedKey is too small for the generated value.\n• If no key is programmed in the operation.\n• If a mandatory parameter is missing.\n• If the operation mode is not TEE_MODE_DERIVE.\n• Hardware or cryptographic algorithm failure\n• If an optional algorithm which is not supported by the Trusted OS is passed in\nTEE_OperationHandle.\n• If attribute TEE_ATTR_SM2_KEP_CONFIRMATION_OUT is present and is too small.\n• If the implementation detects any other error.\nBackward Compatibility\nPrior to TEE Internal Core API v1.2, TEE_DeriveKey specified the [in] annotation on params, now\ndeleted.\nBackward compatibility with a previous version of the Internal Core API can be selected at compile time (see\nsection 3.5.1).\nvoid TEE_DeriveKey(\nTEE_OperationHandle operation,\n[in] TEE_Attribute* params, uint32_t paramCount,\nTEE_ObjectHandle derivedKey );\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 236,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 236",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_DeriveKey",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 237 / 375\n6.9 Random Data Generation Function\n6.9.1 TEE_GenerateRandom\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nvoid TEE_GenerateRandom(\n[out] void* randomBuffer,\nsize_t randomBufferLen );\nDescription\nThe TEE_GenerateRandom function generates random data.\nParameters\n• randomBuffer: Reference to generated random data\n• randomBufferLen: Byte length of requested random data\nSpecification Number: 10 Function Number: 0x1301\nPanic Reasons\n• Hardware or cryptographic algorithm failure\n• If the implementation detects any other error.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for randomBufferLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 237,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.9 Random Data Generation Function",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GenerateRandom",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "238 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.10 Cryptographic Algorithms Specification\nThis section specifies the cryptographic algorithms, key types, and key parts supported in the Cryptographic\nOperations API.\nNote that for the “NOPAD” symmetric algorithms, it is the responsibility of the TA to do the padding.\n6.10.1 List of Algorithm Identifiers\nTable 6-11 provides an exhaustive list of all algorithm identifiers specified in the Cryptographic Operations\nAPI. Normative references for the algorithms may be found in Annex C.\nImplementations MAY define their own algorithms. Such algorithms SHALL have implementation-defined\nalgorithm identifiers and these identifiers SHALL use 0xF0 as the most significant byte (i.e. they fall in the\nrange 0xF0000000-0xF0FFFFFF).\nNote: Previous versions of this specification used bit-fields to construct the algorithm identifier values.\nBeginning with TEE Internal Core API v1.2, this is no longer the case and no special significance is given to\nthe bit positions within algorithm identifier values.\nTable 6-11: List of Algorithm Identifiers 7\nAlgorithm Identifier Value\nTEE_ALG_AES_ECB_NOPAD 0x10000010\nTEE_ALG_AES_CBC_NOPAD 0x10000110\nTEE_ALG_AES_CTR 0x10000210\nTEE_ALG_AES_CTS 0x10000310\nTEE_ALG_AES_XTS 0x10000410\nTEE_ALG_AES_CBC_MAC_NOPAD 0x30000110\nTEE_ALG_AES_CBC_MAC_PKCS5 0x30000510\nTEE_ALG_AES_CMAC 0x30000610\nTEE_ALG_AES_CCM 0x40000710\nTEE_ALG_AES_GCM 0x40000810\nTEE_ALG_DES_ECB_NOPAD 0x10000011\nTEE_ALG_DES_CBC_NOPAD 0x10000111\nTEE_ALG_DES_CBC_MAC_NOPAD 0x30000111\nTEE_ALG_DES_CBC_MAC_PKCS5 0x30000511\nTEE_ALG_DES3_ECB_NOPAD 8 0x10000013\nTEE_ALG_DES3_CBC_NOPAD 0x10000113\nTEE_ALG_DES3_CBC_MAC_NOPAD 0x30000113\nTEE_ALG_DES3_CBC_MAC_PKCS5 0x30000513\n7 See section 3.3.3 for recommendations on constant declaration.\n8 Triple DES SHALL be understood as Encrypt-Decrypt-Encrypt mode with two or three keys.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 238,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.10 Cryptographic Algorithms Specification",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 239 / 375\nAlgorithm Identifier Value\nTEE_ALG_RSASSA_PKCS1_V1_5_MD5 0x70001830\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA1 0x70002830\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA224 0x70003830\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA256 0x70004830\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA384 0x70005830\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA512 0x70006830\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA3_224 0x70008830\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA3_256 0x70009830\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA3_384 0x7000A830\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA3_512 0x7000B830\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA1 0x7020B930\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA224 0x70313930\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA256 0x70414930\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA384 0x70515930\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA512 0x70616930\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA3_224 0x70818930\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA3_256 0x70919930\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA3_384 0x70A1A930\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA3_512 0x70B1B930\nTEE_ALG_RSAES_PKCS1_V1_5 0x60000130\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA1 0x60210230\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA224 0x60310230\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA256 0x60410230\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA384 0x60510230\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA512 0x60610230\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA3_224 0x60810230\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA3_256 0x60910230\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA3_384 0x60A10230\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA3_512 0x60B10230\nTEE_ALG_RSA_NOPAD 0x60000030\nTEE_ALG_DSA_SHA1 0x70002131\nTEE_ALG_DSA_SHA224 0x70003131\nTEE_ALG_DSA_SHA256 0x70004131\nTEE_ALG_DSA_SHA3_224 0x70008131\nTEE_ALG_DSA_SHA3_256 0x70009131\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 239,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 239",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "240 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nAlgorithm Identifier Value\nTEE_ALG_DSA_SHA3_384 0x7000A131\nTEE_ALG_DSA_SHA3_512 0x7000B131\nTEE_ALG_DH_DERIVE_SHARED_SECRET 0x80000032\nTEE_ALG_MD5 0x50000001\nTEE_ALG_SHA1 0x50000002\nTEE_ALG_SHA224 0x50000003\nTEE_ALG_SHA256 0x50000004\nTEE_ALG_SHA384 0x50000005\nTEE_ALG_SHA512 0x50000006\nTEE_ALG_SHA3_224 0x50000008\nTEE_ALG_SHA3_256 0x50000009\nTEE_ALG_SHA3_384 0x5000000A\nTEE_ALG_SHA3_512 0x5000000B\nTEE_ALG_HMAC_MD5 0x30000001\nTEE_ALG_HMAC_SHA1 0x30000002\nTEE_ALG_HMAC_SHA224 0x30000003\nTEE_ALG_HMAC_SHA256 0x30000004\nTEE_ALG_HMAC_SHA384 0x30000005\nTEE_ALG_HMAC_SHA512 0x30000006\nTEE_ALG_HMAC_SM3 * 0x30000007\nTEE_ALG_HMAC_SHA3_224 0x30000008\nTEE_ALG_HMAC_SHA3_256 0x30000009\nTEE_ALG_HMAC_SHA3_384 0x3000000A\nTEE_ALG_HMAC_SHA3_512 0x3000000B\nTEE_ALG_ECDSA_SHA1 * 0x70001042\nTEE_ALG_ECDSA_SHA224 * 0x70002042\nTEE_ALG_ECDSA_SHA256 * 0x70003042\nTEE_ALG_ECDSA_SHA384 * 0x70004042\nTEE_ALG_ECDSA_SHA512 * 0x70005042\nTEE_ALG_ECDSA_SHA3_224 * 0x70006042\nTEE_ALG_ECDSA_SHA3_256 * 0x70007042\nTEE_ALG_ECDSA_SHA3_384 * 0x70008042\nTEE_ALG_ECDSA_SHA3_512 * 0x70009042\nTEE_ALG_ED25519 * 0x70006043\nTEE_ALG_ED448 * 0x70006044\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 240,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 240",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 241 / 375\nAlgorithm Identifier Value\nTEE_ALG_ECDH_DERIVE_SHARED_SECRET * 0x80000042\nTEE_ALG_X25519 * 0x80000044\nTEE_ALG_X448 * 0x80000045\nTEE_ALG_SM2_DSA_SM3 * 0x70006045\nTEE_ALG_SM2_KEP * 0x60000045\nTEE_ALG_SM2_PKE * 0x80000046\nTEE_ALG_HKDF 0x80000047\nTEE_ALG_SM3 * 0x50000007\nTEE_ALG_SM4_ECB_NOPAD * 0x10000014\nTEE_ALG_SM4_ECB_PKCS5 * 0x10000015\nTEE_ALG_SM4_CBC_NOPAD * 0x10000114\nTEE_ALG_SM4_CBC_PKCS5 * 0x10000115\nTEE_ALG_SM4_CTR * 0x10000214\nTEE_ALG_SHAKE128 0x50000101\nTEE_ALG_SHAKE256 0x50000102\nTEE_ALG_ILLEGAL_VALUE 0xEFFFFFFF\nReserved for implementation-defined algorithm identifiers 0xF0000000 – 0xF0FFFFFF\nAll other values are reserved.\nAlgorithms flagged “ * ” are required in limited circumstances, as discussed in Table 6-2. For all other\nalgorithms listed in Table 6-11, support is mandatory.\nTEE_ALG_ILLEGAL_VALUE is reserved for testing and validation and SHALL be treated as an undefined value\nwhen provided to a cryptographic operation function.\nTable 6-12: Structure of Algorithm Identifier or Object Type Identifier [obsolete]\nBits Function Values\nThis table existed in previous versions of the specification and was removed in v1.2.\nTable 6-12b: Algorithm Subtype Identifier [obsolete]\nValue Subtype\nThis table existed in previous versions of the specification and was removed in v1.2.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 241,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 241",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "242 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.10.2 Object Types\nObject handles are a special class of algorithm handle.\nImplementations MAY define their own object handles. Such handles SHALL have implementation-defined\nobject type identifiers and these identifiers SHALL use 0xF0 as the most significant byte (i.e. they fall in the\nrange 0xF0000000-0xF0FFFFFF).\nNote: Previous versions of this specification used bit-fields to construct the object type values. Beginning with\nTEE Internal Core API v1.2, this is no longer the case and no special significance is given to the bit positions\nwithin algorithm identifier values.\nTable 6-13: List of Object Types\nName Identifier\nTEE_TYPE_AES 0xA0000010\nTEE_TYPE_DES 0xA0000011\nTEE_TYPE_DES3 0xA0000013\nTEE_TYPE_HMAC_MD5 0xA0000001\nTEE_TYPE_HMAC_SHA1 0xA0000002\nTEE_TYPE_HMAC_SHA224 0xA0000003\nTEE_TYPE_HMAC_SHA256 0xA0000004\nTEE_TYPE_HMAC_SHA384 0xA0000005\nTEE_TYPE_HMAC_SHA512 0xA0000006\nTEE_TYPE_HMAC_SM3 0xA0000007\nTEE_TYPE_HMAC_SHA3_224 0xA0000008\nTEE_TYPE_HMAC_SHA3_256 0xA0000009\nTEE_TYPE_HMAC_SHA3_384 0xA000000A\nTEE_TYPE_HMAC_SHA3_512 0xA000000B\nTEE_TYPE_RSA_PUBLIC_KEY 0xA0000030\nTEE_TYPE_RSA_KEYPAIR 0xA1000030\nTEE_TYPE_DSA_PUBLIC_KEY 0xA0000031\nTEE_TYPE_DSA_KEYPAIR 0xA1000031\nTEE_TYPE_DH_KEYPAIR 0xA1000032\nTEE_TYPE_ECDSA_PUBLIC_KEY 0xA0000041\nTEE_TYPE_ECDSA_KEYPAIR 0xA1000041\nTEE_TYPE_ECDH_PUBLIC_KEY 0xA0000042\nTEE_TYPE_ECDH_KEYPAIR 0xA1000042\nTEE_TYPE_ED25519_PUBLIC_KEY 0xA0000043\nTEE_TYPE_ED25519_KEYPAIR 0xA1000043\nTEE_TYPE_X25519_PUBLIC_KEY 0xA0000044\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 242,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.10.2 Object Types",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 243 / 375\nName Identifier\nTEE_TYPE_X25519_KEYPAIR 0xA1000044\nTEE_TYPE_ED448_PUBLIC_KEY 0xA0000048\nTEE_TYPE_ED448_KEYPAIR 0xA1000048\nTEE_TYPE_X448_PUBLIC_KEY 0xA0000049\nTEE_TYPE_X448_KEYPAIR 0xA1000049\nTEE_TYPE_SM2_DSA_PUBLIC_KEY 0xA0000045\nTEE_TYPE_SM2_DSA_KEYPAIR 0xA1000045\nTEE_TYPE_SM2_KEP_PUBLIC_KEY 0xA0000046\nTEE_TYPE_SM2_KEP_KEYPAIR 0xA1000046\nTEE_TYPE_SM2_PKE_PUBLIC_KEY 0xA0000047\nTEE_TYPE_SM2_PKE_KEYPAIR 0xA1000047\nTEE_TYPE_SM4 0xA0000014\nTEE_TYPE_HKDF 0xA000004A\nTEE_TYPE_GENERIC_SECRET 0xA0000000\nTEE_TYPE_CORRUPTED_OBJECT (deprecated) 0xA00000BE\nTEE_TYPE_DATA 0xA00000BF\nTEE_TYPE_ILLEGAL_VALUE 0xEFFFFFFF\nReserved for implementation-defined object handles 0xF0000000-0xF0FFFFFF\nReserved All values not defined above.\nObject types using implementation-specific algorithms are defined by the implementation.\nTEE_TYPE_CORRUPTED_OBJECT is used solely in the deprecated TEE_GetObjectInfo function to indicate\nthat the object on which it is being invoked has been corrupted in some way.\nTEE_TYPE_DATA is used to represent objects which have no cryptographic attributes, just a data stream.\nTEE_TYPE_ILLEGAL_VALUE is reserved for testing and validation and SHALL be treated as an undefined\nvalue when provided to a cryptographic operation function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 243,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 243",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_TYPE_CORRUPTED_OBJECT",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "244 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.10.3 Optional Cryptographic Elements\nThis specification defines support for optional cryptographic elements as follows:\n• NIST ECC curve definitions from [NIST Re Cur]\n• BSI ECC curve definitions from [BSI TR 03111]\n• Edwards ECC curve definitions from [X25519]\n• SM2 curve definition from [SM2]\nIdentifiers that SHALL be used to identify optional cryptographic elements are listed in Table 6-14.\nTEE_CRYPTO_ELEMENT_NONE is a special identifier which can be used when a function requires a value from\nTable 6-14, but no specific cryptographic element needs to be provided. The size parameter is not applicable\nfor TEE_CRYPTO_ELEMENT_NONE.\nFor all elliptic curve elements, the size parameter represents the length, in bits, of the base field.\nIn this version of the specification, a conforming implementation can support none, some, or all of the\ncryptographic elements listed in Table 6-14. The TEE_IsAlgorithmSupported function (see section 6.2.9)\nis provided to enable applications to determine whether a specific curve definition is supported.\nTable 6-14: List of Optional Cryptographic Elements\nName Source Generic Identifier Size\nTEE_CRYPTO_ELEMENT_NONE - Y 0x00000000 -\nTEE_ECC_CURVE_NIST_P192 NIST Y 0x00000001 192 bits\nTEE_ECC_CURVE_NIST_P224 NIST Y 0x00000002 224 bits\nTEE_ECC_CURVE_NIST_P256 NIST Y 0x00000003 256 bits\nTEE_ECC_CURVE_NIST_P384 NIST Y 0x00000004 384 bits\nTEE_ECC_CURVE_NIST_P521 NIST Y 0x00000005 521 bits\nReserved for future NIST curves – 0x00000006 – 0x000000FF\nTEE_ECC_CURVE_BSI_P160r1 BSI-R Y 0x00000101 160 bits\nTEE_ECC_CURVE_BSI_P192r1 BSI-R Y 0x00000102 192 bits\nTEE_ECC_CURVE_BSI_P224r1 BSI-R Y 0x00000103 224 bits\nTEE_ECC_CURVE_BSI_P256r1 BSI-R Y 0x00000104 256 bits\nTEE_ECC_CURVE_BSI_P320r1 BSI-R Y 0x00000105 320 bits\nTEE_ECC_CURVE_BSI_P384r1 BSI-R Y 0x00000106 384 bits\nTEE_ECC_CURVE_BSI_P512r1 BSI-R Y 0x00000107 512 bits\nReserved for future BSI (R) curves – 0x00000108 – 0x000001FF\nTEE_ECC_CURVE_BSI_P160t1 BSI-T Y 0x00000201 160 bits\nTEE_ECC_CURVE_BSI_P192t1 BSI-T Y 0x00000202 192 bits\nTEE_ECC_CURVE_BSI_P224t1 BSI-T Y 0x00000203 224 bits\nTEE_ECC_CURVE_BSI_P256t1 BSI-T Y 0x00000204 256 bits\nTEE_ECC_CURVE_BSI_P320t1 BSI-T Y 0x00000205 320 bits\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 244,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.10.3 Optional Cryptographic Elements",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 245 / 375\nName Source Generic Identifier Size\nTEE_ECC_CURVE_BSI_P384t1 BSI-T Y 0x00000206 384 bits\nTEE_ECC_CURVE_BSI_P512t1 BSI-T Y 0x00000207 512 bits\nReserved for future BSI (T) curves – 0x00000208 – 0x000002FF\nTEE_ECC_CURVE_25519 IETF N 0x00000300 256 bits\nTEE_ECC_CURVE_448 IETF N 0x00000301 448 bits\nReserved for future IETF curves – 0x00000302 – 0x000003FF\nTEE_ECC_CURVE_SM2 OCTA N 0x00000400 256 bits\nReserved for future curves defined – 0x00000401 – 0x000004FF\nby OCTA\nReserved for future use – 0x00000500 – 0x7FFFFFFF\nImplementation defined – 0x80000000 – 0xFFFFFFFF\nBackward Compatibility\nIf a Trusted OS supports all of the NIST curves defined in Table 6-14, the implementation SHALL return true\nto queries of the deprecated property gpd.tee.cryptography.ecc (see section B.4); otherwise it SHALL\nreturn false to such queries.\nIn TEE Internal Core API v1.2 and v1.2.1, TEE_ECC_CURVE_25519 and TEE_ECC_CURVE_SM2 were\nincorrectly assigned the same identifier.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 245,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 245",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "246 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n6.11 Object or Operation Attributes\nTable 6-15: Object or Operation Attributes 9\nName Value Protection Type Format Comment\n(Table 6-16)\nTEE_ATTR_SECRET_VALUE 0xC0000000 Protected Ref binary Used for all\nsecret keys\nfor symmetric\nciphers,\nMACs, and\nHMACs\nTEE_ATTR_RSA_MODULUS 0xD0000130 Public Ref bignum\nTEE_ATTR_RSA_PUBLIC_EXPONENT 0xD0000230 Public Ref bignum\nTEE_ATTR_RSA_PRIVATE_EXPONENT 0xC0000330 Protected Ref bignum\nTEE_ATTR_RSA_PRIME1 0xC0000430 Protected Ref bignum Usually\nreferred to as\np.\nTEE_ATTR_RSA_PRIME2 0xC0000530 Protected Ref bignum q\nTEE_ATTR_RSA_EXPONENT1 0xC0000630 Protected Ref bignum dp\nTEE_ATTR_RSA_EXPONENT2 0xC0000730 Protected Ref bignum dq\nTEE_ATTR_RSA_COEFFICIENT 0xC0000830 Protected Ref bignum iq\nTEE_ATTR_DSA_PRIME 0xD0001031 Public Ref bignum p\nTEE_ATTR_DSA_SUBPRIME 0xD0001131 Public Ref bignum q\nTEE_ATTR_DSA_BASE 0xD0001231 Public Ref bignum g\nTEE_ATTR_DSA_PUBLIC_VALUE 0xD0000131 Public Ref bignum y\nTEE_ATTR_DSA_PRIVATE_VALUE 0xC0000231 Protected Ref bignum x\nTEE_ATTR_DH_PRIME 0xD0001032 Public Ref bignum p\nTEE_ATTR_DH_SUBPRIME 0xD0001132 Public Ref bignum q\nTEE_ATTR_DH_BASE 0xD0001232 Public Ref bignum g\nTEE_ATTR_DH_X_BITS 0xF0001332 Public Value int l\nTEE_ATTR_DH_PUBLIC_VALUE 0xD0000132 Public Ref bignum y\nTEE_ATTR_DH_PRIVATE_VALUE 0xC0000232 Protected Ref bignum x\nTEE_ATTR_RSA_OAEP_LABEL 0xD0000930 Public Ref binary\nTEE_ATTR_RSA_OAEP_MGF_HASH 0xD0000931 Public Ref int\nTEE_ATTR_RSA_PSS_SALT_LENGTH 0xF0000A30 Public Value int\nTEE_ATTR_ECC_PUBLIC_VALUE_X 0xD0000141 Public Ref bignum\n9 See section 3.3.3 for recommendations on constant declaration.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 246,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "6.11 Object or Operation Attributes",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 247 / 375\nName Value Protection Type Format Comment\n(Table 6-16)\nTEE_ATTR_ECC_PUBLIC_VALUE_Y 0xD0000241 Public Ref bignum\nTEE_ATTR_ECC_PRIVATE_VALUE 0xC0000341 Protected Ref bignum d\nTEE_ATTR_ECC_EPHEMERAL_PUBLIC 0xD0000146 Public Ref bignum\n_VALUE_X\nTEE_ATTR_ECC_EPHEMERAL_PUBLIC 0xD0000246 Public Ref bignum\n_VALUE_Y\nTEE_ATTR_ECC_CURVE 0xF0000441 Public Value int Identifier\nvalue from\nTable 6-14\nSince: TEE Internal Core API v1.3 – 0xD0000643 Public Ref binary Octet string,\nSee Backward Compatibility note at per algorithm\nend of section. definition in\n[Ed25519]\nTEE_ATTR_EDDSA_CTX\nTEE_ATTR_ED25519_PUBLIC_VALUE 0xD0000743 Public Ref binary\nTEE_ATTR_ED25519_PRIVATE_ 0xC0000843 Protected Ref binary\nVALUE\nTEE_ATTR_X25519_PUBLIC_VALUE 0xD0000944 Public Ref binary Octet string,\nper algorithm\nTEE_ATTR_X25519_PRIVATE_VALUE 0xC0000A44 Protected Ref binary\ndefinition in\n[X25519]\nTEE_ATTR_ED448_PUBLIC_VALUE 0xD0000002 Public Ref binary Octet string,\nper algorithm\nTEE_ATTR_ED448_PRIVATE_VALUE 0xC0000003 Protected Ref binary\ndefinition in\n[Ed25519]\nTEE_ATTR_EDDSA_PREHASH 0xF0000004 Public Value int\nTEE_ATTR_X448_PUBLIC_VALUE 0xD0000A45 Public Ref binary Octet string,\nper algorithm\nTEE_ATTR_X448_PRIVATE_VALUE 0xC0000A46 Protected Ref binary\ndefinition in\n[X25519]\nTEE_ATTR_SM2_ID_INITIATOR 0xD0000446 Public Ref binary Octet string\ncontaining\nidentifier of\ninitiator\nTEE_ATTR_SM2_ID_RESPONDER 0xD0000546 Public Ref binary Octet string\ncontaining\nidentifier of\nresponder\nTEE_ATTR_SM2_KEP_USER 0xF0000646 Public value int zero means\ninitiator role,\nnon-zero\nmeans\nresponder\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 247,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 247",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "248 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nName Value Protection Type Format Comment\n(Table 6-16)\nTEE_ATTR_SM2_KEP_ 0xD0000746 Public Ref binary Octet string\nCONFIRMATION_IN containing\nvalue from\nother peer\nTEE_ATTR_SM2_KEP_ 0xD0000846 Public Ref binary Octet string\nCONFIRMATION_OUT containing\nvalue from\nthe caller\nTEE_ATTR_HKDF_SALT 0xD0000946 Public Ref binary\nTEE_ATTR_HKDF_INFO 0xD0000A46 Public Ref binary\nTEE_ATTR_HKDF_HASH_ALGORITHM 0xF0000B46 Public Value int\nTEE_ATTR_KDF_KEY_SIZE 0xF0000C46 Public Value int\nImplementation defined protected 0xC0010000 Protected Ref\nobject or operation attribute -\n0xC001FFFF\nImplementation defined public object 0xD0010000 Public Ref\nor operation attribute -\n0xD001FFFF\nImplementation defined value attribute 0xF0010000 Public Value\n-\n0xF001FFFF\nTEE_ATTR_ILLEGAL_PRIVATE_REF 0xCEFFFFFF Protected Ref See note\nfollowing\nTEE_ATTR_ILLEGAL_PUBLIC_REF 0xDEFFFFFF Public Ref\ntable.\nTEE_ATTR_ILLEGAL_VALUE 0xFEFFFFFF Public Value\nReserved All values not\ndefined\nabove.\nTEE_ATTR_ILLEGAL_PRIVATE_REF, TEE_ATTR_ILLEGAL_PUBLIC_REF, and TEE_ATTR_ILLEGAL_VALUE\nare reserved for testing and validation and each SHALL be treated as an undefined value when provided to a\ncryptographic operation function.\nTable 6-16: Attribute Format Definitions\nFormat Description\nbinary An array of unsigned octets\nbignum An unsigned bignum in big-endian binary format.\nLeading zero bytes are allowed.\nint Values attributes represented in a single integer returned/read from argument a.\nAdditional attributes may be defined for use with implementation defined algorithms.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 248,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 248",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 249 / 375\nImplementer’s Notes\nSelected bits of the attribute identifiers are explained in the following table.\nTable 6-17: Partial Structure of Attribute Identifier\nBit Function Values\nBit [29] Defines whether the attribute is a buffer or value attribute 0: buffer attribute\n1: value attribute\nBit [28] Defines whether the attribute is protected or public 0: protected attribute\n1: public attribute\nA protected attribute cannot be extracted unless the object has the TEE_USAGE_EXTRACTABLE flag.\nThe following table defines constants that reflect setting bit [29] and bit [28], respectively, intended to help\ndecode attribute identifiers.\nTable 6-18: Attribute Identifier Flags 10\nName Value\nTEE_ATTR_FLAG_VALUE 0x20000000\nTEE_ATTR_FLAG_PUBLIC 0x10000000\nBackward Compatibility\nTEE Internal Core API v1.3 deprecated redundant values that TEE Internal Core API v1.2 had assigned to\nselected attributes.\nThe correct values of TEE_ATTR_ECC_PUBLIC_VALUE_X, TEE_ATTR_ECC_PUBLIC_VALUE_Y, and\nTEE_ATTR_ECC_PRIVATE_VALUE are shown in Table 6-15; the deprecated values are listed in Table B-4.\nTEE Internal Core API v1.3 deprecated TEE_ATTR_ED25519_PH.\nTEE Internal Core API v1.3 renamed TEE_ATTR_ED25519_CTX to TEE_ATTR_EDDSA_CTX.\n10 See section 3.3.3 for recommendations on constant declaration.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 249,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 249",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "250 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n7 Time API\nThis API provides access to three sources of time:\n• System Time\nThe origin of this system time is arbitrary and implementation dependent. Different TA instances\no\nmay even have different system times. The only guarantee is that the system time is not reset or\nrolled back during the life of a given TA instance, so it can be used to compute time differences\nand operation deadlines, for example. The system time SHALL NOT be affected by transitions\nthrough low power states.\nSystem time is related to the function TEE_Wait, which waits for a given timeout or cancellation.\no\nThe level of trust that a Trusted Application can put on the system time is implementation defined\no\nbut can be discovered programmatically by querying the implementation property\ngpd.tee.systemTime.protectionLevel. Typically, an implementation may rely on the REE\ntimer (protection level 100) or on a dedicated secure timer hardware (protection level 1000).\nSystem time SHALL advance with a skew from real world time of no more than +/- 10 seconds per\no\nday. This ensures no more than half a day of clock skew over a 10 year period for a device with no\nexternal source of time. System time SHALL advance within plus or minus15% of the passage of\nreal time in the outside world including while the device is in low power states, to ensure that\nappropriate security levels are maintained when, for example, system time is used to implement\ndictionary attack protection. This accuracy also applies to timeout values where they are specified\nin individual routines.\n• TA Persistent Time, a real-time source of time\nThe origin of this time is set individually by each Trusted Application and SHALL persist across\no\nreboots.\nThe level of trust on the TA Persistent Time can be queried through the property\no\ngpd.tee.TAPersistentTime.protectionLevel.\n• REE Time\nThis is as trusted as the REE itself and may also be tampered by the user.\no\nAll time functions use a millisecond resolution and split the time in the two fields of the structure TEE_Time:\none field for the seconds and one field for the milliseconds within this second.\nBackward Compatibility\nTEE Internal Core API v1.3 and earlier defined the maximum allowed clock-skew as follows:\n“System time SHALL advance within plus or minus 15% of the passage of real time in the outside world\nincluding while the device is in low power states, to ensure that appropriate security levels are maintained\nwhen, for example, system time is used to implement dictionary attack protection.”\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 250,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 250",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 251 / 375\n7.1 Data Types\n7.1.1 TEE_Time\nSince: TEE Internal API v1.0\ntypedef struct\n{\nuint32_t seconds;\nuint32_t millis;\n} TEE_Time;\nWhen used to return a time value, this structure can represent times up to 06:28:15 UTC on Sun, 7 February\n2106, where the zero value represents midnight on January 1, 1970, UTC.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 251,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "7.1 Data Types",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "252 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n7.2 Time Functions\n7.2.1 TEE_GetSystemTime\nSince: TEE Internal API v1.0\nvoid TEE_GetSystemTime(\n[out] TEE_Time* time );\nDescription\nThe TEE_GetSystemTime function retrieves the current system time.\nThe system time has an arbitrary implementation-defined origin that can vary across TA instances. The\nminimum guarantee is that the system time SHALL be monotonic for a given TA instance.\nImplementations are allowed to use the REE timers to implement this function but may also better protect the\nsystem time. A TA can discover the level of protection implementation by querying the implementation property\ngpd.tee.systemTime.protectionLevel. Possible values are listed in the following table.\nTable 7-1: Values of the gpd.tee.systemTime.protectionLevel Property\nValue Meaning\n100 System time based on REE-controlled timers. Can be tampered by the REE.\nThe implementation SHALL still guarantee that the system time is monotonic, i.e. successive\ncalls to TEE_GetSystemTime SHALL return increasing values of the system time.\n1000 System time based on a TEE-controlled secure timer.\nThe REE cannot interfere with the system time. It may still interfere with the scheduling of\nTEE tasks, but is not able to hide delays from a TA calling TEE_GetSystemTime.\nParameters\n• time: A value that SHOULD indicate Filled with the number of seconds and milliseconds since\nmidnight on January 1, 1970, UTC. Any limitation on the correctness of this value, compared to real\nworld time, depends on the source and tolerance of the current initialization value, which is related to\nthe value of the gpd.tee.systemTime.protectionLevel property.\nIf gpd.tee.systemTime.protectionLevel == 100, the value has the same properties as the\no\nvalue returned by TEE_GetREETime().\nIf gpd.tee.systemTime.protectionLevel == 1000, the value is a TEE provided asset and\no\nits initial alignment with real world time SHALL have been performed using TEE strength\ncryptography to obtain a value from a trustworthy external source.\nSpecification Number: 10 Function Number: 0x1402\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 252,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "7.2 Time Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetREETime,TEE_GetSystemTime",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 253 / 375\n7.2.2 TEE_Wait\nSince: TEE Internal API v1.0\nTEE_Result TEE_Wait( uint32_t timeout );\nDescription\nThe TEE_Wait function waits for the specified number of milliseconds or waits forever if timeout equals\nTEE_TIMEOUT_INFINITE (0xFFFFFFFF).\nWhen this function returns success, the implementation SHALL guarantee that the difference between two\ncalls to TEE_GetSystemTime before and after the call to TEE_Wait is greater than or equal to the requested\ntimeout. However, there may be additional implementation-dependent delays due to the scheduling of TEE\ntasks.\nThis function is cancellable, i.e. if the current task’s cancelled flag is set and the TA has unmasked the effects\nof cancellation, then this function returns earlier than the requested timeout with the return code\nTEE_ERROR_CANCEL. See section 4.10 for more details about cancellations.\nParameters\n• timeout: The number of milliseconds to wait, or TEE_TIMEOUT_INFINITE\nSpecification Number: 10 Function Number: 0x1405\nReturn Code\n• TEE_SUCCESS: On success.\n• TEE_ERROR_CANCEL: If the wait has been cancelled.\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 253,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "7.2.2 TEE_Wait",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_TIMEOUT_INFINITE,TEE_Wait",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "254 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n7.2.3 TEE_GetTAPersistentTime\nSince: TEE Internal API v1.0\nTEE_Result TEE_GetTAPersistentTime(\n[out] TEE_Time* time );\nDescription\nThe TEE_GetTAPersistentTime function retrieves the persistent time of the Trusted Application, expressed\nas a number of seconds and milliseconds since the arbitrary origin set by calling\nTEE_SetTAPersistentTime.\nThis function can return the following statuses (as well as other status values discussed in “Return Code”):\n• TEE_SUCCESS means the persistent time is correctly set and has been retrieved into the parameter\ntime.\n• TEE_ERROR_TIME_NOT_SET is the initial status and means the persistent time has not been set. The\nTrusted Application SHALL set its persistent time by calling the function\nTEE_SetTAPersistentTime.\n• TEE_ERROR_TIME_NEEDS_RESET means the persistent time has been set but may have been\ncorrupted and SHALL no longer be trusted. In such a case it is recommended that the Trusted\nApplication resynchronize the persistent time by calling the function TEE_SetTAPersistentTime.\nUntil the persistent time has been reset, the status TEE_ERROR_TIME_NEEDS_RESET will always be\nreturned.\nInitially the time status is TEE_ERROR_TIME_NOT_SET. Once a Trusted Application has synchronized its\npersistent time by calling TEE_SetTAPersistentTime, the status can be TEE_SUCCESS or\nTEE_ERROR_TIME_NEEDS_RESET. Once the status has become TEE_ERROR_TIME_NEEDS_RESET, it will\nkeep this status until the persistent time is re-synchronized by calling TEE_SetTAPersistentTime.\nThe following figure shows the state machine of the persistent time status.\nFigure 7-1: Persistent Time Status State Machine\nThe meaning of the status TEE_ERROR_TIME_NEEDS_RESET depends on the protection level provided by\nthe hardware implementation and the underlying real-time clock (RTC). This protection level can be queried\nby retrieving the implementation property gpd.tee.TAPersistentTime.protectionLevel, which can\nhave one of the values listed in the following table.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 254,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "7.2.3 TEE_GetTAPersistentTime",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetTAPersistentTime",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 255 / 375\nTable 7-2: Values of the gpd.tee.TAPersistentTime.protectionLevel Property\nValue Meaning\n100 Persistent time based on an REE-controlled real-time clock and on the TEE Trusted Storage\nfor the storage of origins.\nThe implementation SHALL guarantee that rollback of persistent time is detected to the fullest\nextent allowed by the Trusted Storage.\n1000 Persistent time based on a TEE-controlled real-time clock and the TEE Trusted Storage. The\nreal-time clock SHALL be out of reach of software attacks from the REE.\nUsers may still be able to provoke a reset of the real-time clock but this SHALL be detected\nby the implementation.\nThe number of seconds in the TA Persistent Time may exceed the range of the uint32_t integer type. In\nthis case, the function SHALL return the error TEE_ERROR_OVERFLOW, but still computes the TA Persistent\nTime as specified above, except that the number of seconds is truncated to 32 bits before being written to\ntime->seconds. For example, if the Trusted Application sets its persistent time to 232-100 seconds, then\nafter 100 seconds, the TA Persistent Time is 232, which is not representable with a uint32_t. In this case,\nthe function TEE_GetTAPersistentTime SHALL return TEE_ERROR_OVERFLOW and set time->seconds\nto 0 (which is 232 truncated to 32 bits).\nParameters\n• time: A pointer to the TEE_Time structure to be set to the current TA Persistent Time. If an error\nother than TEE_ERROR_OVERFLOW is returned, this structure is filled with zeroes.\nSpecification Number: 10 Function Number: 0x1403\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_TIME_NOT_SET\n• TEE_ERROR_TIME_NEEDS_RESET\n• TEE_ERROR_OVERFLOW: The number of seconds in the TA Persistent Time overflows the range of a\nuint32_t. The field time->seconds is still set to the TA Persistent Time truncated to 32 bits\n(i.e. modulo 232).\n• TEE_ERROR_OUT_OF_MEMORY: If not enough memory is available to complete the operation\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 255,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 255",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "256 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n7.2.4 TEE_SetTAPersistentTime\nSince: TEE Internal API v1.0\nTEE_Result TEE_SetTAPersistentTime(\n[in] TEE_Time* time );\nDescription\nThe TEE_SetTAPersistentTime function sets the persistent time of the current Trusted Application.\nOnly the persistent time for the current Trusted Application is modified, not the persistent time of other Trusted\nApplications. This will affect all instances of the current Trusted Application. The modification is atomic and\npersistent across device reboots.\nParameters\n• time: Filled with the persistent time of the current TA\nSpecification Number: 10 Function Number: 0x1404\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_OUT_OF_MEMORY: If not enough memory is available to complete the operation\n• TEE_ERROR_STORAGE_NO_SPACE: If insufficient storage space is available to complete the operation\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 256,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "7.2.4 TEE_SetTAPersistentTime",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_SetTAPersistentTime",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 257 / 375\n7.2.5 TEE_GetREETime\nSince: TEE Internal API v1.0\nvoid TEE_GetREETime(\n[out] TEE_Time* time );\nDescription\nThe TEE_GetREETime function retrieves the current REE system time. This function retrieves the current\ntime as seen from the point of view of the REE, expressed in the number of seconds since midnight on\nJanuary 1, 1970, UTC.\nIn normal operation, the value returned SHOULD correspond to the real time, but it SHOULD NOT be\nconsidered as trusted, as it may be tampered by the user or the REE software.\nParameters\n• time: A value that SHOULD indicate Filled with the number of seconds and milliseconds since\nmidnight on January 1, 1970, UTC. Any limitation on the correctness of this value, compared to real\nworld time, depends on the source and tolerance of the source that provided the most recent\ninitialization of the REE Real-Time Clock. Any skew between the real world time and the value\nreturned by this function is governed by the REE time source and is not regulated in this specification.\nSpecification Number: 10 Function Number: 0x1401\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 257,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "7.2.5 TEE_GetREETime",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetREETime",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "258 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8 TEE Arithmetical API\nThis section includes the following subsections:\n8.1 Introduction ................................................................................................................... 258\n8.2 Error Handling and Parameter Checking ..................................................................... 259\n8.3 Data Types ................................................................................................................... 260\n8.4 Memory Allocation and Size of Objects ........................................................................ 262\n8.5 Initialization Functions .................................................................................................. 265\n8.6 Converter Functions ..................................................................................................... 268\n8.7 Logical Operations ........................................................................................................ 272\n8.8 Basic Arithmetic Operations ......................................................................................... 278\n8.9 Modular Arithmetic Operations ..................................................................................... 284\n8.10 Other Arithmetic Operations ......................................................................................... 291\n8.11 Fast Modular Multiplication Operations ........................................................................ 294\n8.1 Introduction\nAll asymmetric cryptographic functions are implemented by using arithmetical functions, where operands are\ntypically elements of finite fields or in mathematical structures containing finite field elements. The\nCryptographic Operations API hides the complexity of the mathematics that is behind these operations. A\ndeveloper who needs some cryptographic service does not need to know anything about the internal\nimplementation.\nHowever, in practice a developer may face the following difficulties: The API does not support the desired\nalgorithm; or the API supports the algorithm, but with the wrong encodings, options, etc. The purpose of the\nTEE Arithmetical API is to provide building blocks so that the developer can implement missing asymmetric\nalgorithms. In other words, the arithmetical API can be used to implement a plug-in into the Cryptographic\nOperations API. To ease the design of speed efficient algorithms, the arithmetical API also gives access to a\nFast Modular Multiplication primitive, referred to as FMM.\nThis specification mandates that all functions within the TEE Arithmetical API SHALL work when input and\noutput TEE_BigInt values are within the interval [-2M + 1, 2M - 1] (limits included), where M is an\nimplementation-defined number of bits. Every implementation SHALL ensure that M is at least 2048. The exact\nvalue of M can be retrieved as the implementation property gpd.tee.arith.maxBigIntSize.\nThroughout section 8:\n• The notation “n-bit integer” refers to an integer that can take values in the range [-2n + 1, 2n - 1],\nincluding limits.\n• The notation “magnitude(src)” denotes the minimum number of required bits to represent the\nabsolute value of the big integer src in a natural binary representation. The developer may query the\nmagnitude of a big integer by using the function TEE_BigIntGetBitCount(src), as described in\nsection 8.7.5.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 258,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.1 Introduction ................................................................................................................... 258",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntGetBitCount",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 259 / 375\n8.2 Error Handling and Parameter Checking\nThis low-level arithmetical API performs very few checks on the parameters given to the functions. Most\nfunctions will return undefined results when called inappropriately but will not generate any error return codes.\nSome functions in the API MAY work for inputs larger than indicated by the implementation property\ngpd.tee.arith.maxBigIntSize. This is however not guaranteed. When a function does not support a\ngiven bigInt size beyond this limit, it SHALL panic and not produce invalid results.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 259,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.2 Error Handling and Parameter Checking",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "260 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.3 Data Types\nThis specification version has three data types for the arithmetical operations. These are TEE_BigInt,\nTEE_BigIntFMM, and TEE_BigIntFMMContext. Before using the arithmetic operations, the TA developer\nSHALL allocate and initialize the memory for the input and output operands This API provides entry points to\ndetermine the correct sizes of the needed memory allocations.\n8.3.1 TEE_BigInt\nThe TEE_BigInt type is a placeholder for the memory structure of the TEE core internal representation of a\nlarge multi-precision integer.\nSince: TEE Internal API v1.0\ntypedef uint32_t TEE_BigInt;\nThe following constraints are put on the internal representation of the TEE_BigInt:\n1. The size of the representation SHALL be a multiple of 4 bytes.\n2. The extra memory within the representation to store metadata SHALL NOT exceed 8 bytes.\n3. The representation SHALL be stored 32-bit aligned in memory.\nExactly how a multi-precision integer is represented internally is implementation-specific but it SHALL be\nstored within a structure of the maximum size given by the macro TEE_BigIntSizeInU32 (see\nsection 8.4.1).\nBy defining a TEE_BigInt as a uint32_t for the TA, we allow the TA developer to allocate static space\nfor multiple occurrences of TEE_BigInt at compile time which obey constraints 1 and 3. The allocation can\nbe done with code similar to this:\nuint32_t twoints[2 * TEE_BigIntSizeInU32(1024)];\nTEE_BigInt* first = twoints;\nTEE_BigInt* second = twoints + TEE_BigIntSizeInU32(1024);\n/* Or if we do it dynamically */\nTEE_BigInt* op1;\nop1 = TEE_Malloc(TEE_BigIntSizeInU32(1024) * sizeof(TEE_BigInt),\nTEE_MALLOC_NO_FILL | TEE_MALLOC_NO_SHARE);\n/* use op1 */\nTEE_Free(op1);\nConversions from an external representation to the internal TEE_BigInt representation and vice versa can\nbe done by using functions from section 8.6.\nMost functions in the TEE Arithmetical API take one or more TEE_BigInt pointers as parameters; for\nexample, func(TEE_BigInt *op1, TEE_BigInt *op2). When describing the parameters and what the\nfunction does, this specification will refer to the integer represented in the structure to which the pointer op1\npoints, by simply writing op1. It will be clear from the context when the pointer value is referred to and when\nthe integer value is referred to.\nSince the internal representation of TEE_BigInt is implementation-specific, TA implementers SHALL pass\nthe first address of a TEE_BigInt structure to functions that use them. A TEE_BigInt pointer that points\nto a location other than the start of a TEE_BigInt is a programmer error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 260,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.3 Data Types",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntSizeInU32,TEE_Free,TEE_Malloc",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 261 / 375\n8.3.2 TEE_BigIntFMMContext\nUsually, such a fast modular multiplication requires some additional data or derived numbers. That extra data\nis stored in a context that SHALL be passed to the fast modular multiplication function. The\nTEE_BigIntFMMContext is a placeholder for the TEE core internal representation of the context that is used\nin the fast modular multiplication operation.\nSince: TEE Internal API v1.0\ntypedef uint32_t TEE_BigIntFMMContext;\nThe following constraints are put on the internal representation of the TEE_BigIntFMMContext:\n1) The size of the representation SHALL be a multiple of 4 bytes.\n2) The representation SHALL be stored 32-bit aligned in memory.\nExactly how this context is represented internally is implementation-specific but it SHALL be stored within a\nstructure of the size given by the function TEE_BigIntFMMContextSizeInU32 (see section 8.4.2).\nSimilarly to TEE_BigInt, we expose this type as a uint32_t to the TA, which helps TEE_Malloc to align\nthe structure correctly when allocating space for a TEE_BigIntFMMContext*.\n8.3.3 TEE_BigIntFMM\nSome implementations may have support for faster modular multiplication algorithms such as Montgomery or\nBarrett multiplication for use in modular exponentiation. Typically, those algorithms require some\ntransformation of the input before the multiplication can be carried out. The TEE_BigIntFMM is a placeholder\nfor the memory structure that holds an integer in such a transformed representation.\nSince: TEE Internal API v1.0\ntypedef uint32_t TEE_BigIntFMM;\nThe following constraints are put on the internal representation of the TEE_BigIntFMM:\n1) The size of the representation SHALL be a multiple of 4 bytes.\n2) The representation SHALL be stored 32-bit aligned in memory.\nExactly how this transformed representation is stored internally is implementation-specific but it SHALL be\nstored within a structure of the maximum size given by the function TEE_BigIntFMMSizeInU32 (see\nsection 8.4.3).\nSimilarly to TEE_BigInt, we expose this type as a uint32_t to the TA, which helps TEE_Malloc to align\nthe structure correctly when allocating space for a TEE_BigIntFMM*.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 261,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.3.2 TEE_BigIntFMMContext",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntFMMContextSizeInU32,TEE_BigIntFMMSizeInU32",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "262 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.4 Memory Allocation and Size of Objects\nIt is the responsibility of the Trusted Application to allocate and free memory for all TEE arithmetical objects,\nincluding all operation contexts, used in the Trusted Application. Once the arithmetical objects are allocated,\nthe functions in the TEE Arithmetical API will never fail because of out-of-resources.\nTEE implementer’s note: Implementations of the TEE Arithmetical API SHOULD utilize memory from one or\nmore pre-allocated pools to store intermediate results during computations to ensure that the functions do not\nfail because of lack of resources. All memory resources used internally SHALL be thread-safe. Such a pool of\nscratch memory could be:\n• Internal memory of a hardware accelerator module\n• Allocated from mutex protected system-wide memory\n• Allocated from the heap of the TA instance, i.e. by using TEE_Malloc or TEE_Realloc\nIf the implementation uses a memory pool of temporary storage for intermediate results or if it uses hardware\nresources such as accelerators for some computations, the implementation SHALL either wait for the resource\nto become available or, for example in case of a busy hardware accelerator, resort to other means such as a\nsoftware implementation.\n8.4.1 TEE_BigIntSizeInU32\nSince: TEE Internal API v1.0\n#define TEE_BigIntSizeInU32(n) ((((n)+31)/32)+2)\nDescription\nThe TEE_BigIntSizeInU32 macro calculates the size of the array of uint32_t values needed to represent\nan n-bit integer. This is defined as a macro (thereby mandating the maximum size of the internal\nrepresentation) rather than as a function so that TA developers can use the macro in a static compile-time\ndeclaration of an array. Note that the implementation of the internal arithmetic functions assumes that memory\npointed to by the TEE_BigInt* is 32-bit aligned.\nParameters\n• n: maximum number of bits to be representable\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 262,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.4 Memory Allocation and Size of Objects",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntSizeInU32",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 263 / 375\n8.4.2 TEE_BigIntFMMContextSizeInU32\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nsize_t TEE_BigIntFMMContextSizeInU32( size_t modulusSizeInBits );\nDescription\nThe TEE_BigIntFMMContextSizeInU32 function returns the size of the array of uint32_t values needed\nto represent a fast modular context using a given modulus size. This function SHALL never fail.\nParameters\n• modulusSizeInBits: Size of modulus in bits\nSpecification Number: 10 Function Number: 0x1502\nReturn Value\nNumber of bytes needed to store a TEE_BigIntFMMContext given a modulus of length\nmodulusSizeInBits.\nPanic Reasons\n• If the implementation detects any error.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for modulusSizeInBits.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 263,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.4.2 TEE_BigIntFMMContextSizeInU32",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntFMMContextSizeInU32",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "264 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.4.3 TEE_BigIntFMMSizeInU32\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nsize_t TEE_BigIntFMMSizeInU32( size_t modulusSizeInBits );\nDescription\nThe TEE_BigIntFMMSizeInU32 function returns the size of the array of uint32_t values needed to\nrepresent an integer in the fast modular multiplication representation, given the size of the modulus in bits.\nThis function SHALL never fail.\nNormally from a mathematical point of view, this function would have needed the context to compute the exact\nrequired size. However, it is beneficial to have a function that does not take an initialized context as a parameter\nand thus the implementation may overstate the required memory size. It is nevertheless likely that a given\nimplementation of the fast modular multiplication can calculate a very reasonable upper-bound estimate based\non the modulus size.\nParameters\n• modulusSizeInBits: Size of modulus in bits\nSpecification Number: 10 Function Number: 0x1501\nReturn Value\nNumber of bytes needed to store a TEE_BigIntFMM given a modulus of length modulusSizeInBits.\nPanic Reasons\n• If the implementation detects any error.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for modulusSizeInBits.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 264,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.4.3 TEE_BigIntFMMSizeInU32",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntFMMSizeInU32",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 265 / 375\n8.5 Initialization Functions\nThese functions initialize the arithmetical objects after the TA has allocated the memory to store them. The\nTrusted Application SHALL call the corresponding initialization function after it has allocated the memory for\nthe arithmetical object.\n8.5.1 TEE_BigIntInit\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nvoid TEE_BigIntInit(\n[out] TEE_BigInt *bigInt,\nsize_t len );\nDescription\nThe TEE_BigIntInit function initializes bigInt and sets its represented value to zero. This function\nassumes that bigInt points to a memory area of len uint32_t. This can be done for example with the\nfollowing memory allocation:\nTEE_BigInt *a;\nsize_t len;\nlen = (size_t) TEE_BigIntSizeInU32(bitSize);\na = (TEE_BigInt*)TEE_Malloc(len*sizeof(TEE_BigInt), TEE_MALLOC_NO_FILL|TEE_MALLOC_NO_SHARE);\nTEE_BigIntInit(a, len);\nParameters\n• bigInt: A pointer to the TEE_BigInt to be initialized\n• len: The size in uint32_t of the memory pointed to by bigInt\nSpecification Number: 10 Function Number: 0x1601\nPanic Reasons\n• If the implementation detects any error.\n• If the provided value of len is larger than the number of bytes needed to represent\ngpd.tee.arith.maxBigIntSize.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for len.\nVersions prior to TEE Internal Core API v1.2 might not panic for large values of len.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 265,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.5 Initialization Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntInit,TEE_BigIntSizeInU32,TEE_Malloc",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "266 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.5.2 TEE_BigIntInitFMMContext1\nSince: TEE Internal Core API v1.2\nTEE_Result TEE_BigIntInitFMMContext1(\n[out] TEE_BigIntFMMContext *context,\nsize_t len,\n[in] TEE_BigInt *modulus );\nDescription\nThis function replaces the TEE_BigIntInitFMMContext function, whose use is deprecated.\nThe TEE_BigIntInitFMMContext1 function calculates the necessary prerequisites for the fast modular\nmultiplication and stores them in a context. This function assumes that context points to a memory area of\nlen uint32_t. This can be done for example with the following memory allocation:\nTEE_BigIntFMMContext* ctx;\nsize_t len = (size_t) TEE_BigIntFMMContextSizeInU32(bitsize);\nctx=(TEE_BigIntFMMContext *)TEE_Malloc(len * sizeof(TEE_BigIntFFMContext),\nTEE_MALLOC_NO_FILL | TEE_MALLOC_NO_SHARE);\n/*Code for initializing modulus*/\n…\nTEE_BigIntInitFMMContext1(ctx, len, modulus);\nEven though a fast multiplication might be mathematically defined for any modulus, normally there are\nrestrictions in order for it to be fast on a computer. This specification mandates that all implementations SHALL\nwork for all odd moduli larger than 2 and less than 2 to the power of the implementation defined property\ngpd.tee.arith.maxBigIntSize.\nIt is not required that even moduli be supported. Common usage of this function will not make use of even\nmoduli and so for performance reasons a technique without full even moduli support MAY be used. For this\nreason, partial or complete even moduli support are optional, and if an implementation will not be able to\nprovide a result for a specific case of even moduli then it shall return TEE_ERROR_NOT_SUPPORTED.\nParameters\n• context: A pointer to the TEE_BigIntFMMContext to be initialized\n• len: The size in uint32_t of the memory pointed to by context\n• modulus: The modulus, an odd integer larger than 2 and less than 2 to the power of\ngpd.tee.arith.maxBigIntSize\nSpecification Number: 10 Function Number: 0x1604\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_NOT_SUPPORTED: The underlying implementation is unable to perform the operation on a\nparticular modulus value. This may only be returned for even moduli inside the valid range, outside\nthat range the described PANIC will occur.\nPanic Reasons\n• If the implementation detects any error.\n• If the provided value of modulus is either less than two, or larger than or equal to 2^\ngpd.tee.arith.maxBigIntSize.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 266,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.5.2 TEE_BigIntInitFMMContext1",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntFMMContextSizeInU32,TEE_BigIntInitFMMContext1,TEE_Malloc",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 267 / 375\n8.5.3 TEE_BigIntInitFMM\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nvoid TEE_BigIntInitFMM(\n[in] TEE_BigIntFMM *bigIntFMM,\nsize_t len );\nDescription\nThe TEE_BigIntInitFMM function initializes bigIntFMM and sets its represented value to zero. This\nfunction assumes that bigIntFMM points to a memory area of len uint32_t. This can be done for example\nwith the following memory allocation:\nTEE_BigIntFMM *a;\nsize_t len;\nlen = (size_t) TEE_BigIntFMMSizeInU32(modulusSizeinBits);\na = (TEE_BigIntFMM *)TEE_Malloc(len * sizeof(TEE_BigIntFMM),\nTEE_MALLOC_NO_FILL | TEE_MALLOC_NO_SHARE );\nTEE_BigIntInitFMM(a, len);\nParameters\n• bigIntFMM: A pointer to the TEE_BigIntFMM to be initialized\n• len: The size in uint32_t of the memory pointed to by bigIntFMM\nSpecification Number: 10 Function Number: 0x1602\nPanic Reasons\n• If the implementation detects any error.\n• If the provided value of len is larger than the number of bytes needed to represent\ngpd.tee.arith.maxBigIntSize.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for len.\nVersions prior to TEE Internal Core API v1.2 might not panic for large values of len.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 267,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.5.3 TEE_BigIntInitFMM",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntFMMSizeInU32,TEE_BigIntInitFMM,TEE_Malloc",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "268 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.6 Converter Functions\nTEE_BigInt contains the internal representation of a multi-precision integer. However, in many use cases\nsome integer data comes from external sources or integers; for example, a local device gets an ephemeral\nDiffie-Hellman public key during a key agreement procedure. In this case the ephemeral key is expected to be\nin octet string format, which is a big-endian radix 256 representation for unsigned numbers. For example\n0x123456789abcdef has the following octet string representation:\n{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef}\nThis section provides functions to convert to and from such alternative representations.\n8.6.1 TEE_BigIntConvertFromOctetString\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_BigIntConvertFromOctetString(\n[out] TEE_BigInt *dest,\n[inbuf] uint8_t *buffer, size_t bufferLen,\nint32_t sign );\nDescription\nThe TEE_BigIntConvertFromOctetString function converts a bufferLen byte octet string buffer into\na TEE_BigInt format. The octet string is in most significant byte first representation. The input parameter\nsign will set the sign of dest. It will be set to negative if sign < 0 and to positive if sign >= 0.\nParameters\n• dest: Pointer to a TEE_BigInt to hold the result\n• buffer: Pointer to the buffer containing the octet string representation of the integer\n• bufferLen: The length of *buffer in bytes\n• sign: The sign of dest is set to the sign of sign.\nSpecification Number: 10 Function Number: 0x1701\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_OVERFLOW: If memory allocation for the dest is too small\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for bufferLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 268,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.6 Converter Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntConvertFromOctetString",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 269 / 375\n8.6.2 TEE_BigIntConvertToOctetString\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nTEE_Result TEE_BigIntConvertToOctetString(\n[outbuf] void* buffer, size_t *bufferLen,\n[in] TEE_BigInt *bigInt );\nDescription\nThe TEE_BigIntConvertToOctetString function converts the absolute value of an integer in\nTEE_BigInt format into an octet string. The octet string is written in a most significant byte first representation.\nParameters\n• buffer, bufferLen: Output buffer where converted octet string representation of the integer is\nwritten\n• bigInt: Pointer to the integer that will be converted to an octet string\nSpecification Number: 10 Function Number: 0x1703\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_SHORT_BUFFER: If the output buffer is too small to contain the octet string\nPanic Reasons\n• If the Implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for bufferLen.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 269,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.6.2 TEE_BigIntConvertToOctetString",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntConvertToOctetString",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "270 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.6.3 TEE_BigIntConvertFromS32\nSince: TEE Internal Core API v1.2 – See Backward Compatibility statement below.\nvoid TEE_BigIntConvertFromS32(\n[out] TEE_BigInt *dest,\nint32_t shortVal);\nDescription\nThe TEE_BigIntConvertFromS32 function sets *dest to the value shortVal.\nParameters\n• dest: Pointer to the start of an array reference by TEE_BigInt * into which the result is stored.\n• shortVal: Input value\nSpecification Number: 10 Function Number: 0x1702\nResult Size\nThe result SHALL point to a memory allocation which is at least large enough for holding a 32-bit signed value\nin a TEE_BigInt structure.\nPanic Reasons\n• If the memory pointed to by dest has not been initialized as a TEE_BigInt capable of holding at\nleast a 32-bit value.\n• If the implementation detects any error.\nBackward Compatibility\nVersions prior to TEE Internal Core API v1.2 did not include the clarification of panic due to an uninitialized\ndest pointer.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 270,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.6.3 TEE_BigIntConvertFromS32",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntConvertFromS32",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 271 / 375\n8.6.4 TEE_BigIntConvertToS32\nSince: TEE Internal API v1.0\nTEE_Result TEE_BigIntConvertToS32(\n[out] int32_t *dest,\n[in] TEE_BigInt *src );\nDescription\nThe TEE_BigIntConvertToS32 function sets *dest to the value of src, including the sign of src. If src\ndoes not fit within an int32_t, the value of *dest is undefined.\nParameters\n• dest: Pointer to an int32_t to store the result\n• src: Pointer to the input value\nSpecification Number: 10 Function Number: 0x1704\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_OVERFLOW: If src does not fit within an int32_t\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 271,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.6.4 TEE_BigIntConvertToS32",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntConvertToS32",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "272 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.7 Logical Operations\n8.7.1 TEE_BigIntCmp\nSince: TEE Internal API v1.0\nint32_t TEE_BigIntCmp(\n[in] TEE_BigInt *op1,\n[in] TEE_BigInt *op2 );\nDescription\nThe TEE_BigIntCmp function checks whether op1 > op2, op1 == op2, or op1 < op2.\nParameters\n• op1: Pointer to the first operand\n• op2: Pointer to the second operand\nSpecification Number: 10 Function Number: 0x1801\nReturn Value\nA negative number if op1 < op2; 0 if op1 == op2; and a positive number if op1 > op2.\nPanic Reasons\n• If the implementation detects any error.\n8.7.2 TEE_BigIntCmpS32\nSince: TEE Internal API v1.0\nint32_t TEE_BigIntCmpS32(\n[in] TEE_BigInt *op,\nint32_t shortVal );\nDescription\nThe TEE_BigIntCmpS32 function checks whether op > shortVal, op == shortVal, or op < shortVal.\nParameters\n• op: Pointer to the first operand\n• shortVal: Pointer to the second operand\nSpecification Number: 10 Function Number: 0x1802\nReturn Value\nA negative number if op < shortVal; 0 if op == shortVal; and a positive number if op > shortVal.\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 272,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.7 Logical Operations",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntCmp,TEE_BigIntCmpS32",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 273 / 375\n8.7.3 TEE_BigIntShiftRight\nSince: TEE Internal Core API v1.1.1 – See Backward Compatibility note below.\nvoid TEE_BigIntShiftRight(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op\nsize_t bits );\nDescription\nThe TEE_BigIntShiftRight function computes |dest| = |op| >> bits and dest will have the same\nsign as op.11 If bits is greater than the bit length of op, then the result is zero. dest and op MAY point\nto the same memory region but SHALL point to the start address of a TEE_BigInt.\nParameters\n• dest: Pointer to TEE_BigInt to hold the shifted result\n• op: Pointer to the operand to be shifted\n• bits: Number of bits to shift\nSpecification Number: 10 Function Number: 0x1805\nPanic Reasons\n• If the implementation detects any error.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for bits.\n11 The notation |x| means the absolute value of x.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 273,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.7.3 TEE_BigIntShiftRight",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntShiftRight",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "274 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.7.4 TEE_BigIntGetBit\nSince: TEE Internal API v1.0\nbool TEE_BigIntGetBit(\n[in] TEE_BigInt *src,\nuint32_t bitIndex );\nDescription\nThe TEE_BigIntGetBit function returns the bitIndexth bit of the natural binary representation of |src|.\nA true return value indicates a “1” and a false return value indicates a “0” in the bitIndexth position.\nIf bitIndex is larger than the number of bits in op, the return value is false, thus indicating a “0”.\nParameters\n• src: Pointer to the integer\n• bitIndex: The offset of the bit to be read, starting at offset 0 for the least significant bit\nSpecification Number: 10 Function Number: 0x1803\nReturn Value\nThe Boolean value of the bitIndexth bit in |src|. True represents a “1” and false represents a “0”.\nPanic Reasons\n• If the implementation detects any error.\n8.7.5 TEE_BigIntGetBitCount\nSince: TEE Internal API v1.0\nuint32_t TEE_BigIntGetBitCount(\n[in] TEE_BigInt *src );\nDescription\nThe TEE_BigIntGetBitCount function returns the number of bits in the natural binary representation of\n|src|; that is, the magnitude of src.\nParameters\n• src: Pointer to the integer\nSpecification Number: 10 Function Number: 0x1804\nReturn Value\nThe number of bits in the natural binary representation of |src|. If src equals zero, it will return 0.\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 274,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.7.4 TEE_BigIntGetBit",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntGetBit,TEE_BigIntGetBitCount",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 275 / 375\n8.7.6 TEE_BigIntSetBit\nSince: TEE Internal Core API v1.2\nTEE_Result TEE_BigIntSetBit(\n[inout] TEE_BigInt *op,\nuint32_t bitIndex,\nbool value);\nDescription\nThe TEE_BigIntSetBit function sets the bitIndexth bit of the natural binary representation of |op| to\n1 or 0, depending on the parameter value. If value is true the bit will be set, and if value is false\nthe bit will be cleared. If bitIndex is larger than the number of bits in op, the function will return an overflow\nerror.\nParameters\n• op: Pointer to the integer\n• bitIndex: The offset of the bit to be set, starting at offset 0 for the least significant bit.\n• value: The bit value to set where true represents a “1” and false represents a “0”.\nSpecification Number: 10 Function Number: 0x1806\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_OVERFLOW: If the bitIndexth bit is larger than allocated bit length of op\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 275,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.7.6 TEE_BigIntSetBit",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntSetBit",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "276 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.7.7 TEE_BigIntAssign\nSince: TEE Internal Core API v1.2\nTEE_Result TEE_BigIntAssign(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *src);\nDescription\nThe TEE_BigIntAssign function assigns the value of src to dest. The parameters src and dest\nMAY point within the same memory region but SHALL point to the start address of a TEE_BigInt.\nParameters\n• dest: Pointer to TEE_BigInt to be assigned.\n• src: Pointer to the source operand.\nSpecification Number: 10 Function Number: 0x1807\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_OVERFLOW: In case the dest operand cannot hold the value of src\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 276,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.7.7 TEE_BigIntAssign",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntAssign",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 277 / 375\n8.7.8 TEE_BigIntAbs\nSince: TEE Internal Core API v1.2\nTEE_Result TEE_BigIntAbs(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *src);\nDescription\nThe TEE_BigIntAbs function assigns the value of |src| to dest. The parameters src and dest MAY\npoint within the same memory region but SHALL point to the start address of a TEE_BigInt.\nParameters\n• dest: Pointer to TEE_BigInt to be assigned.\n• src: Pointer to the source operand.\nSpecification Number: 10 Function Number: 0x1808\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_OVERFLOW: In case the dest operand cannot hold the value of |src|\nPanic Reasons\n• If the implementation detects any error associated with this function that is not explicitly associated\nwith a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 277,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.7.8 TEE_BigIntAbs",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntAbs",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "278 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.8 Basic Arithmetic Operations\nThis section describes basic arithmetical operations addition, subtraction, negation, multiplication, squaring,\nand division.\n8.8.1 TEE_BigIntAdd\nSince: TEE Internal API v1.0\nvoid TEE_BigIntAdd(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op1,\n[in] TEE_BigInt *op2 );\nDescription\nThe TEE_BigIntAdd function computes dest = op1 + op2. All or some of dest, op1, and op2 MAY point\nto the same memory region but SHALL point to the start address of a TEE_BigInt.\nParameters\n• dest: Pointer to TEE_BigInt to store the result op1 + op2\n• op1: Pointer to the first operand\n• op2: Pointer to the second operand\nSpecification Number: 10 Function Number: 0x1901\nResult Size\nDepending on the sign of op1 and op2, the result may be larger or smaller than op1 and op2. For the\nworst case, dest SHALL have memory allocation for holding max(magnitude(op1),\nmagnitude(op2)) + 1 bits.12\nPanic Reasons\n• If the implementation detects any error.\n12 The magnitude function is defined in section 8.7.5.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 278,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.8 Basic Arithmetic Operations",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntAdd",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 279 / 375\n8.8.2 TEE_BigIntSub\nSince: TEE Internal API v1.0\nvoid TEE_BigIntSub(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op1,\n[in] TEE_BigInt *op2 );\nDescription\nThe TEE_BigIntSub function computes dest = op1 – op2. All or some of dest, op1, and op2 MAY point\nto the same memory region but SHALL point to the start address of a TEE_BigInt.\nParameters\n• dest: Pointer to TEE_BigInt to store the result op1 – op2\n• op1: Pointer to the first operand\n• op2: Pointer to the second operand\nSpecification Number: 10 Function Number: 0x1906\nResult Size\nDepending on the sign of op1 and op2, the result may be larger or smaller than op1 and op2. For the\nworst case, the result SHALL have memory allocation for holding max(magnitude(op1),\nmagnitude(op2)) + 1 bits.\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 279,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.8.2 TEE_BigIntSub",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntSub",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "280 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.8.3 TEE_BigIntNeg\nSince: TEE Internal API v1.0\nvoid TEE_BigIntNeg(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op );\nDescription\nThe TEE_BigIntNeg function negates an operand: dest = -op. dest and op MAY point to the same\nmemory region but SHALL point to the start address of a TEE_BigInt.\nParameters\n• dest: Pointer to TEE_BigInt to store the result -op\n• op: Pointer to the operand to be negated\nSpecification Number: 10 Function Number: 0x1904\nResult Size\nThe result SHALL have memory allocation for magnitude(op) bits.\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 280,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.8.3 TEE_BigIntNeg",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntNeg",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 281 / 375\n8.8.4 TEE_BigIntMul\nSince: TEE Internal API v1.0\nvoid TEE_BigIntMul(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op1,\n[in] TEE_BigInt *op2 );\nDescription\nThe TEE_BigIntMul function computes dest = op1 * op2. All or some of dest, op1, and op2 MAY\npoint to the same memory region but SHALL point to the start address of a TEE_BigInt.\nParameters\n• dest: Pointer to TEE_BigInt to store the result op1 * op2\n• op1: Pointer to the first operand\n• op2: Pointer to the second operand\nSpecification Number: 10 Function Number: 0x1903\nResult Size\nThe result SHALL have memory allocation for (magnitude(op1) + magnitude(op2)) bits.\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 281,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.8.4 TEE_BigIntMul",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntMul",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "282 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.8.5 TEE_BigIntSquare\nSince: TEE Internal API v1.0\nvoid TEE_BigIntSquare(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op );\nDescription\nThe TEE_BigIntSquare function computes dest = op * op. dest and op MAY point to the same\nmemory region but SHALL point to the start address of a TEE_BigInt.\nParameters\n• dest: Pointer to TEE_BigInt to store the result op * op\n• op: Pointer to the operand to be squared\nSpecification Number: 10 Function Number: 0x1905\nResult Size\nThe result SHALL have memory allocation for 2*magnitude(op) bits.\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 282,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.8.5 TEE_BigIntSquare",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntSquare",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 283 / 375\n8.8.6 TEE_BigIntDiv\nSince: TEE Internal API v1.0\nvoid TEE_BigIntDiv(\n[out] TEE_BigInt *dest_q,\n[out] TEE_BigInt *dest_r,\n[in] TEE_BigInt *op1,\n[in] TEE_BigInt *op2 );\nDescription\nThe TEE_BigIntDiv function computes dest_r and dest_q such that op1 = dest_q * op2 + dest_r.\nIt will round dest_q towards zero and dest_r will have the same sign as op1. Example:\nop1 op2 dest_q dest_r Expression\n53 7 7 4 53 = 7*7 + 4\n-53 7 -7 -4 -53 = (-7)*7 + (-4)\n53 -7 -7 +4 53 = (-7)*(-7) + 4\n-53 -7 7 -4 -53 = 7*(-7) + (-4)\nTo call TEE_BigIntDiv with op2 equal to zero is considered a programming error and will cause the\nTrusted Application to panic.\nThe memory pointed to by dest_q and dest_r SHALL NOT overlap. However, it is possible that\ndest_q == op1, dest_q == op2, dest_r == op1, dest_r == op2, when dest_q and dest_r do not\noverlap. If a NULL pointer is passed for either dest_q or dest_r, the implementation MAY take advantage\nof the fact that it is only required to calculate either dest_q or dest_r.\nParameters\n• dest_q: Pointer to a TEE_BigInt to store the quotient. dest_q can be NULL.\n• dest_r: Pointer to a TEE_BigInt to store the remainder. dest_r can be NULL.\n• op1: Pointer to the first operand, the dividend\n• op2: Pointer to the second operand, the divisor\nSpecification Number: 10 Function Number: 0x1902\nResult Sizes\nThe quotient, dest_q, SHALL have memory allocation sufficient to hold a TEE_BigInt with magnitude:\n• 0 if |op1| <= |op2| and\n• magnitude(op1) – magnitude(op2) if |op1| > |op2|.\nThe remainder dest_r SHALL have memory allocation sufficient to hold a TEE_BigInt with\nmagnitude(op2) bits.\nPanic Reasons\n• If op2 == 0\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 283,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.8.6 TEE_BigIntDiv",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntDiv",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "284 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.9 Modular Arithmetic Operations\nTo reduce the number of tests the modular functions needs to perform on entrance and to speed up the\nperformance, all modular functions (except TEE_BigIntMod) assume that input operands are normalized, i.e.\nnon-negative and smaller than the modulus, and the modulus SHALL be greater than one, otherwise it is a\nProgrammer Error and the behavior of these functions are undefined. This normalization can be done by using\nthe reduction function in section 8.9.1.\n8.9.1 TEE_BigIntMod\nSince: TEE Internal API v1.0\nvoid TEE_BigIntMod(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op,\n[in] TEE_BigInt *n );\nDescription\nThe TEE_BigIntMod function computes dest = op (mod n) such that 0 <= dest < n. dest and op\nMAY point to the same memory region but SHALL point to the start address of a TEE_BigInt. The value n\nSHALL point to a unique memory region. For negative op the function follows the normal convention\nthat -1 = (n-1) mod n.\nParameters\n• dest: Pointer to TEE_BigInt to hold the result op (mod n). The result dest will be in the\ninterval [0, n-1].\n• op: Pointer to the operand to be reduced mod n\n• n: Pointer to the modulus. Modulus SHALL be larger than 1.\nSpecification Number: 10 Function Number: 0x1A03\nResult Size\nThe result dest SHALL have memory allocation for magnitude(n) bits.13\nPanic Reasons\n• If n < 2\n• If the implementation detects any other error.\n13 The magnitude function is defined in section 8.7.5.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 284,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.9 Modular Arithmetic Operations",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntMod",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 285 / 375\n8.9.2 TEE_BigIntAddMod\nSince: TEE Internal API v1.0\nvoid TEE_BigIntAddMod(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op1,\n[in] TEE_BigInt *op2,\n[in] TEE_BigInt *n );\nDescription\nThe TEE_BigIntAddMod function computes dest = (op1 + op2) (mod n). All or some of dest, op1,\nand op2 MAY point to the same memory region but SHALL point to the start address of a TEE_BigInt. The\nvalue n SHALL point to a unique memory region.\nParameters\n• dest: Pointer to TEE_BigInt to hold the result (op1 + op2) (mod n)\n• op1: Pointer to the first operand. Operand SHALL be in the interval [0,n-1].\n• op2: Pointer to the second operand. Operand SHALL be in the interval [0,n-1].\n• n: Pointer to the modulus. Modulus SHALL be larger than 1.\nSpecification Number: 10 Function Number: 0x1A01\nResult Size\nThe result dest SHALL have memory allocation for magnitude(n) bits.\nPanic Reasons\n• If n < 2\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 285,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.9.2 TEE_BigIntAddMod",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntAddMod",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "286 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.9.3 TEE_BigIntSubMod\nSince: TEE Internal API v1.0\nvoid TEE_BigIntSubMod(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op1,\n[in] TEE_BigInt *op2,\n[in] TEE_BigInt *n );\nDescription\nThe TEE_BigIntSubMod function computes dest = (op1 - op2) (mod n). All or some of dest, op1,\nand op2 MAY point to the same memory region but SHALL point to the start address of a TEE_BigInt. The\nvalue n SHALL point to a unique memory region.\nParameters\n• dest: Pointer to TEE_BigInt to hold the result (op1 - op2) (mod n)\n• op1: Pointer to the first operand. Operand SHALL be in the interval [0,n-1].\n• op2: Pointer to the second operand. Operand SHALL be in the interval [0,n-1].\n• n: Pointer to the modulus. Modulus SHALL be larger than 1.\nSpecification Number: 10 Function Number: 0x1A06\nResult Size\nThe result dest SHALL have memory allocation for magnitude(n) bits.\nPanic Reasons\n• If n < 2\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 286,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.9.3 TEE_BigIntSubMod",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntSubMod",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 287 / 375\n8.9.4 TEE_BigIntMulMod\nSince: TEE Internal API v1.0\nvoid TEE_BigIntMulMod(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op1,\n[in] TEE_BigInt *op2,\n[in] TEE_BigInt *n );\nDescription\nThe TEE_BigIntMulMod function computes dest = (op1 * op2) (mod n). All or some of dest, op1,\nand op2 MAY point to the same memory region but SHALL point to the start address of a TEE_BigInt. The\nvalue n SHALL point to a unique memory region.\nParameters\n• dest: Pointer to TEE_BigInt to hold the result (op1 * op2) (mod n)\n• op1: Pointer to the first operand. Operand SHALL be in the interval [0,n-1].\n• op2: Pointer to the second operand. Operand SHALL be in the interval [0,n-1].\n• n: Pointer to the modulus. Modulus SHALL be larger than 1.\nSpecification Number: 10 Function Number: 0x1A04\nResult Size\nThe result dest SHALL have memory allocation for magnitude(n) bits.\nPanic Reasons\n• If n < 2\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 287,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.9.4 TEE_BigIntMulMod",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntMulMod",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "288 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.9.5 TEE_BigIntSquareMod\nSince: TEE Internal API v1.0\nvoid TEE_BigIntSquareMod(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op,\n[in] TEE_BigInt *n );\nDescription\nThe TEE_BigIntSquareMod function computes dest = (op * op) (mod n). dest and op1 MAY\npoint to the same memory region but SHALL point to the start address of a TEE_BigInt. The value n SHALL\npoint to a unique memory region.\nParameters\n• dest: Pointer to TEE_BigInt to hold the result (op * op) (mod n)\n• op: Pointer to the operand. Operand SHALL be in the interval [0,n-1].\n• n: Pointer to the modulus. Modulus SHALL be larger than 1.\nSpecification Number: 10 Function Number: 0x1A05\nResult Size\nThe result dest SHALL have memory allocation for magnitude(n) bits.\nPanic Reasons\n• If n < 2\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 288,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.9.5 TEE_BigIntSquareMod",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntSquareMod",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 289 / 375\n8.9.6 TEE_BigIntInvMod\nSince: TEE Internal API v1.0\nvoid TEE_BigIntInvMod(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op,\n[in] TEE_BigInt *n );\nDescription\nThe TEE_BigIntInvMod function computes dest such that dest * op = 1 (mod n). dest and op MAY\npoint to the same memory region but SHALL point to the start address of a TEE_BigInt. This function\nassumes that gcd(op,n) is equal to 1, which can be checked by using the function in section 8.10.1. If\ngcd(op,n) is greater than 1, then the result is unreliable.\nParameters\n• dest: Pointer to TEE_BigInt to hold the result (op^-1) (mod n)\n• op: Pointer to the operand. Operand SHALL be in the interval [1,n-1].\n• n: Pointer to the modulus. Modulus SHALL be larger than 1.\nSpecification Number: 10 Function Number: 0x1A02\nResult Size\nThe result dest SHALL have memory allocation for magnitude(n) bits.\nPanic Reasons\n• If n < 2\n• If op = 0\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 289,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.9.6 TEE_BigIntInvMod",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntInvMod",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "290 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.9.7 TEE_BigIntExpMod\nSince: TEE Internal Core API v1.2\nTEE_Result TEE_BigIntExpMod(\n[out] TEE_BigInt *dest,\n[in] TEE_BigInt *op1,\n[in] TEE_BigInt *op2,\n[in] TEE_BigInt *n,\n[in] TEE_BigIntFMMContext *context );\nDescription\nThe TEE_BigIntExpMod function computes dest = (op1 ^ op2) (mod n). All or some of dest, op1,\nand op2 MAY point to the same memory region but SHALL point to the start address of a TEE_BigInt. The\nvalue n SHALL point to a unique memory region. In order to utilize the FMM capabilities, a pre-computed\nTEE_BigIntFMMContext1 MAY be supplied. The context parameter MAY be NULL. If it is not NULL, the\ncontext SHALL be initialized using the same modulus n as provided as parameter.\nEven though a fast multiplication might be mathematically defined for any modulus, normally there are\nrestrictions in order for it to be fast on a computer. This specification mandates that all implementations SHALL\nwork for all odd moduli larger than 2 and less than 2 to the power of the implementation defined property\ngpd.tee.arith.maxBigIntSize.\nIt is not required that even moduli be supported. Common usage of this function will not make use of even\nmoduli and so for performance reasons a technique without full even moduli support MAY be used. For this\nreason, partial or complete even moduli support are optional, and if an implementation will not be able to\nprovide a result for a specific case of even moduli then it shall return TEE_ERROR_NOT_SUPPORTED.\nParameters\n• dest: Pointer to TEE_BigInt to hold the result (op1 ^ op2) (mod n)\n• op1: Pointer to the first operand. Operand SHALL be in the interval [0,n-1].\n• op2: Pointer to the second operand. Operand SHALL be non-negative.\n• n: Pointer to the modulus. Modulus SHALL be an odd integer larger than 2 and less than 2 to the\npower of gpd.tee.arith.maxBigIntSize.\n• context: Pointer to a context previously initialized using TEE_BigIntInitFMMContext1, or NULL.\nSpecification Number: 10 Function Number: 0x1A07\nReturn Code\n• TEE_SUCCESS if the value of n is supported for this operation.\n• TEE_ERROR_NOT_SUPPORTED if the value of n is not supported.\nResult Size\nThe result dest SHALL have memory allocation for magnitude(n) bits.\nPanic Reasons\n• If n <= 2\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 290,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.9.7 TEE_BigIntExpMod",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntExpMod",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 291 / 375\n8.10 Other Arithmetic Operations\n8.10.1 TEE_BigIntRelativePrime\nSince: TEE Internal API v1.0\nbool TEE_BigIntRelativePrime(\n[in] TEE_BigInt *op1,\n[in] TEE_BigInt *op2 );\nDescription\nThe TEE_BigIntRelativePrime function determines whether gcd(op1, op2) == 1. op1 and op2 MAY\npoint to the same memory region but SHALL point to the start address of a TEE_BigInt.\nParameters\n• op1: Pointer to the first operand\n• op2: Pointer to the second operand\nSpecification Number: 10 Function Number: 0x1B03\nReturn Value\n• true if gcd(op1, op2) == 1\n• false otherwise\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 291,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.10 Other Arithmetic Operations",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntRelativePrime",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "292 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.10.2 TEE_BigIntComputeExtendedGcd\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nvoid TEE_BigIntComputeExtendedGcd(\n[out] TEE_BigInt *gcd,\n[out] TEE_BigInt *u,\n[out] TEE_BigInt *v,\n[in] TEE_BigInt *op1,\n[in] TEE_BigInt *op2 );\nDescription\nThe TEE_BigIntComputeExtendedGcd function computes the greatest common divisor of the input\nparameters op1 and op2. op1 and op2 SHALL NOT both be zero. Furthermore it computes coefficients\nu and v such that u * op1 + v * op2 == gcd. op1 and op2 MAY point to the same memory region but\nSHALL point to the start address of a TEE_BigInt. u, v, or both can be NULL. If both are NULL, then the\nfunction only computes the gcd of op1 and op2.\nParameters\n• gcd: Pointer to TEE_BigInt to hold the greatest common divisor of op1 and op2\n• u: Pointer to TEE_BigInt to hold the first coefficient\n• v: Pointer to TEE_BigInt to hold the second coefficient\n• op1: Pointer to the first operand\n• op2: Pointer to the second operand\nSpecification Number: 10 Function Number: 0x1B01\nResult Sizes\n• The gcd result SHALL be able to hold Max(Magnitude(Op1), Magnitude(Op2)) bits.14\n• If op1 != 0 and op2 != 0, then |u| < |op2/gcd| and |v| < |op1/gcd|.15\n• If op1 != 0 and op2 = 0, then v = 0.\n• If op2 != 0 and op1 = 0, then u = 0.\nPanic Reasons\n• If op1 and op2 are both zero.\n• If the implementation detects any other error.\nBackward Compatibility\nVersions prior to TEE Internal Core API v1.2 did not make it explicit that setting both op1 and op2 to zero\nis illegal. Behavior of older versions in this case is therefore undefined.\n14 The magnitude function is defined in section 8.7.5.\n15 The notation |x| means the absolute value of x.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 292,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.10.2 TEE_BigIntComputeExtendedGcd",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntComputeExtendedGcd",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 293 / 375\n8.10.3 TEE_BigIntIsProbablePrime\nSince: TEE Internal API v1.0\nint32_t TEE_BigIntIsProbablePrime(\n[in] TEE_BigInt *op,\nuint32_t confidenceLevel );\nDescription\nThe TEE_BigIntIsProbablePrime function performs a probabilistic primality test on op. The parameter\nconfidenceLevel is used to specify the probability of a non-conclusive answer. If the function cannot\nguarantee that op is prime or composite, it SHALL iterate the test until the probability that op is composite\nis less than 2^(-confidenceLevel). Values smaller than 80 for confidenceLevel will not be recognized\nand will default to 80. The maximum honored value of confidenceLevel is implementation-specific, but\nSHALL be at least 80.\nThe algorithm for performing the primality test is implementation-specific, but its correctness and efficiency\nSHALL be equal to or better than the Miller-Rabin test.\nParameters\n• op: Candidate number that is tested for primality\n• confidenceLevel: The desired confidence level for a non-conclusive test. This parameter (usually)\nmaps to the number of iterations and thus to the running time of the test. Values smaller than 80 will\nbe treated as 80.\nSpecification Number: 10 Function Number: 0x1B02\nReturn Value\n• 0: If op is a composite number\n• 1: If op is guaranteed to be prime\n• -1: If the test is non-conclusive but the probability that op is composite is less than\n2^(-confidenceLevel)\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 293,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.10.3 TEE_BigIntIsProbablePrime",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntIsProbablePrime",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "294 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.11 Fast Modular Multiplication Operations\nThis part of the API allows the implementer of the TEE Internal Core API to give the TA developer access to\nfaster modular multiplication routines, possibly hardware accelerated. These functions MAY be implemented\nusing Montgomery or Barrett or any other suitable technique for fast modular multiplication. If no such support\nis possible the functions in this section MAY be implemented using regular multiplication and modular\nreduction. The data type TEE_BigIntFMM is used to represent the integers during repeated multiplications\nsuch as when calculating a modular exponentiation. The internal representation of the TEE_BigIntFMM is\nimplementation specific.\n8.11.1 TEE_BigIntConvertToFMM\nSince: TEE Internal API v1.0\nvoid TEE_BigIntConvertToFMM(\n[out] TEE_BigIntFMM *dest,\n[in] TEE_BigInt *src,\n[in] TEE_BigInt *n,\n[in] TEE_BigIntFMMContext *context );\nDescription\nThe TEE_BigIntConvertToFMM function converts src into a representation suitable for doing fast modular\nmultiplication. If the operation is successful, the result will be written in implementation-specific format into the\nbuffer dest, which SHALL have been allocated by the TA and initialized using TEE_BigIntInitFMM.\nParameters\n• dest: Pointer to an initialized TEE_BigIntFMM memory area\n• src: Pointer to the TEE_BigInt to convert\n• n: Pointer to the modulus\n• context: Pointer to a context previously initialized using TEE_BigIntInitFMMContext1\nSpecification Number: 10 Function Number: 0x1C03\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 294,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.11 Fast Modular Multiplication Operations",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntConvertToFMM",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 295 / 375\n8.11.2 TEE_BigIntConvertFromFMM\nSince: TEE Internal API v1.0\nvoid TEE_BigIntConvertFromFMM(\n[out] TEE_BigInt *dest,\n[in] TEE_BigIntFMM *src,\n[in] TEE_BigInt *n,\n[in] TEE_BigIntFMMContext *context );\nDescription\nThe TEE_BigIntConvertFromFMM function converts src in the fast modular multiplication representation\nback to a TEE_BigInt representation.\nParameters\n• dest: Pointer to an initialized TEE_BigInt memory area to hold the converted result\n• src: Pointer to a TEE_BigIntFMM holding the value in the fast modular multiplication representation\n• n: Pointer to the modulus\n• context: Pointer to a context previously initialized using TEE_BigIntInitFMMContext1\nSpecification Number: 10 Function Number: 0x1C02\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 295,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.11.2 TEE_BigIntConvertFromFMM",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntConvertFromFMM",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "296 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n8.11.3 TEE_BigIntComputeFMM\nSince: TEE Internal API v1.0\nvoid TEE_BigIntComputeFMM(\n[out] TEE_BigIntFMM *dest,\n[in] TEE_BigIntFMM *op1,\n[in] TEE_BigIntFMM *op2,\n[in] TEE_BigInt *n,\n[in] TEE_BigIntFMMContext *context );\nDescription\nThe TEE_BigIntComputeFMM function calculates dest = op1 * op2 in the fast modular multiplication\nrepresentation. The pointers dest, op1, and op2 SHALL each point to a TEE_BigIntFMM which has been\npreviously initialized with the same modulus and context as used in this function call; otherwise the result is\nundefined. All or some of dest, op1, and op2 MAY point to the same memory region but SHALL point to\nthe start address of a TEE_BigIntFMM.\nParameters\n• dest: Pointer to TEE_BigIntFMM to hold the result op1 * op2 in the fast modular multiplication\nrepresentation\n• op1: Pointer to the first operand\n• op2: Pointer to the second operand\n• n: Pointer to the modulus\n• context: Pointer to a context previously initialized using TEE_BigIntInitFMMContext1\nSpecification Number: 10 Function Number: 0x1C01\nPanic Reasons\n• If the implementation detects any error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 296,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "8.11.3 TEE_BigIntComputeFMM",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntComputeFMM",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 297 / 375\n9 Peripheral and Event APIs\nSince: TEE Internal Core API v1.2\nNote: The Peripheral and Event APIs were originally introduced in [TEE TUI Low] v1.0. They are\nincorporated in this document as of TEE Internal Core API v1.2. This document supersedes the text in\n[TEE TUI Low] v1.0 and in the event of any discrepancy, this document prevails.\nThe Peripheral and Event APIs, where provided by a Trusted OS, enable interaction between Trusted\nApplications and peripherals.\nThe Peripheral and Event APIs are optional, but if one is implemented the other is also required. A sentinel\nTEE_CORE_API_EVENT, defined in section 3.1.3, is set on implementations where they are supported.\nThis section includes the following subsections:\n9.1 Introduction ................................................................................................................... 297\n9.2 Constants...................................................................................................................... 302\n9.3 Peripheral State Table .................................................................................................. 307\n9.4 Operating System Pseudo-peripheral .......................................................................... 309\n9.5 Session Pseudo-peripheral .......................................................................................... 310\n9.6 Data Structures ............................................................................................................. 311\n9.7 Peripheral API Functions .............................................................................................. 321\n9.8 Event API Functions ..................................................................................................... 335\n9.1 Introduction\n9.1.1 Peripherals\nA peripheral is an ancillary component used to interact with a system, with the software interface between\nperipheral and system being provided by a device driver. On a typical device that includes a TEE, there may\nbe many peripherals. The TEE is not expected to have software drivers for interacting with every peripheral\nattached to the device.\nThere are several classes of peripheral:\n• Peripherals that are temporarily or permanently isolated from non-TEE entities, managed by the TEE,\nand fully usable by a TA through the APIs the TEE offers. These devices are described as TEE\nownable.\n• Peripherals that are under the total control of the REE or other entity outside the TEE and are not\nusable by the TEE.\n• Peripherals where the TEE cannot interpret events – because it does not have the required driver –\nbut where the TEE can control the flow of events, for example by routing flow through the TEE or by\ncontrolling the clock on a bus. These devices are described as TEE controllable.\n• Peripherals for which a TEE can parse and forward events, even though the TEE does not fully control\nthat source; e.g. a sockets interface to the REE. As the interface is hosted by the REE, it is REE\ncontrolled, but TEE parseable.\nTA and TEE implementers should be aware of potential side channel attacks and provide and/or control\nappropriate interfaces to restrict those attacks. For example, a TEE could be configured to stop access by\nentities outside the TEE to specific peripherals such as accelerometers to prevent indirect interpretation of\ntouch screen use while the user is interacting with a TA using a TUI.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 297,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.1 Introduction ................................................................................................................... 297",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "298 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nThe TEE_Peripheral_GetPeripherals function enables the TA to discover which peripherals the TEE\nknows about, and their characteristics, while other functions support low-level interaction with peripherals.\nWhen a data source (or sink) is handed back to the REE, or transferred between TA instances, any state\nspecific to previous TA activity or TA/user interaction SHALL be removed to prevent information leakage.\n9.1.1.1 Access to Peripherals from a TA\nPeripherals which are under the full or partial control of the TEE (i.e. peripherals which are TEE ownable, TEE\nparseable, or TEE controllable) MAY support exclusive access by no more than one TA at any one time.\nA Trusted OS MAY provide additional access control mechanisms which are out of scope of this specification,\neither because they are described in separate GlobalPlatform specifications or because they are\nimplementation specific. An (informative) example is a Trusted OS that limits access to a peripheral to those\nTAs that reside in specific security domains.\nThe Trusted OS SHALL recover ownership of all peripherals with open handles from a TA in the following\nscenarios:\n• The TA Panics.\n• TA_DestroyEntryPoint is called for the TA owning the peripheral.\n9.1.1.1.1 Multiple Access to Peripherals (informative)\nSome peripherals offer multiple channels, addressing capability, or other mechanisms which have the potential\nto allow access to multiple endpoints. It may be convenient in some scenarios to assign different logical\nendpoints to different TAs, while supporting a model of exclusive access to the peripheral per TA.\nOne approach, shown in the following figure, is to implement a separate driver interface for each of the multiple\nendpoints. For example, a driver for an I2C interface may support separate endpoints for each I2C address,\nwhile itself being the exclusive owner of the I2C peripheral. Such drivers SHOULD ensure that information\nleakage between clients of the different endpoints is prevented.\nFigure 9-1: Example of Multiple Access to Bus-oriented Peripheral (Informative)\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 298,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.1.1.1 Access to Peripherals from a TA",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 299 / 375\n9.1.2 Event Loop\nThe event loop is a mechanism by which a TA can enquire for and then process messages from types of\nperipherals including pseudo-peripherals. The event loop can simplify TA programming in scenarios where\nperipheral interaction occurs asynchronously with respect to TEE operation.\nEvents are polymorphic, with the ability to transport device-specific payloads.\nThe underlying implementation of the event loop is implementation-dependent; however, the Trusted OS\nSHALL ensure that:\n• A TA can only successfully obtain an event source for a peripheral for which it already has an open\nhandle. This ensures that if a peripheral supports exclusive access by a single TA, sensitive\ninformation coming from a peripheral can be consumed by only that TA, preventing opportunities for\ninformation leakage.\n• Events submitted to the event queue for a given peripheral are submitted in the order in which they\noccur. No guarantee is made of the ordering of events from different peripherals.\n• An error scenario in the Event API which results in a Panic SHALL NOT cause a Panic in TAs which\nare blocked waiting on synchronous operations. It will either be attributed to a TEE level problem (e.g.\na corrupt library) or will occur in the TEE_Event_Wait function.\n9.1.3 Peripheral State\nThe peripheral state API provides an abstracted interface to some of the hardware features of the underlying\ndevice. It can be desirable to enable a TA to read and/or configure the hardware in a specific way, for example\nit may be necessary to set data transmission rates on a serial peripheral, or to discover the manufacturer of a\nbiometric sensor.\nThe Peripheral API provides a mechanism by which TAs can discover information about the peripherals they\nuse, and by which modifiable parameters can be identified and updated. It is intended to ensure that\nperipherals for which GlobalPlatform specifies interfaces can be used in a portable manner by TAs.\nIt is expected that other GlobalPlatform specifications may define state items for peripherals.\n9.1.4 Overview of Peripheral and Event APIs\nFigure 9-2 shows how the functions and structures of the Peripheral API are related. The notation is an\nadaptation of UML in which:\n• “F” denotes a function call.\n• “S” denotes a C struct.\n• “E” denotes an enumeration: A constrained set of values of type uint32_t.\n• “H” denotes a handle type, which may be an opaque pointer or some other integer type used as a\nunique identifier.\n• Arrows are used to denote whether a value is returned from a function call or is a parameter to a\nfunction call.\n• Dashed lines indicate other types of useful relationship.\nFigure 9-3 shows the Event API in a similar format. Structures that are common to the Peripheral and Event\nAPIs are shown in both diagrams to make the relation between the API sets explicit.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 299,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.1.2 Event Loop",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "300 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nFigure 9-2: Peripheral API Overview\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 300,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 300",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 301 / 375\nFigure 9-3: Event API Overview\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved. The technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform.\nUse of this information is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 301,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 301",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "302 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.2 Constants\nNote: See section 3.3.3 for recommendations on constant declaration.\n9.2.1 Handles\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\nThe value TEE_INVALID_HANDLE is used by the peripheral subsystem to denote an invalid handle.\n#define TEE_INVALID_HANDLE ((TEE_EventQueueHandle) (0))\n9.2.2 Maximum Sizes\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\nTable 9-1 defines the maximum size of structure payloads.\nIf another specification supported by a given Trusted OS requires a larger payload to support events, these\nSHALL be implemented using pointers or handles to other structures that fit within the defined maximum\nstructure payloads.\nTable 9-1: Maximum Sizes of Structure Payloads\nConstant Name Value\nTEE_MAX_EVENT_PAYLOAD_SIZE 32 bytes\nBackward Compatibility\n[TEE TUI Low] v1.0 offered the option of supporting larger payloads. This option is no longer supported.\n9.2.3 TEE_EVENT_TYPE\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\nTEE_EVENT_TYPE is a value indicating the source of an event.\n#if defined(TEE_CORE_API_EVENT)\ntypedef uint32_t TEE_EVENT_TYPE;\n#endif\nTo distinguish the event types defined in various specifications:\n• GlobalPlatform event types SHALL have nibble 8 (the high nibble) = 0, and SHALL include the\nspecification number as a 3-digit BCD (Binary Coded Decimal) value in nibbles 7 through 5.\nFor example, GPD_SPE_123 may define specification unique event type codes 0x01230000 to\n0x0123ffff.\nAll event types defined in this specification have the high word set to 0x0010.\n• Event types created by external bodies SHALL have nibble 8 = 1.\n• Implementation defined event types SHALL have nibble 8 = 2.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 302,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.2 Constants",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_INVALID_HANDLE",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 303 / 375\nTable 9-2 lists event types defined to date.\nImplementations may not support all event types; however, it is recommended that TA developers define event\nhandlers for all of the events defined on the peripherals they support. To determine which event types are\nsupported by a particular peripheral, the developer can consult the documentation for that peripheral.\nTable 9-2: TEE_EVENT_TYPE Values\nConstant Name Value\nReserved for future use 0x00000000 – 0x0000ffff\nReserved for GlobalPlatform TEE specifications numbered 001 - 009 0x00010000 – 0x0009ffff\nTEE_EVENT_TYPE_ALL 0x00100000\nTEE_EVENT_TYPE_CORE_CLIENT_CANCEL 0x00100001\nTEE_EVENT_TYPE_CORE_TIMER 0x00100002\nTEE_EVENT_TYPE_ACCESS_CHANGE 0x00100003\nReserved for future versions of this specification 0x00100004 – 0x0010fffe\nTEE_EVENT_TYPE_ILLEGAL_VALUE 0x0010ffff\nReserved for GlobalPlatform TEE specifications numbered 011 - 041 0x00110000 – 0x0041ffff\nTEE_EVENT_TYPE_BIO 0x00420000\nDefined in [TEE TUI Bio]; if the Biometrics API is not implemented,\nreserved.\nReserved for [TEE TUI Bio] 0x00420001 – 0x0042ffff\nReserved for GlobalPlatform TEE specifications numbered 043 – 054 0x00430000 – 0x0054ffff\nTEE_EVENT_TYPE_TUI_ALL 0x00550000\nTEE_EVENT_TYPE_TUI_BUTTON 0x00550001\nTEE_EVENT_TYPE_TUI_KEYBOARD 0x00550002\nTEE_EVENT_TYPE_TUI_REE 0x00550003\nTEE_EVENT_TYPE_TUI_TOUCH 0x00550004\nReserved for [TEE TUI Low] 0x00550005 – 0x0055ffff\nReserved for GlobalPlatform TEE specifications numbered 056 – 999 0x00560000 – 0x0999ffff\nReserved for future use 0x099a0000 – 0x0fffffff\nReserved for external bodies; number space managed by 0x10000000 – 0x1fffffff\nGlobalPlatform\nImplementation defined 0x20000000 – 0x2fffffff\nReserved for future use 0x30000000 – 0xffffffff\nTEE_EVENT_TYPE_ILLEGAL_VALUE is reserved for testing and validation and SHALL be treated as an\nundefined value when set in the TEE_Event structure.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 303,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 303",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "304 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.2.4 TEE_PERIPHERAL_TYPE\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\nTEE_PERIPHERAL_TYPE is a value used to identify a peripheral attached to the device.\n#if defined(TEE_CORE_API_EVENT)\ntypedef uint32_t TEE_PERIPHERAL_TYPE;\n#endif\nThe TEE_Peripheral_GetPeripherals function lists all the peripherals known to the TEE.\nTable 9-3: TEE_PERIPHERAL_TYPE Values\nConstant Name Value\nReserved 0x00000000\nTEE_PERIPHERAL_OS 0x00000001\nTEE_PERIPHERAL_CAMERA 0x00000002\nTEE_PERIPHERAL_MICROPHONE 0x00000003\nTEE_PERIPHERAL_ACCELEROMETER 0x00000004\nTEE_PERIPHERAL_NFC 0x00000005\nTEE_PERIPHERAL_BLUETOOTH 0x00000006\nTEE_PERIPHERAL_USB 0x00000007\nTEE_PERIPHERAL_FINGERPRINT 0x00000008\nTEE_PERIPHERAL_KEYBOARD 0x00000009\nTEE_PERIPHERAL_TOUCH 0x0000000A\nTEE_PERIPHERAL_BIO 0x0000000B\nReserved for GlobalPlatform specifications 0x0000000C – 0x3fffffff\nReserved for other Specification Development 0x40000000 – 0x7ffffffe\nOrganizations (SDOs) under Liaison Statement (LS)\nTEE_PERIPHERAL_ILLEGAL_VALUE 0x7fffffff\nImplementation defined 0x80000000 – 0xffffffff\nTEE_PERIPHERAL_ILLEGAL_VALUE is reserved for testing and validation and SHALL be treated as an\nundefined value when returned by the TEE_Peripheral_GetPeripherals function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 304,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.2.4 TEE_PERIPHERAL_TYPE",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 305 / 375\n9.2.5 TEE_PERIPHERAL_FLAGS\nTable 9-4: TEE_PERIPHERAL_FLAGS Values\nConstant Name Value Meaning\nTEE_PERIPHERAL_FLAG_REE_CONTROLLED 0x00000000 The Trusted OS does not control this\nperipheral. All events can be\nprocessed by the REE.\nTEE_PERIPHERAL_FLAG_TEE_CONTROLLABLE 0x00000001 The Trusted OS can control this\nperipheral.\nEvents SHALL NOT be passed to the\nREE.\nTEE_PERIPHERAL_FLAG_EVENT_SOURCE 0x00000002 The TEE can parse the events\ngenerated by this peripheral.\nThe peripheral can be attached to an\nevent queue.\nTEE_PERIPHERAL_FLAG_LOCKED 0x00000004 This peripheral has been locked for\naccess by a TA or the REE.\nTEE_PERIPHERAL_FLAG_OWNED 0x00000008 This peripheral has been locked for\naccess by this TA instance.\nSet bits reserved for use by GlobalPlatform 0x007FFFF0\nTEE_PERIPHERAL_FLAG_ILLEGAL_VALUE 0x00800000\nSet bits reserved for implementation defined 0xFF000000\nflags\nTEE_PERIPHERAL_FLAG_ILLEGAL_VALUE is reserved for testing and validation and SHALL be treated as an\nundefined value when it is set in TEE_PERIPHERAL_STATE_FLAGS.\nThe flags TEE_PERIPHERAL_FLAG_REE_CONTROLLED and TEE_PERIPHERAL_FLAG_TEE_CONTROLLABLE\nare mutually exclusive.\nIf an event source has the TEE_PERIPHERAL_FLAG_TEE_CONTROLLABLE flag but not the\nTEE_PERIPHERAL_FLAG_EVENT_SOURCE flag, the TEE can control the source, but not understand it. Any\nevents generated while the TEE has control of the source SHALL be dropped.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 305,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.2.5 TEE_PERIPHERAL_FLAGS",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "306 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.2.6 TEE_PeripheralStateId Values\nTEE_PeripheralState instances are used to provide information about peripherals to a TA. The following\nfield values, which represent legal values of type TEE_PeripheralStateId which can be used to identify\nspecific peripheral state items, are defined in this specification. Other specifications may define additional\nvalues for TEE_PeripheralStateId.\nTable 9-5: TEE_PeripheralStateId Values\nConstant Name Value\nReserved 0x00000000\nTEE_PERIPHERAL_STATE_NAME 0x00000001\nTEE_PERIPHERAL_STATE_FW_INFO 0x00000002\nTEE_PERIPHERAL_STATE_MANUFACTURER 0x00000003\nTEE_PERIPHERAL_STATE_FLAGS 0x00000004\nReserved for GlobalPlatform specifications 0x00000005 – 0x3fffffff\nReserved for other SDOs under LS 0x40000000 – 0x7ffffffe\nTEE_PERIPHERAL_STATE_ILLEGAL_VALUE 0x7fffffff\nImplementation defined 0x80000000 – 0xffffffff\nTEE_PERIPHERAL_STATE_ILLEGAL_VALUE is reserved for testing and validation and SHALL be treated as\nan undefined value when set in the TEE_PeripheralState structure.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 306,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.2.6 TEE_PeripheralStateId Values",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 307 / 375\n9.3 Peripheral State Table\nEvery peripheral instance has a table of associated state information. A TA can obtain this table by calling\nTEE_Peripheral_GetStateTable. Each item in the state table is of TEE_PeripheralState type.\nThe peripheral state table can be used to retrieve standardized, and peripheral specific, information about the\nperipheral. It also contains identifiers that can then be used for direct get/put control of specific aspects of the\nperipheral.\nFor example, a serial interface peripheral may expose interfaces to its control registers to provide direct access\nto readable parity error counters and writable baud rate settings.\nThe state table returned by TEE_Peripheral_GetStateTable is a read-only snapshot of peripheral state\nat function call time. Some of the values in the table may support modification by the caller using the\nTEE_Peripheral_SetState function – this is indicated by the value of the ro field.\nThe following sections define the state table items which could be present in the peripheral state table. Other\nspecifications may define additional items.\n9.3.1 Peripheral Name\nPeripherals SHALL provide a state table entry that defines a printable name for the peripheral.\nTable 9-6: TEE_PERIPHERAL_STATE_NAME Values\nTEE_PeripheralValueType Field Value\ntag TEE_PERIPHERAL_VALUE_STRING\nid TEE_PERIPHERAL_STATE_NAME\nro true\nu.stringVal Pointer to a NULL-terminated printable string which contains a\nprintable peripheral name; SHALL be unique among the\nperipherals that are presented to a given TA.\nNote: In [TEE TUI Low] v1.0, uniqueness was recommended but\nnot required.\n9.3.2 Firmware Information\nPeripherals MAY provide a state table entry that identifies the firmware version executing on the peripheral.\nThis entry is only relevant to peripherals which contain a processor.\nTable 9-7: TEE_PERIPHERAL_STATE_FW_INFO Values\nTEE_PeripheralValueType Field Value\ntag TEE_PERIPHERAL_VALUE_STRING\nid TEE_PERIPHERAL_STATE_FW_INFO\nro true\nu.stringVal Pointer to a NULL-terminated printable string which contains\ninformation about the firmware running in the peripheral\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 307,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.3 Peripheral State Table",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "308 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.3.3 Manufacturer\nPeripherals MAY provide a state table entry that identifies the manufacturer of the peripheral.\nTable 9-8: TEE_PERIPHERAL_STATE_MANUFACTURER Values\nTEE_PeripheralValueType Field Value\ntag TEE_PERIPHERAL_VALUE_STRING\nid TEE_PERIPHERAL_STATE_MANUFACTURER\nro true\nu.stringVal Pointer to a NULL-terminated printable string which contains\ninformation about the manufacturer of the peripheral\n9.3.4 Flags\nPeripherals SHALL provide a state table entry that provides information about the way in which the Trusted\nOS can manage the input and output from this peripheral from the calling TA using one or more of the values\ndefined for TEE_PERIPHERAL_FLAGS – these may be combined in a bitwise manner.\nTable 9-9: TEE_PERIPHERAL_STATE_FLAGS Values\nTEE_PeripheralValueType Field Value\ntag TEE_PERIPHERAL_VALUE_UINT32\nid TEE_PERIPHERAL_STATE_FLAGS\nro true\nu.uint32Val A combination of zero or more of the TEE_PERIPHERAL_FLAGS\nvalues defined in section 9.2.5\n9.3.5 Exclusive Access\nPeripherals SHALL provide a state table entry that identifies whether the peripheral supports exclusive access.\nTable 9-10: TEE_PERIPHERAL_STATE_EXCLUSIVE_ACCESS Values\nTEE_PeripheralValueType Field Value\ntag TEE_PERIPHERAL_VALUE_BOOL\nid TEE_PERIPHERAL_STATE_EXCLUSIVE_ACCESS\nro true\nu.boolVal Set to true if this peripheral can be opened for exclusive\naccess.\nThe value of the TEE_PERIPHERAL_STATE_EXCLUSIVE_ACCESS field SHALL be set to the same value on\nall TAs running on a given TEE which have access to that peripheral.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 308,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.3.3 Manufacturer",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 309 / 375\n9.4 Operating System Pseudo-peripheral\nThe Operating System pseudo-peripheral provides a mechanism by which events originating in the Trusted\nOS or the REE can be provided to a Trusted Application.\nA single instance of the Operating System pseudo-peripheral is provided by a Trusted OS supporting the\nPeripheral and Event APIs. It has TEE_PERIPHERAL_TYPE set to TEE_PERIPHERAL_OS.\nA Trusted Application can determine the source of an Event generated by the Operating System pseudo-\nperipheral by looking at the event type. This information about the event source is trustworthy because it is\ngenerated within the Trusted OS. Events originating outside the Trusted OS may be less trustworthy than\nthose originating from within the Trusted OS, and Trusted Application developers should take account of this\nin their designs.\nThe Operating System pseudo-peripheral SHALL NOT expose a TEE_PeripheralHandle, as it supports\nneither the polled Peripheral API nor writeable state. It SHALL expose a TEE_EventSourceHandle.\nThe Operating System pseudo-peripheral SHALL NOT be lockable for exclusive access and SHALL be\nexposed to all TA instances. Any TA in the Trusted OS can subscribe to its event queue if it wishes to do so.\n9.4.1 State Table\nThe peripheral state table for the Operating System pseudo-peripheral SHALL contain the values listed in the\nfollowing table.\nTable 9-11: TEE_PERIPHERAL_OS State Table Values\nTEE_PeripheralValueType.id TEE_PeripheralValueType.u\nTEE_PERIPHERAL_STATE_NAME \"TEE\"\nTEE_PERIPHERAL_STATE_FLAGS TEE_PERIPHERAL_FLAG_EVENT_SOURCE\nTEE_PERIPHERAL_STATE_EXCLUSIVE_ACCESS false\n9.4.2 Events\nThe Operating System pseudo-peripheral, when opened, SHALL return a TEE_PeripheralDescriptor\nwhich SHALL contain a valid TEE_EventSourceHandle and an invalid TEE_PeripheralHandle because\nit acts only as an event source.\nThe Operating System pseudo-peripheral can act as a source for the event types listed in section 9.6.9.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 309,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.4 Operating System Pseudo-peripheral",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "310 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.5 Session Pseudo-peripheral\nThe Session pseudo-peripheral provides a mechanism by which the events private to a specific TA session\nmay be provided to a Trusted Application.\nAn instance of the Session pseudo-peripheral is provided by a Trusted OS to each open TA session, it has\nTEE_PERIPHERAL_TYPE set to TEE_PERIPHERAL_SESSION.\nThe Session pseudo-peripheral SHALL NOT expose a TEE_PeripheralHandle, as it supports neither the\npolled Peripheral API nor writeable state. It SHALL expose a TEE_EventSourceHandle.\nThe Session pseudo-peripheral SHALL be exposed only the specific session of an executing TA instance.\n9.5.1 State Table\nThe peripheral state table for the Operating System pseudo-peripheral SHALL contain the values listed in the\nfollowing table.\nTable 9-12: TEE_PERIPHERAL_SESSION State Table Values\nTEE_PeripheralValueType.id TEE_PeripheralValueType.u\nTEE_PERIPHERAL_STATE_NAME \"Session\"\nTEE_PERIPHERAL_STATE_FLAGS TEE_PERIPHERAL_FLAG_EVENT_SOURCE\nTEE_PERIPHERAL_STATE_EXCLUSIVE_ACCESS true\n9.5.2 Events\nThe Session pseudo-peripheral, when opened, SHALL return a TEE_PeripheralDescriptor which SHALL\ncontain a valid TEE_EventSourceHandle and an invalid TEE_PeripheralHandle because it acts only\nas an event source.\nThe Session pseudo-peripheral can act as a source for the following event types:\n• TEE_Event_ClientCancel (see section 9.6.9.2)\n• TEE_Event_Timer (see section 9.6.9.3)\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 310,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.5 Session Pseudo-peripheral",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Event_ClientCancel,TEE_Event_Timer",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 311 / 375\n9.6 Data Structures\nSeveral data structures defined in this specification are versioned. This allows a TA written against an earlier\nversion of this API than that implemented by a TEE to request the version of the structure it understands.\n9.6.1 TEE_Peripheral\nTEE_Peripheral is a structure used to provide information about a single peripheral to a TA.\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\ntypedef struct\n{\nuint32_t version;\nunion {\nTEE_Peripheral_V1 v1;\n} u;\n} TEE_Peripheral;\ntypedef struct\n{\nTEE_PERIPHERAL_TYPE periphType;\nTEE_PeripheralId id;\n} TEE_Peripheral_V1;\n#endif\nThe structure fields have the following meanings:\n• version: The version of the structure – currently always 1.\n• periphType: The type of the peripheral.\n• id: A unique identifier for a given peripheral on a TEE.\nA TEE may have more than one peripheral of the same TEE_PERIPHERAL_TYPE. The id parameter provides\na TEE-unique identifier for a specific peripheral, and the implementation SHOULD provide further information\nabout the specific peripheral instance in the TEE_PERIPHERAL_STATE_NAME field described in section 9.3.1.\nThe id parameter for a given peripheral SHOULD NOT change between Trusted OS version updates on a\ndevice. The id parameter is not necessarily consistent between different examples of the same device.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 311,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.6 Data Structures",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "312 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.6.2 TEE_PeripheralDescriptor\nTEE_PeripheralDescriptor is a structure collecting the information required to access a peripheral.\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\ntypedef struct\n{\nuint32_t version;\nunion {\nTEE_PeripheralDescriptor_V1 v1;\n} u;\n} TEE_PeripheralDescriptor\ntypedef struct\n{\nTEE_PeripheralId id;\nTEE_PeripheralHandle peripheralHandle;\nTEE_EventSourceHandle eventSourceHandle;\n} TEE_PeripheralDescriptor_V1;\n#endif\nThe structure fields have the following meanings:\n• The version field identifies the version of the TEE_PeripheralDescriptor structure. In this\nversion of the specification it SHALL be set to 1.\n• The id field contains a unique identifier for the peripheral with which this\nTEE_PeripheralDescriptor instance is associated.\n• The peripheralHandle field contains a TEE_PeripheralHandle which, if valid, enables an\nowning TA to perform API calls which might alter peripheral state.\n• The eventSourceHandle field contains a TEE_EventSourceHandle which can be used to attach\nevents generated by the peripheral to an event queue.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 312,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.6.2 TEE_PeripheralDescriptor",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 313 / 375\n9.6.3 TEE_PeripheralHandle\nA TEE_PeripheralHandle is an opaque handle used to manage direct access to a peripheral.\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\ntypedef struct __TEE_PeripheralHandle* TEE_PeripheralHandle;\ntypedef struct <ImplNamespace>_TEE_PeripheralHandle* TEE_PeripheralHandle;\n#endif\nTA implementations SHOULD NOT assume that the same TEE_PeripheralHandle will be returned for\ndifferent sessions.\nThe value TEE_INVALID_HANDLE is used to indicate an invalid TEE_PeripheralHandle. All other values\nreturned by the Trusted OS denote a valid TEE_PeripheralHandle.\nIn the above definition, <ImplNamespace> can be replaced with a namespace identifier reserved for the\nimplementation, or the implementation may select some other name and definition provided that it is\ncompatible with assignment of TEE_HANDLE_NULL.\nSince: TEE Internal Core API v1.3.1\nPrevious versions of this specification used the definition __TEE_PeripheralHandle* for\nTEE_PeripheralHandle.\nThis was changed as names beginning with double underscore are reserved for the C language\nimplementation in [C99]. The name and type used for opaque handle definitions is not, and never has been,\nnormative.\n9.6.4 TEE_PeripheralId\nA TEE_PeripheralId is a uint32_t, used as a unique identifier for a peripheral on a given TEE.\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\ntypedef uint32_t TEE_PeripheralId;\n#endif\nTEE_PeripheralId SHALL be unique on a given TEE, and SHALL be constant for a given peripheral\nbetween TEE reboots. If a peripheral is removed and reinserted, the same value of TEE_PeripheralId\nSHALL be associated with it.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 313,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.6.3 TEE_PeripheralHandle",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "314 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.6.5 TEE_PeripheralState\nTEE_PeripheralState is a structure containing the current value of an individual peripheral state value on\na given TEE.\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\ntypedef struct\n{\nuint32_t version;\nTEE_PeripheralValueType tag;\nTEE_PeripheralStateId id;\nbool ro;\nunion {\nuint64_t uint64Val;\nuint32_t uint32Val;\nuint16_t uint16Val;\nuint8_t uint8Val;\nbool boolVal;\nconst char* stringVal;\n} u;\n} TEE_PeripheralState;\n#endif\nThe structure fields have the following meanings:\n• The version field identifies the version of the TEE_PeripheralState structure. In this version of\nthe specification it SHALL be set to 1.\n• The tag field is a TEE_PeripheralStateValueType instance indicating which field in the union,\nu, should be accessed to obtain the correct configuration value.\n• The id field is a unique identifier for this node in the peripheral configuration tree. It can be used in\nthe set/get API calls to select a peripheral configuration value directly.\n• The ro field is true if this configuration value cannot be updated by the calling TA. A TA\nSHOULD NOT call TEE_PeripheralSetState with a given TEE_PeripheralStateId if the ro\nfield of the corresponding TEE_PeripheralState is true. An implementation MAY generate an\nerror if this is not respected.\n• The union field, u, contains fields representing the different data types which can be used to store\nperipheral configuration information.\nA Trusted OS MAY indicate different TEE_PeripheralState information to different TAs on the system.\nTherefore a TA SHOULD NOT pass TEE_PeripheralState to another TA as the information it contains\nmay not be valid for the other TA.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 314,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.6.5 TEE_PeripheralState",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 315 / 375\n9.6.6 TEE_PeripheralStateId\nA TEE_PeripheralStateId is an identifier for a peripheral state entry on a given TEE.\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\ntypedef uint32_t TEE_PeripheralStateId;\n#endif\nLegal values in this specification for TEE_PeripheralStateId are listed in section 9.2.6. Further values\nmay be defined in other specifications.\n9.6.7 TEE_PeripheralValueType\nTEE_PeripheralValueType indicates which of several types has been used to store the configuration\ninformation in a TEE_PeripheralState.tag field.\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\ntypedef uint32_t TEE_PeripheralValueType;\n#endif\nTable 9-13: TEE_PeripheralValueType Values 16\nConstant Name Value\nTEE_PERIPHERAL_VALUE_UINT64 0x00000000\nTEE_PERIPHERAL_VALUE_UINT32 0x00000001\nTEE_PERIPHERAL_VALUE_UINT16 0x00000002\nTEE_PERIPHERAL_VALUE_UINT8 0x00000003\nTEE_PERIPHERAL_VALUE_BOOL 0x00000004\nTEE_PERIPHERAL_VALUE_STRING 0x00000005\nReserved 0x00000006 – 0x7FFFFFFE\nTEE_PERIPHERAL_VALUE_ILLEGAL_VALUE 0x7FFFFFFF\nImplementation defined 0x80000000 – 0xFFFFFFFF\nTEE_PERIPHERAL_VALUE_ILLEGAL_VALUE is reserved for testing and validation and SHALL be treated as\nan undefined value when provided to the TEE_Peripheral_SetState function.\n16 See section 3.3.3 for recommendations on constant declaration.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 315,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.6.6 TEE_PeripheralStateId",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "316 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.6.8 TEE_Event\nTEE_Event is a container for events in the event loop.\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\ntypedef struct {\nuint32_t version;\nunion {\nTEE_Event_V1 v1;\n} u;\n} TEE_Event;\ntypedef struct {\nTEE_EVENT_TYPE eventType;\nuint64_t timestamp;\nTEE_EventSourceHandle eventSourceHandle;\nuint8_t payload[TEE_MAX_EVENT_PAYLOAD_SIZE];\n} TEE_Event_V1;\n#endif\nThe TEE_Event structure holds an individual event; the payload holds an array of bytes whose contents are\ninterpreted according to the type of the event:\n• version: The version of the structure – currently always 1.\n• eventType: A value identifying the type of event.\n• timestamp: The time the event occurred given as milliseconds since the TEE was started. The value\nof timestamp is guaranteed to increase monotonically so that the ordering of events in time is\nguaranteed. A Trusted OS SHOULD use the same underlying source of time information as used for\nTEE_GetSystemTime, described in section 7.2.1.\n• eventSourceHandle: The handle of the specific event source that created this event.\n• payload: A block of TEE_MAX_EVENT_PAYLOAD_SIZE bytes. The content of payload, while\ndefined for TEE_PERIPHERAL_OS, is not generally defined in this specification. Payloads specific to\nparticular APIs may be defined in other specifications. Any unused trailing bytes SHALL be zero.\nIn general, if an event cannot be sufficiently described within the constraints of the payload field of\nTEE_MAX_EVENT_PAYLOAD_SIZE, the contents of the field may be data structure containing handles or\npointers to further structures that together fully describe the event.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 316,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.6.8 TEE_Event",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 317 / 375\n9.6.9 Generic Payloads\nThis section describes a generic payload field of the TEE_Event structure. Each TEE_Event structure\nthat the implementation can return has a version field and a union of the different versions, thereby permitting\na TA to specify the version of the returned structure in the invoking command. When a command requests a\nparticular version, the TEE can return any of the following:\n• A structure of the requested version\n• A structure of an earlier version\n• An error indicating that it cannot support the request\nThe following table from [TEE TUI Low] v1.0.1 is duplicated here for convenience.\nTable 9-14: Value of version in payload Structures\nStructure Value of version in payload Structure\nTEE_Event 1\nTEE_Event_TUI_Button 1\nTEE_Event_TUI_Keyboard 1\nTEE_Event_TUI_REE 1\nTEE_Event_TUI_TEE 1\nTEE_Event_TUI_Touch 1\nTEE_Peripheral 1\nTEE_PeripheralDescriptor 1\nTEE_TUIDisplayInfo 1\nTEE_TUISurfaceBuffer 1\nTEE_TUISurfaceInfo 1\nThe rules associated with TEE_Event structure versioning are defined in [TEE TUI Low] section 3.11.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 317,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.6.9 Generic Payloads",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "318 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.6.9.1 TEE_Event_AccessChange\nThis event is generated if the accessibility of a peripheral to this TA changes.\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\ntypedef struct {\nuint32_t version;\nTEE_PeripheralId id;\nuint32_t flags;\n} TEE_Event_AccessChange;\n#endif\nThe structure fields have the following meanings:\n• version: The version of the structure – currently always 1.\n• id: The TEE_PeripheralId for the peripheral for which the access change event was generated.\nThis uniquely identifies the peripheral for which the access status has changed.\n• flags: The new state of TEE_PERIPHERAL_STATE_FLAGS. For details of the legal values for this\nfield, see the description of the u.uint32Val field in section 9.3.4.\nThis event SHALL be sent to all TAs which have registered to the TEE_PERIPHERAL_OS event queue when\nan access permission change occurs – including the TA which initiated the change.\nA consequence of TEE_Event_AccessChange is that some of the peripheral state table information may\nchange. As such, each TA instance SHOULD call TEE_Peripheral_GetStateTable to obtain fresh\ninformation when it receives this event.\n9.6.9.2 TEE_Event_ClientCancel\nWhen a TEE_Event_V1 with eventType of TEE_EVENT_TYPE_CORE_CLIENT_CANCEL is received, the\nTEE_Event_V1 payload has type TEE_Event_ClientCancel.\nSince: TEE Internal Core API v1.2\n#if defined(TEE_CORE_API_EVENT)\ntypedef struct {\nuint32_t version;\n} TEE_Event_ClientCancel;\n#endif\nThe structure fields have the following meanings:\n• version: The version of the structure – currently always 1.\nThis event SHALL be sent only to the TA session for which cancellation was requested on the appropriate\nTEE_PERIPHERAL_SESSION event queue when cancellation was requested.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 318,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.6.9.1 TEE_Event_AccessChange",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 319 / 375\n9.6.9.3 TEE_Event_Timer\nWhen a TEE_Event_V1 with eventType of TEE_EVENT_TYPE_CORE_CLIENT_TIMER is received in a\ngiven TA session context, the TEE_Event_V1 payload has type TEE_Event_Timer.\nSince: TEE Internal Core API v1.2\n#if defined(TEE_CORE_API_EVENT)\ntypedef struct {\nuint8_t payload[TEE_MAX_EVENT_PAYLOAD_SIZE];\n} TEE_Event_Timer;\n#endif\nThe structure fields have the following meanings:\n• payload: A byte array containing a payload whose contents are defined by the TA when the timer is\ncreated.\nThis event SHALL be sent only to the TA session for which timer event was requested on the appropriate\nTEE_PERIPHERAL_SESSION event queue when cancellation was requested.\n9.6.10 TEE_EventQueueHandle\nA TEE_EventQueueHandle is an opaque handle for an event queue.\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\ntypedef struct __TEE_EventQueueHandle* TEE_EventQueueHandle;\ntypedef struct <ImplNamespace>_TEE_EventQueueHandle* TEE_EventQueueHandle;\n#endif\nA Trusted OS SHOULD ensure that the value of TEE_EventQueueHandle returned to a TA is not predictable\nand SHALL ensure that it does contain all or part of a machine address.\nThe value TEE_INVALID_HANDLE is used to indicate an invalid TEE_EventQueueHandle. All other values\nreturned by the Trusted OS denote a valid TEE_EventQueueHandle.\nIn the above definition, <ImplNamespace> can be replaced with a namespace identifier reserved for the\nimplementation, or the implementation may select some other name and definition provided that it is\ncompatible with assignment of TEE_HANDLE_NULL.\nSince: TEE Internal Core API v1.3.1\nPrevious versions of this specification used the definition __TEE_EventQueueHandle* for\nTEE_EventQueueHandle.\nThis was changed as names beginning with double underscore are reserved for the C language\nimplementation in [C99]. The name and type used for opaque handle definitions is not, and never has been,\nnormative.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 319,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.6.9.3 TEE_Event_Timer",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "320 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.6.11 TEE_EventSourceHandle\nA TEE_EventSourceHandle is an opaque handle for a specific source of events, for example a biometric\nsensor.\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\ntypedef struct __TEE_EventSourceHandle* TEE_EventSourceHandle;\ntypedef struct <ImplNamespace>_TEE_EventSourceHandle* TEE_EventSourceHandle;\n#endif\nThe value TEE_INVALID_HANDLE is used to indicate an invalid TEE_EventSourceHandle. All other values\nreturned by the Trusted OS denote a valid TEE_EventSourceHandle.\nIn the above definition, <ImplNamespace> can be replaced with a namespace identifier reserved for the\nimplementation, or the implementation may select some other name and definition provided that it is\ncompatible with assignment of TEE_HANDLE_NULL.\nSince: TEE Internal Core API v1.3.1\nPrevious versions of this specification used the definition __TEE_EventSourceHandle* for\nTEE_EventSourceHandle.\nThis was changed as names beginning with double underscore are reserved for the C language\nimplementation in [C99]. The name and type used for opaque handle definitions is not, and never has been,\nnormative.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 320,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.6.11 TEE_EventSourceHandle",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 321 / 375\n9.7 Peripheral API Functions\n9.7.1 TEE_Peripheral_Close\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Peripheral_Close(\nTEE_PeripheralDescriptor *peripheralDescriptor\n);\n#endif\nDescription\nThe TEE_Peripheral_Close function is used by a TA to release a single peripheral. On successful return,\nthe peripheralHandle and eventSourceHandle values pointed to by peripheralDescriptor SHALL\nbe TEE_INVALID_HANDLE.\nSpecification Number: 10 Function Number: 0x2001\nParameters\n• peripheralDescriptor: A pointer to a TEE_PeripheralDescriptor structure.\nReturn Code\n• TEE_SUCCESS: In case of success. At least one of peripheralHandle and eventSourceHandle\npoints to a valid handle.\n• TEE_ERROR_BAD_STATE: The calling TA does not have a valid open handle to the peripheral.\n• TEE_ERROR_BAD_PARAMETERS: peripheralDescriptor is NULL.\nPanic Reasons\nTEE_Peripheral_Close SHALL NOT panic.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 321,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.7 Peripheral API Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Peripheral_Close",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "322 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.7.2 TEE_Peripheral_CloseMultiple\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Peripheral_CloseMultiple(\nconst uint32_t numPeripherals,\n[inout] TEE_PeripheralDescriptor *peripheralDescriptors\n);\n#endif\nDescription\nTEE_Peripheral_CloseMultiple is a convenience function which closes all the peripherals identified in\nthe buffer pointed to by peripheralDescriptors. In contrast to TEE_Peripheral_OpenMultiple, there\nis no guarantee of atomicity; the function simply attempts to close all the requested peripherals.\nSpecification Number: 10 Function Number: 0x2002\nParameters\n• numPeripherals: The number of entries in the TEE_PeripheralDescriptor buffer pointed to by\nperipheralDescriptors.\n• peripheralDescriptors: A pointer to a buffer of numPeripherals instances of\nTEE_PeripheralDescriptor. The interpretation and treatment of each individual entry in the buffer\nof descriptors is as described for TEE_Peripheral_Close in section 9.7.1.\nReturn Code\n• TEE_SUCCESS: In case of success, which is defined as all the requested\nTEE_PeripheralDescriptor instances having been successfully closed.\n• TEE_ERROR_BAD_STATE: The calling TA does not have a valid open handle to at least one of the\nperipherals.\n• TEE_ERROR_BAD_PARAMETERS: peripheralDescriptors is NULL and/or numPeripherals\nis 0.\nPanic Reasons\nTEE_Peripheral_CloseMultiple SHALL NOT panic.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 322,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.7.2 TEE_Peripheral_CloseMultiple",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Peripheral_CloseMultiple",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 323 / 375\n9.7.3 TEE_Peripheral_GetPeripherals\nSince: TEE Internal Core API v1.3 – See Backward Compatibility statement below.\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Peripheral_GetPeripherals(\n[inout] uint32_t* version,\n[outbuf] TEE_Peripheral* peripherals, size_t* size\n);\n#endif\nDescription\nThe TEE_Peripheral_GetPeripherals function returns information about the peripherals known to the\nTEE. This function MAY list all peripherals attached to the implementation and SHALL list all peripherals visible\nto the calling TA. The TEE may not be able to control all the peripherals. Of those that the TEE can control, it\nmay not be able to parse the events generated, so not all can be used as event sources.\nSpecification Number: 10 Function Number: 0x2003\nParameters\n• version:\nOn entry, the highest version of the TEE_Peripheral structure understood by the calling\no\nprogram.\nOn return, the actual version returned, which may be lower than the value requested.\no\n• peripherals: A pointer to an array of TEE_Peripheral structures. This will be populated with\ninformation about the available sources on return. Each structure in the array returns information\nabout one peripheral.\n• size:\nOn entry, the size of peripherals in bytes.\no\nOn return, the actual size of the buffer containing the TEE_Peripheral structures in bytes. The\no\ncombination of peripherals and size complies with the [outbuf] behavior specified in\nsection 3.4.4.\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_UNSUPPORTED_VERSION: If the version of the TEE_Peripheral structure requested is\nnot supported.\n• TEE_ERROR_OUT_OF_MEMORY: If the system ran out of resources.\n• TEE_ERROR_SHORT_BUFFER: If the output buffer is not large enough to hold all the sources.\n• TEE_ERROR_EXTERNAL_CANCEL: If the operation has been cancelled by an external event which\noccurred in the REE while the function was in progress.\nPanic Reasons\n• If version is NULL.\n• If peripherals is NULL and/or *size is not zero.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 323,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.7.3 TEE_Peripheral_GetPeripherals",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Peripheral_GetPeripherals",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "324 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n• See section 3.4.4 for reasons for [outbuf] generated panic.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nBackward Compatibility\nPrior to TEE Internal Core API v1.3, TEE_ERROR_OLD_VERSION was returned if the version of the\nTEE_Peripheral structure requested is not supported. This return code has been renamed\nTEE_ERROR_UNSUPPORTED_VERSION; however, the value remains unchanged.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 324,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 324",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 325 / 375\n9.7.4 TEE_Peripheral_GetState\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Peripheral_GetState(\nconst TEE_PeripheralId id,\nconst TEE_PeripheralStateId stateId,\n[out] TEE_PeripheralValueType* periphType,\n[out] void* value\n);\n#endif\nDescription\nThe TEE_Peripheral_GetState function enables a TA which knows the state ID of a peripheral state item\nto fetch the value of this directly. A TA does not need to have an open handle to a peripheral to obtain\ninformation about its state – this allows a TA to discover information about peripherals available to it before\nopening a handle.\nSpecification Number: 10 Function Number: 0x2004\nParameters\n• id: The unique peripheral identifier for the peripheral in which we are interested.\n• stateID: The identifier for the state item for which the value is requested.\n• periphType: On return, contains a value of TEE_PeripheralValueType which determines how\nthe data pointed to by value should be interpreted.\n• value: On return, points to the value of the requested state item.\nThe caller SHALL ensure that the buffer pointed to by value is large enough to accommodate whichever is\nthe larger of uint64_t and char* on a given TEE platform.\nReturn Code\n• TEE_SUCCESS: State information has been fetched.\n• TEE_ERROR_BAD_PARAMETERS: The value of one or both of id or stateId are not valid for this\nTA; periphType or value is NULL.\nPanic Reasons\nTEE_Peripheral_GetState SHALL NOT panic.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 325,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.7.4 TEE_Peripheral_GetState",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Peripheral_GetState",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "326 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.7.5 TEE_Peripheral_GetStateTable\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Peripheral_GetStateTable(\n[in] TEE_PeripheralId id,\n[outbuf] TEE_PeripheralState* stateTable, size_t* bufSize\n);\n#endif\nDescription\nThe TEE_Peripheral_GetStateTable function fetches a buffer containing zero or more instances of\nTEE_PeripheralState. These provide a snapshot of the state of a peripheral.\nSpecification Number: 10 Function Number: 0x2005\nParameters\n• id: The TEE_PeripheralId for the peripheral from which the TA wishes to read data\n• stateTable: A buffer of at least bufSize bytes that on successful return is overwritten with an\narray of TEE_PeripheralState structures.\n• bufSize:\nOn entry, the size of stateTable in bytes.\no\nOn return, the actual number of bytes in the array. The combination of stateTable and\no\nbufSize complies with the [outbuf] behavior specified in section 3.4.4.\nReturn Code\n• TEE_SUCCESS: Data has been written to the peripheral.\n• TEE_ERROR_BAD_PARAMETERS: The value of id or stateTable is NULL and/or bufSize is 0.\nPanic Reasons\n• See section 3.4.4 for reasons for [outbuf] generated panic.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 326,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.7.5 TEE_Peripheral_GetStateTable",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Peripheral_GetStateTable",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 327 / 375\n9.7.6 TEE_Peripheral_Open\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Peripheral_Open(\n[inout] TEE_PeripheralDescriptor *peripheralDescriptor\n);\n#endif\nDescription\nThe TEE_Peripheral_Open function is used by a TA to obtain descriptor(s) enabling access to a single\nperipheral. If the TA needs to open more than one peripheral for related activities, it MAY use\nTEE_Peripheral_OpenMultiple.\nIf this function executes successfully and if TEE_PERIPHERAL_STATE_EXCLUSIVE_ACCESS indicates that\nexclusive access is supported, then the Trusted OS guarantees that neither the REE, nor any other TA, has\naccess to the peripheral. If TEE_PERIPHERAL_STATE_EXCLUSIVE_ACCESS indicates that exclusive access\nis not supported, the calling TA SHOULD assume that it does not have exclusive access to the peripheral.\nThe Trusted OS returns handles which can be used by the TA to manage interactions with the peripheral. If\nTEE_Peripheral_Open succeeds, at least one of peripheralHandle and eventSourceHandle is set\nto a valid handle value.\nIt is an error to call TEE_Peripheral_Open for a peripheral which is already owned by the calling TA\ninstance.\nSpecification Number: 10 Function Number: 0x2006\nParameters\n• peripheralDescriptor: A pointer to a TEE_PeripheralDescriptor structure. The fields of the\nstructure pointed to are used as follows:\nid: This is the unique identifier for a specific peripheral, as returned by\no\nTEE_Peripheral_GetPeripherals. This field SHALL be set on entry, and SHALL be\nunchanged on return.\nperipheralHandle: On entry, the value is ignored and will be overwritten. On return, the value is\no\nset as follows:\n TEE_INVALID_HANDLE: This peripheral does not support the Peripheral API.\n Other value: An opaque handle which can be used with the Peripheral API functions.\neventSourceHandle: On entry, the value is ignored and will be overwritten. On return, the value\no\nis set as follows:\n TEE_INVALID_HANDLE: This peripheral does not support the Event API.\n Other value: An opaque handle which can be used with the Event API functions.\nReturn Code\n• TEE_SUCCESS: In case of success. At least one of peripheralHandle and eventSourceHandle\npoints to a valid handle.\n• TEE_ERROR_BAD_PARAMETERS: peripheralDescriptor is NULL.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 327,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.7.6 TEE_Peripheral_Open",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Peripheral_Open",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "328 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n• TEE_ERROR_ACCESS_DENIED: If the system was unable to acquire exclusive access to a peripheral\nfor which TEE_PERIPHERAL_STATE_EXCLUSIVE_ACCESS indicates exclusive access is possible.\nPanic Reasons\n• If peripheralDescriptor->id is not known to the system.\n• If peripheralDescriptor->id is already owned by the calling TA instance.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 328,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 328",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 329 / 375\n9.7.7 TEE_Peripheral_OpenMultiple\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Peripheral_OpenMultiple(\nconst uint32_t numPeripherals,\n[inout] TEE_PeripheralDescriptor *peripheralDescriptors\n);\n#endif\nDescription\nThe TEE_Peripheral_OpenMultiple function is used by a TA to atomically obtain access to multiple\nperipherals.\nTEE_Peripheral_OpenMultiple behaves as though a call to TEE_Peripheral_Open is made to each\nTEE_PeripheralDescriptor in peripheralDescriptors in turn, but ensures that all or none of the\nperipherals have open descriptors on return. This function should be used where a TA needs simultaneous\ncontrol of multiple peripherals to operate correctly.\nIf this function executes successfully, the Trusted OS guarantees that neither the REE, nor any other TA, has\naccess to any requested peripheral for which exclusive access is supported (as indicated by\nTEE_PERIPHERAL_STATE_EXCLUSIVE_ACCESS). If an error is returned, the Trusted OS guarantees that no\nhandle is open for any of the requested peripherals.\nThe Trusted OS returns handles which can be used by the TA to manage interactions with the peripheral. If\nTEE_Peripheral_OpenMultiple succeeds, at least one of peripheralHandle and\neventSourceHandle fields in each descriptor is set to a valid handle value. If an error is returned, all the\nperipheralHandle and eventSourceHandle fields in each descriptor SHALL contain\nTEE_INVALID_HANDLE.\nSpecification Number: 10 Function Number: 0x2007\nParameters\n• numPeripherals: The number of entries in the TEE_PeripheralDescriptor buffer pointed to by\nperipheralDescriptors.\n• peripheralDescriptors: A pointer to a buffer of numPeripherals instances of\nTEE_PeripheralDescriptor. The interpretation and treatment of each individual entry in the buffer\nof descriptors is as described for TEE_Peripheral_Open in section 9.7.6.\nReturn Code\n• TEE_SUCCESS: In case of success. At least one of peripheralHandle and eventSourceHandle\npoints to a valid handle in every entry in peripheralDescriptors.\n• TEE_ERROR_BAD_PARAMETERS: peripheralDescriptors is NULL and/or numPeripherals\nis 0.\n• TEE_ERROR_ACCESS_DENIED: If the system was unable to acquire exclusive access to all the\nrequested peripherals.\nPanic Reasons\n• If peripheralDescriptors[x].id for any instance, x, of TEE_PeripheralDescriptor is not\nknown to the system.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 329,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.7.7 TEE_Peripheral_OpenMultiple",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Peripheral_OpenMultiple",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "330 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n• If peripheralDescriptors[x].id for any instance, x, of TEE_PeripheralDescriptor is\nalready owned by the calling TA.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 330,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 330",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 331 / 375\n9.7.8 TEE_Peripheral_Read\nSince: TEE Internal Core API v1.2 – See Backward Compatibility note below.\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Peripheral_Read(\n[in] TEE_PeripheralHandle peripheralHandle,\n[outbuf] void *buf, size_t *bufSize\n);\n#endif\nDescription\nThe TEE_Peripheral_Read function provides a low-level API to read data from the peripheral denoted by\nperipheralHandle. The peripheralHandle field of the peripheral descriptor must be a valid handle for\nthis function to succeed.\nThe calling TA allocates a buffer of bufSize bytes before calling. On return, this will contain as much data\nas is available from the peripheral, up to the limit of bufSize. The bufSize parameter will be updated with\nthe actual number of bytes placed into buf.\nTEE_Peripheral_Read is designed to allow a TA to implement polled communication with peripherals. The\nfunction SHALL NOT wait on any hardware signal and SHALL retrieve only the data which is available at the\ntime of calling.\nWhile some peripherals may support both the event queue and the polling interface, it is recommended that\nTA implementers do not attempt to use both polling and the event queue to read data from the same peripheral.\nPeripheral behavior if both APIs are used on the same peripheral is undefined.\nNote: Depending on the use case, polled interfaces can result in undesirable power consumption profiles.\nSpecification Number: 10 Function Number: 0x2008\nParameters\n• peripheralHandle: A valid TEE_PeripheralHandle for the peripheral from which the TA wishes\nto read data.\n• buf: A buffer of at least bufSize bytes which, on successful return, will be overwritten with data\nread back from the peripheral.\n• bufSize:\nOn entry, the size of buf in bytes.\no\nOn return, the actual number of bytes read from the peripheral. The combination of buf and\no\nbufSize complies with the [outbuf] behavior specified in section 3.4.4.\nReturn Code\n• TEE_SUCCESS: Data has been read from the peripheral. The value of bufSize indicates the number\nof bytes read.\n• TEE_ERROR_SHORT_BUFFER: If the output buffer is not large enough to hold all the sources.\n• TEE_ERROR_EXCESS_DATA: Data was read successfully, but the peripheral has more data available\nto read. In this case, bufSize is the same value as was indicated when the function was called. It is\nrecommended that the TA read back the remaining data from the peripheral before continuing.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 331,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.7.8 TEE_Peripheral_Read",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Peripheral_Read",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "332 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n• TEE_ERROR_BAD_PARAMETERS: The value of peripheralHandle is TEE_INVALID_HANDLE; or\nbuf is NULL and bufSize is not zero.\nPanic Reasons\n• If the calling TA does not provide a valid peripheralHandle.\n• See section 3.4.4 for reasons for [outbuf] generated panic.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nBackward Compatibility\n[TEE TUI Low] v1.0 did not include the TEE_ERROR_SHORT_BUFFER return value.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 332,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 332",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 333 / 375\n9.7.9 TEE_Peripheral_SetState\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Peripheral_SetState(\nconst TEE_PeripheralHandle handle,\nconst TEE_PeripheralStateId stateId,\nconst TEE_PeripheralValueType periphType,\nconst void* value\n);\n#endif\nDescription\nThe TEE_Peripheral_SetState function enables a TA to set the value of a writeable peripheral state item.\nItems are only writeable if the ro field of the TEE_PeripheralState for the state item is false. The value\nof the ro field can change between a call to TEE_Peripheral_GetState and a subsequent call to\nTEE_Peripheral_SetState.\nTAs SHOULD call TEE_Peripheral_GetStateTable for the peripheral id in question to determine which\nstate items are writeable by the TA.\nNote that any previous snapshot of peripheral state will not be updated after a call to\nTEE_Peripheral_SetState.\nSpecification Number: 10 Function Number: 0x2009\nParameters\n• handle: A valid open handle for the peripheral whose state is to be updated.\n• stateId: The identifier for the state item for which the value is requested.\n• periphType: A value of TEE_PeripheralValueType which determines how the data pointed to by\nvalue should be interpreted.\n• value: The address of the value to be written to the state item.\nReturn Code\n• TEE_SUCCESS: State information has been updated.\n• TEE_ERROR_BAD_PARAMETERS: The value of one or both of handle or stateId are not valid for\nthis TA; or periphType is not a value defined in TEE_PeripheralValueType; or value is NULL;\nor the value which is being written is read-only.\nPanic Reasons\nTEE_Peripheral_SetState SHALL NOT panic.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 333,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.7.9 TEE_Peripheral_SetState",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Peripheral_SetState",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "334 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.7.10 TEE_Peripheral_Write\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Peripheral_Write(\n[in] TEE_PeripheralHandle peripheralHandle,\n[inbuf] void *buf, size_t bufSize\n);\n#endif\nDescription\nThe TEE_Peripheral_Write function provides a low-level API to write data to the peripheral denoted by\nperipheralHandle. The peripheralHandle field of the peripheral descriptor must be a valid handle for\nthis function to succeed.\nThe calling TA allocates a buffer of bufSize bytes before calling and fills it with the data to be written.\nSpecification Number: 10 Function Number: 0x200A\nParameters\n• peripheralHandle: A valid TEE_PeripheralHandle for the peripheral from which the TA wishes\nto read data.\n• buf: A buffer of at least bufSize bytes containing data which has, on successful return, been\nwritten to the peripheral.\n• bufSize: The size of buf in bytes.\nReturn Code\n• TEE_SUCCESS: Data has been written to the peripheral.\n• TEE_ERROR_BAD_PARAMETERS: buf is NULL and/or bufSize is 0.\nPanic Reasons\n• If peripheralHandle is not a valid open handle to a peripheral.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 334,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.7.10 TEE_Peripheral_Write",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Peripheral_Write",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 335 / 375\n9.8 Event API Functions\n9.8.1 TEE_Event_AddSources\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Event_AddSources(\nuint32_t numSources,\n[in] TEE_EventSourceHandle *sources,\n[in] TEE_EventQueueHandle *handle\n);\n#endif\nDescription\nThe TEE_Event_AddSources function atomically adds new event sources to an existing queue acquired by\na call to TEE_Event_OpenQueue. If the function succeeds, events from this source are exclusively available\nto this queue.\nIf the function fails, the queue is still valid. The queue SHALL contain events from the original sources and\nMAY contain some of the requested sources. In case of error, the caller should use\nTEE_Event_ListSources to determine the current state of the queue.\nIt is not an error to add an event source to a queue to which it is already attached.\nSpecification Number: 10 Function Number: 0x2101\nParameters\n• numSources: Defines how many sources are provided.\n• sources: An array of TEE_EventSourceHandle that the TA wants to add to the queue.\n• handle: The handle for the queue.\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_BAD_STATE: If the handle does not represent a currently open queue.\n• TEE_ERROR_BUSY: If any requested resource cannot be reserved.\n• TEE_ERROR_EXTERNAL_CANCEL: If the operation has been cancelled by an external event which\noccurred in the REE while the function was in progress.\n• TEE_ERROR_OUT_OF_MEMORY: If the system ran out of resources.\nPanic Reasons\n• If handle is invalid.\n• If the sources array does not contain numSources elements.\n• If any pointer in sources is NULL.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 335,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.8 Event API Functions",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Event_AddSources",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "336 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.8.2 TEE_Event_CancelSources\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Event_CancelSources(\nuint32_t numSources,\n[in] TEE_EventSourceHandle *sources,\n[in] TEE_EventQueueHandle *handle\n);\n#endif\nDescription\nThe TEE_Event_CancelSources function drops all existing events from a set of sources from a queue\npreviously acquired by a call to TEE_Event_OpenQueue.\nNew events from these sources will continue to be added to the queue, unless the TA has released the sources\nusing TEE_Event_DropSources or TEE_Event_CloseQueue.\nIt is not an error to cancel an event source that is not currently attached to the queue.\nSpecification Number: 10 Function Number: 0x2102\nParameters\n• numSources: Defines how many sources are provided.\n• sources: An array of TEE_EventSourceHandle. Events from these sources are cleared from the\nqueue.\n• handle: The handle for the queue.\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_OUT_OF_MEMORY: If the system ran out of resources.\n• TEE_ERROR_BAD_STATE: If the handle does not represent a currently open queue.\n• TEE_ERROR_EXTERNAL_CANCEL: If the operation has been cancelled by an external event which\noccurred in the REE while the function was in progress.\nPanic Reasons\n• If handle is invalid.\n• If the sources array does not contain numSources elements.\n• If any pointer in sources is NULL.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 336,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.8.2 TEE_Event_CancelSources",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Event_CancelSources",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 337 / 375\n9.8.3 TEE_Event_CloseQueue\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Event_CloseQueue( [in] TEE_EventQueueHandle *handle );\n#endif\nDescription\nThe TEE_Event_CloseQueue function releases resources previously acquired by a call to\nTEE_Event_OpenQueue.\nAll outstanding events on the queue will be invalidated.\nSpecification Number: 10 Function Number: 0x2103\nParameters\n• handle: The handle to the TEE_EventQueueHandle to close.\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_BAD_STATE: If the handle does not represent a currently open queue.\n• TEE_ERROR_EXTERNAL_CANCEL: If the operation has been cancelled by an external event which\noccurred in the REE while the function was in progress.\nPanic Reasons\n• If handle is invalid.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 337,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.8.3 TEE_Event_CloseQueue",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Event_CloseQueue",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "338 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.8.4 TEE_Event_DropSources\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Event_DropSources(\nuint32_t numSources,\n[in] TEE_EventSourceHandle *sources,\n[in] TEE_EventQueueHandle *handle\n);\n#endif\nDescription\nThe TEE_Event_DropSources function removes one or more event sources from an existing queue\npreviously acquired by a call to TEE_Event_OpenQueue. No more events from these sources are added to\nthe queue. Events from these sources will be available to the REE, until they are reserved by this or another\nTA using TEE_Event_AddSources or TEE_Event_OpenQueue.\nEvents from other event sources will continue to be added to the queue. It is permissible to have a queue with\nno current event sources attached to it.\nIt is not an error to drop an event source that is not currently attached to the queue.\nSpecification Number: 10 Function Number: 0x2104\nParameters\n• numSources: Defines how many sources are provided.\n• sources: An array of TEE_EventSourceHandle. Events from these sources are cleared from the\nqueue.\n• handle: The handle for the queue.\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_BAD_STATE: If the handle does not represent a currently open queue.\n• TEE_ERROR_ITEM_NOT_FOUND: If one or more sources was not attached to the queue. All other\nsources are dropped.\n• TEE_ERROR_EXTERNAL_CANCEL: If the operation has been cancelled by an external event which\noccurred in the REE while the function was in progress.\nPanic Reasons\n• If handle is invalid.\n• If the sources array does not contain numSources elements.\n• If any pointer in sources is NULL.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 338,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.8.4 TEE_Event_DropSources",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Event_DropSources",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 339 / 375\n9.8.5 TEE_Event_ListSources\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Event_ListSources(\n[in] TEE_EventQueueHandle *handle,\n[outbuf] TEE_EventSourceHandle *sources, size_t* bufSize\n);\n#endif\nDescription\nThe TEE_Event_ListSources function returns information about sources currently attached to a queue.\nSpecification Number: 10 Function Number: 0x2105\nParameters\n• handle: The handle for the queue.\n• sources: A buffer of at least bufSize bytes that on successful return is overwritten with an array of\nTEE_EventSourceHandle structures.\n• bufSize:\nOn entry, the size of sources in bytes.\no\nOn return, the actual number of bytes in the array. The combination of sources and bufSize\no\ncomplies with the [outbuf] behavior specified in section 3.4.4.\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_OUT_OF_MEMORY: If the system ran out of resources.\n• TEE_ERROR_SHORT_BUFFER: If the output buffer is not large enough to hold all the sources.\n• TEE_ERROR_EXTERNAL_CANCEL: If the operation has been cancelled by an external event which\noccurred in the REE while the function was in progress.\nPanic Reasons\n• If handle is invalid.\n• If bufSize is NULL.\n• If sources is NULL.\n• See section 3.4.4 for reasons for [outbuf] generated panic.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 339,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.8.5 TEE_Event_ListSources",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Event_ListSources",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "340 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.8.6 TEE_Event_OpenQueue\nSince: TEE Internal Core API v1.3 – See Backward Compatibility statement below.\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Event_OpenQueue(\n[inout] uint32_t *version,\nuint32_t numSources,\nuint32_t timeout,\n[in] TEE_EventSourceHandle *sources,\n[out] TEE_EventQueueHandle *handle\n);\n#endif\nDescription\nThe TEE_Event_OpenQueue function claims an exclusive access to resources for the current TA instance.\nThis function allows for multiple event sources to be reserved.\nIt is possible for multiple TAs to open queues at the same time provided they do not try to reserve any of the\nsame resources.\nAn individual TA SHALL NOT open multiple queues; instead, the TA SHOULD use TEE_Event_AddSources\nand TEE_Event_DropSources to add and remove event sources from the queue.\nThe TEE_EventQueue will be closed automatically if no calls to TEE_Event_Wait are made for timeout\nmilliseconds. This has the same guarantees as the TEE_Wait function.\nSpecification Number: 10 Function Number: 0x2106\nParameters\n• version:\nOn entry, the highest version of the TEE_Event structure understood by the calling program.\no\nOn return, the actual version of the TEE_Event structure that will be added to the queue, which\no\nmay be lower than the value requested.\n• numSources: Defines how many sources are provided.\n• timeout: The timeout for this function in milliseconds.\n• sources: An array of TEE_EventSourceHandle, as returned from TEE_Event_ListSources.\n• handle: The handle for this queue. This value SHOULD be zero on entry. It is set if this function\nsuccessfully claims an exclusive access to the resources for the current TA instance and\nnumSources is not zero.\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_BUSY: If any requested resource cannot be reserved.\n• TEE_ERROR_EXTERNAL_CANCEL: If the operation has been cancelled by an external event which\noccurred in the REE while the function was in progress.\n• TEE_ERROR_UNSUPPORTED_VERSION: If the version of the TEE_Event structure requested is not\nsupported.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 340,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.8.6 TEE_Event_OpenQueue",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Event_OpenQueue",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 341 / 375\n• TEE_ERROR_OUT_OF_MEMORY: If the system ran out of resources.\nPanic Reasons\n• If version is invalid.\n• If handle is NULL.\n• If the sources array does not contain numSources elements.\n• If any pointer in sources is NULL.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nBackward Compatibility\nPrior to TEE Internal Core API v1.3, TEE_ERROR_OLD_VERSION was returned if the version of the\nTEE_Event structure requested is not supported. This return code has been renamed\nTEE_ERROR_UNSUPPORTED_VERSION; however, the value remains unchanged.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 341,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 341",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "342 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n9.8.7 TEE_Event_TimerCreate\nSince: TEE Internal Core API v1.2\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Event_TimerCreate(\n[in] TEE_EventQueueHandle *handle,\n[in] uint64_t period,\n[in] uint8_t payload[TEE_MAX_EVENT_PAYLOAD_SIZE]\n);\n#endif\nDescription\nThe TEE_Event_TimerCreate function creates a one-shot timer which, on expiry, will cause\nTEE_Event_Timer to be placed onto the event queue designated by handle.\nAlthough the accuracy of period cannot be guaranteed, events are timestamped if the TA requires an\naccurate measure of the time between events.\nSpecification Number: 10 Function Number: 0x2108\nParameters\n• handle: The handle for the queue.\n• period: The minimum timer period in milliseconds. The accuracy of the timer period is subject to the\nconstraints of TEE_Wait (see section 7.2.2).\n• payload: A payload chosen by the TA which is returned in the TEE_Event_Timer payload when\nthe timer expires.\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_BUSY: If any requested resource cannot be reserved.\n• TEE_ERROR_OUT_OF_MEMORY: If the system ran out of resources.\nPanic Reasons\n• If handle is invalid.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 342,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.8.7 TEE_Event_TimerCreate",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Event_TimerCreate,TEE_Wait",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 343 / 375\n9.8.8 TEE_Event_Wait\nSince: TEE Internal Core API v1.2 (originally defined identically in [TEE TUI Low] v1.0)\n#if defined(TEE_CORE_API_EVENT)\nTEE_Result TEE_Event_Wait(\n[in] TEE_EventQueue *handle,\nuint32_t timeout,\n[inout] TEE_Event *events,\n[inout] uint32_t *numEvents,\n[out] uint32_t *dropped\n);\n#endif\nDescription\nThe TEE_Event_Wait function fetches events that have been returned from a peripheral reserved by\nTEE_Event_OpenQueue. Events are not guaranteed to be delivered as the event queue has a finite size. If\nthe event queue is full, the oldest event(s) SHALL be dropped first, and the dropped event count SHALL be\nupdated with the number of dropped events. Events MAY also be dropped out of order for reasons outside the\nscope of this specification, but the dropped event count SHOULD reflect this.\nThe API allows one or more events to be obtained at a time to minimize any context switching overhead, and\nto allow a TA to process bursts of events en masse.\nObtaining events has a timeout, allowing a TA with more responsibilities than just user interaction to attend to\nthese periodically without needing to use multi-threading.\nThe TEE_Event_Wait function opens the input event stream. If the stream is not available for exclusive\naccess within the specified timeout, an error is returned. A zero timeout means this function returns\nimmediately. This has the same guarantees as the TEE_Wait function.\nEvents are returned in order of decreasing age: events[0] is the oldest available event, events[1] the\nnext oldest, etc.\nOn entry, *numEvents contains the number of events pointed to by events.\n*numEvents can be 0 on entry, which allows the TA to query whether input is available. If timeout == 0,\nthe function should return TEE_SUCCESS if there are pending events and TEE_ERROR_TIMEOUT if there is\nno pending event.\nOn return, *numEvents contains the actual number of events written to events.\nIf the function returns with any status other than TEE_SUCCESS, *numEvents = 0.\nIf there are no events available in the given timeout, *numEvents is set to zero and this function returns an\nerror.\nIf any events occur, the function returns as soon as possible, and does not wait until *numEvents events\nhave occurred.\nIf dropped is non-NULL, the current count of dropped events is written to this location.\nThis function is cancellable. If the cancelled flag of the current instance is set and the TA has unmasked the\neffects of cancellation, then this function returns earlier than the requested timeout.\n• If the operation was cancelled by the client, TEE_ERROR_CANCEL is returned. See section 4.10 for\nmore details about cancellations.\n• If the cancellation was not sourced by the client, the TEE SHOULD cancel the function and\nTEE_ERROR_EXTERNAL_CANCEL is returned.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 343,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "9.8.8 TEE_Event_Wait",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Event_Wait",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "344 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nSpecification Number: 10 Function Number: 0x2107\nParameters\n• handle: The handle for the queue\n• timeout: The timeout in milliseconds\n• events: A pointer to an array of TEE_Event structures\n• numEvents:\nOn entry, the maximum number of events to return\no\nOn return, the actual number of events returned\no\n• dropped: A pointer to a count of dropped events\nReturn Code\n• TEE_SUCCESS: In case of success.\n• TEE_ERROR_BAD_STATE: If handle does not represent a currently open queue.\n• TEE_ERROR_TIMEOUT: If there is no event to return within the timeout.\n• TEE_ERROR_EXTERNAL_CANCEL: If the operation has been cancelled by an external event which\noccurred in the REE while the function was in progress.\n• TEE_ERROR_CANCEL: If the operation was cancelled by anything other than an event in the REE.\nPanic Reasons\n• If handle is invalid.\n• If events is NULL.\n• If numEvents is NULL.\n• If dropped is NULL.\n• If the implementation detects any error associated with the execution of this function that is not\nexplicitly associated with a defined return code for this function.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 344,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 344",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 345 / 375\nAnnex A Panicked Function Identification\nIf this specification is used in conjunction with [TEE TA Debug], then the specification number is 10 and the\nvalues listed in the following table SHALL be associated with the function declared.\nTable A-1: Function Identification Values\nFunction Function\nCategory Function Number in Number\nhexadecimal in decimal\nTA Interface TA_CloseSessionEntryPoint 0x101 257\nTA_CreateEntryPoint 0x102 258\nTA_DestroyEntryPoint 0x103 259\nTA_InvokeCommandEntryPoint 0x104 260\nTA_OpenSessionEntryPoint 0x105 261\nProperty Access TEE_AllocatePropertyEnumerator 0x201 513\nTEE_FreePropertyEnumerator 0x202 514\nTEE_GetNextProperty 0x203 515\nTEE_GetPropertyAsBinaryBlock 0x204 516\nTEE_GetPropertyAsBool 0x205 517\nTEE_GetPropertyAsIdentity 0x206 518\nTEE_GetPropertyAsString 0x207 519\nTEE_GetPropertyAsU32 0x208 520\nTEE_GetPropertyAsUUID 0x209 521\nTEE_GetPropertyName 0x20A 522\nTEE_ResetPropertyEnumerator 0x20B 523\nTEE_StartPropertyEnumerator 0x20C 524\nTEE_GetPropertyAsU64 0x20D 525\nPanic Function TEE_Panic 0x301 769\nInternal Client API TEE_CloseTASession 0x401 1025\nTEE_InvokeTACommand 0x402 1026\nTEE_OpenTASession 0x403 1027\nCancellation TEE_GetCancellationFlag 0x501 1281\nTEE_MaskCancellation 0x502 1282\nTEE_UnmaskCancellation 0x503 1283\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 345,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 345",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "346 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nFunction Function\nCategory Function Number in Number\nhexadecimal in decimal\nMemory Management TEE_CheckMemoryAccessRights 0x601 1537\nTEE_Free 0x602 1538\nTEE_GetInstanceData 0x603 1539\nTEE_Malloc 0x604 1540\nTEE_MemCompare 0x605 1541\nTEE_MemFill 0x606 1542\nTEE_MemMove 0x607 1543\nTEE_Realloc 0x608 1544\nTEE_SetInstanceData 0x609 1545\nGeneric Object TEE_CloseObject 0x701 1793\nTEE_GetObjectBufferAttribute 0x702 1794\nTEE_GetObjectInfo (deprecated) 0x703 1795\nTEE_GetObjectValueAttribute 0x704 1796\nTEE_RestrictObjectUsage (deprecated) 0x705 1797\nTEE_GetObjectInfo1 0x706 1798\nTEE_RestrictObjectUsage1 0x707 1799\nTransient Object TEE_AllocateTransientObject 0x801 2049\nTEE_CopyObjectAttributes (deprecated) 0x802 2050\nTEE_FreeTransientObject 0x803 2051\nTEE_GenerateKey 0x804 2052\nTEE_InitRefAttribute 0x805 2053\nTEE_InitValueAttribute 0x806 2054\nTEE_PopulateTransientObject 0x807 2055\nTEE_ResetTransientObject 0x808 2056\nTEE_CopyObjectAttributes1 0x809 2057\nPersistent Object TEE_CloseAndDeletePersistentObject 0x901 2305\n(deprecated)\nTEE_CreatePersistentObject 0x902 2306\nTEE_OpenPersistentObject 0x903 2307\nTEE_RenamePersistentObject 0x904 2308\nTEE_CloseAndDeletePersistentObject1 0x905 2309\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 346,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 346",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CopyObjectAttributes,TEE_GetObjectInfo,TEE_RestrictObjectUsage",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 347 / 375\nFunction Function\nCategory Function Number in Number\nhexadecimal in decimal\nPersistent Object TEE_AllocatePersistentObjectEnumerator 0xA01 2561\nEnumeration\nTEE_FreePersistentObjectEnumerator 0xA02 2562\nTEE_GetNextPersistentObject 0xA03 2563\nTEE_ResetPersistentObjectEnumerator 0xA04 2564\nTEE_StartPersistentObjectEnumerator 0xA05 2565\nData Stream Access TEE_ReadObjectData 0xB01 2817\nTEE_SeekObjectData 0xB02 2818\nTEE_TruncateObjectData 0xB03 2819\nTEE_WriteObjectData 0xB04 2820\nGeneric Operation TEE_AllocateOperation 0xC01 3073\nTEE_CopyOperation 0xC02 3074\nTEE_FreeOperation 0xC03 3075\nTEE_GetOperationInfo 0xC04 3076\nTEE_ResetOperation 0xC05 3077\nTEE_SetOperationKey 0xC06 3078\nTEE_SetOperationKey2 0xC07 3079\nTEE_GetOperationInfoMultiple 0xC08 3080\nTEE_IsAlgorithmSupported 0xC09 3081\nMessage Digest TEE_DigestDoFinal 0xD01 3329\nTEE_DigestUpdate 0xD02 3330\nTEE_DigestExtract 0xD03 3331\nSymmetric Cipher TEE_CipherDoFinal 0xE01 3585\nTEE_CipherInit 0xE02 3586\nTEE_CipherUpdate 0xE03 3587\nMAC TEE_MACCompareFinal 0xF01 3841\nTEE_MACComputeFinal 0xF02 3842\nTEE_MACInit 0xF03 3843\nTEE_MACUpdate 0xF04 3844\nAuthenticated TEE_AEDecryptFinal 0x1001 4097\nEncryption\nTEE_AEEncryptFinal 0x1002 4098\nTEE_AEInit 0x1003 4099\nTEE_AEUpdate 0x1004 4100\nTEE_AEUpdateAAD 0x1005 4101\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 347,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 347",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "348 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nFunction Function\nCategory Function Number in Number\nhexadecimal in decimal\nAsymmetric TEE_AsymmetricDecrypt 0x1101 4353\nTEE_AsymmetricEncrypt 0x1102 4354\nTEE_AsymmetricSignDigest 0x1103 4355\nTEE_AsymmetricVerifyDigest 0x1104 4356\nKey Derivation TEE_DeriveKey 0x1201 4609\nRandom Data TEE_GenerateRandom 0x1301 4865\nGeneration\nTime TEE_GetREETime 0x1401 5121\nTEE_GetSystemTime 0x1402 5122\nTEE_GetTAPersistentTime 0x1403 5123\nTEE_SetTAPersistentTime 0x1404 5124\nTEE_Wait 0x1405 5125\nMemory Allocation TEE_BigIntFMMSizeInU32 0x1501 5377\nand Size of Objects\nTEE_BigIntFMMContextSizeInU32 0x1502 5378\nInitialization TEE_BigIntInit 0x1601 5633\nTEE_BigIntInitFMM 0x1602 5634\nTEE_BigIntInitFMMContext (deprecated) 0x1603 5635\nTEE_BigIntInitFMMContext1 0x1604 5636\nConverter TEE_BigIntConvertFromOctetString 0x1701 5889\nTEE_BigIntConvertFromS32 0x1702 5890\nTEE_BigIntConvertToOctetString 0x1703 5891\nTEE_BigIntConvertToS32 0x1704 5892\nLogical Operation TEE_BigIntCmp 0x1801 6145\nTEE_BigIntCmpS32 0x1802 6146\nTEE_BigIntGetBit 0x1803 6147\nTEE_BigIntGetBitCount 0x1804 6148\nTEE_BigIntShiftRight 0x1805 6149\nTEE_BigIntSetBit 0x1806 6150\nTEE_BigIntAssign 0x1807 6151\nTEE_BigIntAbs 0x1808 6152\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 348,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 348",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntInitFMMContext",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 349 / 375\nFunction Function\nCategory Function Number in Number\nhexadecimal in decimal\nBasic Arithmetic TEE_BigIntAdd 0x1901 6401\nTEE_BigIntDiv 0x1902 6402\nTEE_BigIntMul 0x1903 6403\nTEE_BigIntNeg 0x1904 6404\nTEE_BigIntSquare 0x1905 6405\nTEE_BigIntSub 0x1906 6406\nModular Arithmetic TEE_BigIntAddMod 0x1A01 6657\nTEE_BigIntInvMod 0x1A02 6658\nTEE_BigIntMod 0x1A03 6659\nTEE_BigIntMulMod 0x1A04 6660\nTEE_BigIntSquareMod 0x1A05 6661\nTEE_BigIntSubMod 0x1A06 6662\nTEE_BigIntExpMod 0x1A07 6663\nOther Arithmetic TEE_BigIntComputeExtendedGcd 0x1B01 6913\nTEE_BigIntIsProbablePrime 0x1B02 6914\nTEE_BigIntRelativePrime 0x1B03 6915\nFast Modular TEE_BigIntComputeFMM 0x1C01 7169\nMultiplication\nTEE_BigIntConvertFromFMM 0x1C02 7170\nTEE_BigIntConvertToFMM 0x1C03 7171\nPeripherals TEE_Peripheral_Close 0x2001 8193\nTEE_Peripheral_CloseMultiple 0x2002 8194\nTEE_Peripheral_GetPeripherals 0x2003 8195\nTEE_Peripheral_GetState 0x2004 8196\nTEE_Peripheral_GetStateTable 0x2005 8197\nTEE_Peripheral_Open 0x2006 8198\nTEE_Peripheral_OpenMultiple 0x2007 8199\nTEE_Peripheral_Read 0x2008 8200\nTEE_Peripheral_SetState 0x2009 8201\nTEE_Peripheral_Write 0x200A 8202\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 349,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 349",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "350 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nFunction Function\nCategory Function Number in Number\nhexadecimal in decimal\nEvents TEE_Event_AddSources 0x2101 8449\nTEE_Event_CancelSources 0x2102 8450\nTEE_Event_CloseQueue 0x2103 8451\nTEE_Event_DropSources 0x2104 8452\nTEE_Event_ListSources 0x2105 8453\nTEE_Event_OpenQueue 0x2106 8454\nTEE_Event_Wait 0x2107 8455\nTEE_Event_TimerCreate 0x2108 8456\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 350,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 350",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 351 / 375\nAnnex B Deprecated Functions, Identifiers, etc.\nThis annex includes the following sections:\nB.1 Deprecated Functions .................................................................................................. 351\nB.2 Deprecated Object Identifiers ....................................................................................... 357\nB.3 Deprecated Algorithm Identifiers .................................................................................. 358\nB.4 Deprecated Properties .................................................................................................. 360\nB.5 Deprecated Object or Operation Attributes .................................................................. 361\nB.6 Deprecated API Return Codes ..................................................................................... 362\nB.1 Deprecated Functions\nThe functions in this section are deprecated and have been replaced by new functions as noted in their\ndescriptions. These functions will be removed at some future major revision of this specification.\nBackward Compatibility\nWhile new TA code SHOULD use the new functions, the old functions SHALL be present in an implementation\nuntil removed from the specification.\nB.1.1 TEE_GetObjectInfo – Deprecated\nvoid TEE_GetObjectInfo(\nTEE_ObjectHandle object,\n[out] TEE_ObjectInfo* objectInfo );\nDescription\nSince: TEE Internal API v1.0; deprecated in TEE Internal Core API v1.1\nUse of this function is deprecated – new code SHOULD use the TEE_GetObjectInfo1 function instead.\nThe TEE_GetObjectInfo function returns the characteristics of an object. It fills in the following fields in the\nstructure TEE_ObjectInfo:\n• objectType: The parameter objectType passed when the object was created. If the object is\ncorrupt then this field is set to TEE_TYPE_CORRUPTED_OBJECT and the rest of the fields are set to 0.\n• objectSize: Set to 0 for an uninitialized object\n• maxObjectSize\nFor a persistent object, set to keySize\no\nFor a transient object, set to the parameter maxKeySize passed to\no\nTEE_AllocateTransientObject\n• objectUsage: A bit vector of the TEE_USAGE_XXX bits defined in Table 5-4. Initially set to\n0xFFFFFFFF.\n• dataSize\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 351,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 351",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetObjectInfo",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "352 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nFor a persistent object, set to the current size of the data associated with the object\no\nFor a transient object, always set to 0\no\n• dataPosition\nFor a persistent object, set to the current position in the data for this handle. Data positions for\no\ndifferent handles on the same object may differ.\nFor a transient object, set to 0\no\n• handleFlags: A bit vector containing one or more of the following flags:\nTEE_HANDLE_FLAG_PERSISTENT: Set for a persistent object\no\nTEE_HANDLE_FLAG_INITIALIZED\no\n For a persistent object, always set\n For a transient object, initially cleared, then set when the object becomes initialized\nTEE_DATA_FLAG_XXX: Only for persistent objects, the flags used to open or create the object\no\nParameters\n• object: Handle of the object\n• objectInfo: Pointer to a structure filled with the object information\nSpecification Number: 10 Function Number: 0x703\nPanic Reasons\n• If object is not a valid opened object handle.\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 352,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 352",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 353 / 375\nB.1.2 TEE_RestrictObjectUsage – Deprecated\nvoid TEE_RestrictObjectUsage(\nTEE_ObjectHandle object,\nuint32_t objectUsage );\nDescription\nSince: TEE Internal API v1.0; deprecated in TEE Internal Core API v1.1\nUse of this function is deprecated – new code SHOULD use the TEE_RestrictObjectUsage1 function\ninstead.\nThe TEE_RestrictObjectUsage function restricts the object usage flags of an object handle to contain at\nmost the flags passed in the objectUsage parameter.\nFor each bit in the parameter objectUsage:\n• If the bit is set to 1, the corresponding usage flag in the object is left unchanged.\n• If the bit is set to 0, the corresponding usage flag in the object is cleared.\nFor example, if the usage flags of the object are set to TEE_USAGE_ENCRYPT | TEE_USAGE_DECRYPT and\nif objectUsage is set to TEE_USAGE_ENCRYPT | TEE_USAGE_EXTRACTABLE, then the only remaining\nusage flag in the object after calling the function TEE_RestrictObjectUsage is TEE_USAGE_ENCRYPT.\nNote that an object usage flag can only be cleared. Once it is cleared, it cannot be set to 1 again on a persistent\nobject.\nA transient object’s object usage flags are reset using the TEE_ResetTransientObject function. For a\ntransient object, resetting the object also clears all the key material stored in the container.\nFor a persistent object, setting the object usage SHALL be an atomic operation.\nIf the supplied object is persistent and corruption is detected then this function does nothing and returns. The\nobject handle is not closed since the next use of the handle will return the corruption and delete it.\nParameters\n• object: Handle on an object\n• objectUsage: New object usage, an OR combination of one or more of the TEE_USAGE_XXX\nconstants defined in Table 5-4\nSpecification Number: 10 Function Number: 0x705\nPanic Reasons\n• If object is not a valid opened object handle.\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 353,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 353",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_RestrictObjectUsage",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "354 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nB.1.3 TEE_CopyObjectAttributes – Deprecated\nvoid TEE_CopyObjectAttributes(\nTEE_ObjectHandle destObject,\nTEE_ObjectHandle srcObject );\nDescription\nSince: TEE Internal API v1.0; deprecated in TEE Internal Core API v1.1\nUse of this function is deprecated – new code SHOULD use the TEE_CopyObjectAttributes1 function\ninstead.\nThe TEE_CopyObjectAttributes function populates an uninitialized object handle with the attributes of\nanother object handle; that is, it populates the attributes of destObject with the attributes of srcObject.\nIt is most useful in the following situations:\n• To extract the public key attributes from a key-pair object\n• To copy the attributes from a persistent object into a transient object\ndestObject SHALL refer to an uninitialized object handle and SHALL therefore be a transient object.\nThe source and destination objects SHALL have compatible types and sizes in the following sense:\n• The type of destObject SHALL be a subtype of srcObject, i.e. one of the conditions listed in\nTable 5-11 SHALL be true.\n• The size of srcObject SHALL be less than or equal to the maximum size of destObject.\nThe effect of this function on destObject is identical to the function TEE_PopulateTransientObject\nexcept that the attributes are taken from srcObject instead of from parameters.\nThe object usage of destObject is set to the bitwise AND of the current object usage of destObject and\nthe object usage of srcObject.\nIf the source object is corrupt then this function copies no attributes and leaves the target object uninitialized.\nParameters\n• destObject: Handle on an uninitialized transient object\n• srcObject: Handle on an initialized object\nSpecification Number: 10 Function Number: 0x802\nPanic Reasons\n• If srcObject is not initialized.\n• If destObject is initialized.\n• If the type and size of srcObject and destObject are not compatible.\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 354,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 354",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CopyObjectAttributes",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 355 / 375\nB.1.4 TEE_CloseAndDeletePersistentObject – Deprecated\nvoid TEE_CloseAndDeletePersistentObject( TEE_ObjectHandle object );\nDescription\nSince: TEE Internal API v1.0; deprecated in TEE Internal Core API v1.1\nUse of this function is deprecated – new code SHOULD use the TEE_CloseAndDeletePersistentObject1\nfunction instead.\nThe TEE_CloseAndDeletePersistentObject function marks an object for deletion and closes the object\nhandle.\nThe object handle SHALL have been opened with the write-meta access right, which means access to the\nobject is exclusive.\nDeleting an object is atomic; once this function returns, the object is definitely deleted and no more open\nhandles for the object exist. This SHALL be the case even if the object or the storage containing it have become\ncorrupted.\nIf the storage containing the object is unavailable then this routine SHALL panic.\nIf object is TEE_HANDLE_NULL, the function does nothing.\nParameters\n• object: The object handle\nSpecification Number: 10 Function Number: 0x901\nPanic Reasons\n• If object is not a valid handle on a persistent object opened with the write-meta access right.\n• If the storage containing the object is now inaccessible\n• If the implementation detects any other error.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 355,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 355",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CloseAndDeletePersistentObject",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "356 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nB.1.5 TEE_BigIntInitFMMContext – Deprecated\nvoid TEE_BigIntInitFMMContext(\n[out] TEE_BigIntFMMContext *context,\nsize_t len,\n[in] TEE_BigInt *modulus );\nDescription\nSince: TEE Internal Core API v1.1.1; deprecated in TEE Internal Core API v1.2 – See Backward\nCompatibility note below.\nUse of this function is deprecated – new code SHOULD use the TEE_BigIntInitFMMContext1 function\ninstead.\nThe TEE_BigIntInitFMMContext function calculates the necessary prerequisites for the fast modular\nmultiplication and stores them in a context. This function assumes that context points to a memory area of\nlen uint32_t. This can be done for example with the following memory allocation:\nTEE_BigIntFMMContext* ctx;\nuint_t len = TEE_BigIntFMMContextSizeInU32(bitsize);\nctx=(TEE_BigIntFMMContext *) TEE_Malloc(len * sizeof(TEE_BigIntFFMContext), 0);\n/*Code for initializing modulus*/\n…\nTEE_BigIntInitFMMContext(ctx, len, modulus);\nEven though a fast multiplication might be mathematically defined for any modulus, normally there are\nrestrictions in order for it to be fast on a computer. This specification mandates that all implementations SHALL\nwork for all odd moduli larger than 2 and less than 2 to the power of the implementation defined property\ngpd.tee.arith.maxBigIntSize.\nParameters\n• context: A pointer to the TEE_BigIntFMMContext to be initialized\n• len: The size in uint32_t of the memory pointed to by context\n• modulus: The modulus, an odd integer larger than 2 and less than 2 to the power of\ngpd.tee.arith.maxBigIntSize\nSpecification Number: 10 Function Number: 0x1603\nPanic Reasons\n• If the implementation detects any error.\nBackward Compatibility\nTEE Internal Core API v1.1 used a different type for len.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 356,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 356",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntFMMContextSizeInU32,TEE_BigIntInitFMMContext,TEE_Malloc",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 357 / 375\nB.2 Deprecated Object Identifiers\nTable B-1 lists deprecated object identifiers and their replacements. The deprecated identifiers will be removed at some future major revision of this specification.\nBackward Compatibility\nWhile new TA code SHOULD use the new identifiers, the old identifiers SHALL be recognized in an implementation until removed from the specification.\nTable B-1: Deprecated Object Identifiers\nIdentifier in v1.1 History Replacement Identifier\nTEE_TYPE_CORRUPTED * Since: TEE Internal Core API v1.1 TEE_TYPE_CORRUPTED_OBJECT\nDeprecated in TEE Internal Core API v1.1.1\nTEE_TYPE_CORRUPTED_OBJECT Since: TEE Internal Core API v1.1 None (had been used only in a now deprecated function)\nDeprecated in TEE Internal Core API v1.1.1\n* As the value of the deprecated identifier TEE_TYPE_CORRUPTED was not previously formally defined, that value SHOULD be the same as the value of the\nReplacement Identifier. This value can be found in Table 6-13.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved. The technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform.\nUse of this information is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 357,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 357",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "358 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nB.3 Deprecated Algorithm Identifiers\nTable B-2 lists deprecated algorithm identifiers and their replacements. The deprecated identifiers will be removed at some future major revision of this\nspecification.\nBackward Compatibility\nWhile new TA code SHOULD use the new identifiers, the old identifiers SHALL be recognized in an implementation until removed from the specification.\nTable B-2: Deprecated Algorithm Identifiers\nIdentifier in v1.1 Replacement Identifier\nDSA algorithm identifiers should be tied to the size of the digest, not the key. The key size information is provided with the key material.\nTEE_ALG_DSA_2048_SHA224* TEE_ALG_DSA_SHA224\nTEE_ALG_DSA_2048_SHA256* TEE_ALG_DSA_SHA256\nTEE_ALG_DSA_3072_SHA256* TEE_ALG_DSA_SHA256\nIn some cases an incomplete identifier was used for DSA algorithms.\nALG_DSA_SHA1* TEE_ALG_DSA_SHA1\nALG_DSA_SHA224* TEE_ALG_DSA_SHA224\nALG_DSA_SHA256* TEE_ALG_DSA_SHA256\nIn some cases the ECDSA algorithm was not sufficiently defined and did not indicate digest size.\nTEE_ALG_ECDSA* TEE_ALG_ECDSA_SHA512\nECDSA algorithm identifiers should be tied to the size of the digest, not the key. The key size information is provided with the key material.\nTEE_ALG_ECDSA_P192* TEE_ALG_ECDSA_SHA1\nTEE_ALG_ECDSA_P224* TEE_ALG_ECDSA_SHA224\nTEE_ALG_ECDSA_P256* TEE_ALG_ECDSA_SHA256\nTEE_ALG_ECDSA_P384* TEE_ALG_ECDSA_SHA384\nTEE_ALG_ECDSA_P521* TEE_ALG_ECDSA_SHA512\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved. The technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform.\nUse of this information is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 358,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 358",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 359 / 375\nIdentifier in v1.1 Replacement Identifier\nA number of algorithm identifier declarations mistakenly included “_NIST” and/or the curve type. The curve type can be found in the key material.\nTEE_ALG_ECDH_NIST_P192_DERIVE_SHARED_SECRET+ TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_NIST_P224_DERIVE_SHARED_SECRET+ TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_NIST_P256_DERIVE_SHARED_SECRET+ TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_NIST_P384_DERIVE_SHARED_SECRET+ TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_NIST_P521_DERIVE_SHARED_SECRET+ TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_P192 TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_P224 TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_P256 TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_P384 TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_P521 TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_P192_DERIVE_SHARED_SECRET+ TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_P224_DERIVE_SHARED_SECRET+ TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_P256_DERIVE_SHARED_SECRET+ TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_P384_DERIVE_SHARED_SECRET+ TEE_ALG_ECDH_DERIVE_SHARED_SECRET\nTEE_ALG_ECDH_P521_DERIVE_SHARED_SECRET+ TEE_ALG_ECDH_DERIVE_SHARED_SECRET\n* As the values of the deprecated algorithm identifiers were not previously formally defined, those values SHOULD be the same as the values of the\nReplacement Identifier. In each case, this value can be found in Table 6-11.\n+ As the values of the deprecated algorithm identifiers were not previously formally defined. those values SHOULD be the same as the values of the\ndeprecated TEE_ALG_ECDH_Pxxx equivalent. In each case, the particular value can be found in Table 6-11.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved. The technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform.\nUse of this information is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 359,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 359",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "360 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nB.4 Deprecated Properties\nTable B-3: Deprecated Properties\nProperty History Replacement\ngpd.tee.apiversion Since: TEE Internal API v1.0 Deprecated in favor of gpd.tee.internalCore.version.\nDeprecated in TEE Internal Core API v1.1.2\ngpd.tee.cryptography.ecc Since: TEE Internal Core API v1.1 No direct replacement. The function TEE_IsAlgorithmSupported\ncan be used to determine which, if any, ECC curves are supported.\nDeprecated in TEE Internal Core API v1.2\ngpd.tee.trustedStorage. Since: TEE Internal Core API v1.2 Deprecated in favor of a rollback protection property for each Trusted\nantiRollback. Storage Space.\nDeprecated in TEE Internal Core API v1.3\nprotectionLevel\ngpd.tee.trustedStorage.perso.rollbackProtection\ngpd.tee.trustedStorage. Since: TEE Internal Core API v1.1 gpd.tee.trustedStorage.private.rollbackProtection\nrollbackDetection.\ngpd.tee.trustedStorage.protected.rollbackProtection\nDeprecated in TEE Internal Core API v1.3\nprotectionLevel\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved. The technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform.\nUse of this information is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 360,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 360",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 361 / 375\nB.5 Deprecated Object or Operation Attributes\nTable B-4: Deprecated Object or Operation Attributes\nAttribute Value History Replacement\nTEE_ATTR_ECC_PUBLIC_VALUE_X 0xD0000146 Since: TEE Internal Core API v1.2 TEE_ATTR_ECC_EPHEMERAL_PUBLIC_VALUE_X\nRenamed in TEE Internal Core API v1.3\nTEE_ATTR_ECC_PUBLIC_VALUE_Y 0xD0000246 Since: TEE Internal Core API v1.2 TEE_ATTR_ECC_EPHEMERAL_PUBLIC_VALUE_Y\nRenamed in TEE Internal Core API v1.3\nTEE_ATTR_ECC_PRIVATE_VALUE 0xD0000346 Since: TEE Internal Core API v1.2 Redundant value.\nDeprecated in TEE Internal Core API v1.3 The correct value for this Attribute is\n0xC0000341.\nTEE_ATTR_ED25519_CTX 0xD0000643 Since: TEE Internal Core API v1.2 TEE_ATTR_EDDSA_CTX\nDeprecated in TEE Internal Core API v1.3\nTEE_ATTR_ED25519_PH 0xF0000543 Since: TEE Internal Core API v1.2 None.\nDeprecated in TEE Internal Core API v1.3\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved. The technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform.\nUse of this information is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 361,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 361",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "362 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nB.6 Deprecated API Return Codes\nTable B-5 lists deprecated return codes and their replacements. The deprecated return codes will be removed at some future major revision of this specification.\nBackward Compatibility\nWhile new TA code SHOULD use the new return codes, the old return codes SHALL be recognized in an implementation until removed from the specification.\nTable B-5: Deprecated Return Codes\nReturn Code History Replacement Return Code\nTEE_ERROR_OLD_VERSION Since: TEE Internal Core API v1.2 TEE_ERROR_UNSUPPORTED_VERSION\nDeprecated in TEE Internal Core API v1.3\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved. The technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform.\nUse of this information is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 362,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 362",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 363 / 375\nAnnex C Normative References for Algorithms\nThis annex provides normative references for the algorithms discussed earlier in this document.\nTable C-1: Normative References for Algorithms\nName References URL\nTEE_ALG_AES_ECB_NOPAD FIPS 197 (AES) http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf\nTEE_ALG_AES_CBC_NOPAD NIST SP800-38A (ECB, http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\nTEE_ALG_AES_CTR CBC, CTR)\nTEE_ALG_AES_CTS FIPS 197 (AES) http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf\nNIST SP800-38A http://csrc.nist.gov/publications/nistpubs/800-38a/addendum-to-\nAddendum (CTS = nist_sp800-38A.pdf\nCBC-CS3)\nTEE_ALG_AES_XTS IEEE Std 1619-2007 http://ieeexplore.ieee.org/xpl/mostRecentIssue.jsp?punumber=4493431\nTEE_ALG_AES_CCM FIPS 197 (AES) http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf\nRFC 3610 (CCM) http://tools.ietf.org/html/rfc3610\nTEE_ALG_AES_GCM FIPS 197 (AES) http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf\nNIST 800-38D (GCM) http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf\nTEE_ALG_DES_ECB_NOPAD FIPS 46 (DES, 3DES) http://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf\nTEE_ALG_DES_CBC_NOPAD FIPS 81 (ECB, CBC) http://www.itl.nist.gov/fipspubs/fip81.htm\nTEE_ALG_DES3_ECB_NOPAD\nTEE_ALG_DES3_CBC_NOPAD\nTEE_ALG_AES_CBC_MAC_NOPAD FIPS 46 (DES, 3DES) http://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf\nTEE_ALG_AES_CBC_MAC_PKCS5 FIPS 197 (AES) http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf\nTEE_ALG_DES_CBC_MAC_NOPAD\nRFC 1423 (PKCS5 Pad) http://tools.ietf.org/html/rfc1423\nTEE_ALG_DES_CBC_MAC_PKCS5\nTEE_ALG_DES3_CBC_MAC_NOPAD\nTEE_ALG_DES3_CBC_MAC_PKCS5\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved. The technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform.\nUse of this information is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 363,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 363",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "364 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nName References URL\nTEE_ALG_AES_CMAC FIPS 197 (AES) http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf\nNIST SP800-38B (CMAC) http://csrc.nist.gov/publications/nistpubs/800-38B/SP_800-38B.pdf\nTEE_ALG_RSASSA_PKCS1_V1_5_MD5 PKCS #1 (RSA, ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2-1.pdf\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA1 PKCS1 v1.5, PSS) https://www.rfc-editor.org/rfc/rfc8017\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA224 RFC 1321 (MD5)\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA256 FIPS 180-4 (SHA-1, http://tools.ietf.org/html/rfc1321\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA384 SHA-2) http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA512 FIPS 202 (SHA-3)\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA3_224 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA3_256\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA3_384\nTEE_ALG_RSASSA_PKCS1_V1_5_SHA3_512\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA1\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA224\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA256\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA384\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA512\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA3_224\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA3_256\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA3_384\nTEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA3_512\nTEE_ALG_DSA_SHA1 FIPS 180-4 (SHA-1) http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\nTEE_ALG_DSA_SHA224 FIPS 186-2 (DSA) * http://csrc.nist.gov/publications/fips/archive/fips186-2/fips186-2.pdf\nTEE_ALG_DSA_SHA256\nFIPS 202 (SHA-3) https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf\nTEE_ALG_DSA_SHA256\nTEE_ALG_DSA_SHA3_224\nTEE_ALG_DSA_SHA3_256\nTEE_ALG_DSA_SHA3_384\nTEE_ALG_DSA_SHA3_512\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved. The technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform.\nUse of this information is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 364,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 364",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 365 / 375\nName References URL\nTEE_ALG_RSAES_PKCS1_V1_5 PKCS #1 (RSA, https://www.rfc-editor.org/rfc/rfc8017\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA1 PKCS1 v1.5, OAEP) ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2-1.pdf\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA224 FIPS 180-4 (SHA-1,\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA256 SHA-2) http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA384\nTEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA512\nTEE_ALG_RSA_NOPAD PKCS #1 (RSA primitive) ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2-1.pdf\nTEE_ALG_DH_DERIVE_SHARED_SECRET PKCS #3 ftp://ftp.rsasecurity.com/pub/pkcs/ps/pkcs-3.ps\nTEE_ALG_MD5 RFC 1321 http://tools.ietf.org/html/rfc1321\nTEE_ALG_SHA1 FIPS 180-4 http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\nTEE_ALG_SHA224\nTEE_ALG_SHA256\nTEE_ALG_SHA384\nTEE_ALG_SHA512\nTEE_ALG_HMAC_MD5 RFC 2202 http://tools.ietf.org/html/rfc2202\nTEE_ALG_HMAC_SHA1\nTEE_ALG_HMAC_SHA224 RFC 4231 http://tools.ietf.org/html/rfc4231\nTEE_ALG_HMAC_SHA256\nTEE_ALG_HMAC_SHA384\nTEE_ALG_HMAC_SHA512\nTEE_ALG_HMAC_SHA3_224 RFC 2104 (HMAC) https://www.ietf.org/rfc/rfc2104.txt\nTEE_ALG_HMAC_SHA3_256 FIPS 202 (SHA-3) https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf\nTEE_ALG_HMAC_SHA3_384\nTEE_ALG_HMAC_SHA3_512\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved. The technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform.\nUse of this information is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 365,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 365",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "366 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nName References URL\nTEE_ALG_ECDSA_SHA1 FIPS 186-4 * http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf\nTEE_ALG_ECDSA_SHA224 ANSI X9.62 http://webstore.ansi.org/RecordDetail.aspx?sku=ANSI+X9.62%3A2005\nTEE_ALG_ECDSA_SHA256\nTEE_ALG_ECDSA_SHA384\nTEE_ALG_ECDSA_SHA512\nTEE_ALG_ECDSA_SHA3_224\nTEE_ALG_ECDSA_SHA3_256\nTEE_ALG_ECDSA_SHA3_384\nTEE_ALG_ECDSA_SHA3_512\nTEE_ALG_ECDH_DERIVE_SHARED_SECRET NIST SP800-56A, http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-\nCofactor Static Unified 56Ar2.pdf\nModel\nhttp://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf\nFIPS 186-4 * (curve\ndefinitions)\nTEE_ALG_ED25519 RFC 8032 http://tools.ietf.org/html/rfc8032\nTEE_ALG_ED448\nTEE_ALG_X25519 RFC 7748 http://tools.ietf.org/html/rfc7748\nTEE_ALG_X448\nTEE_ALG_SM2_DSA_SM3 OCTA http://www.sca.gov.cn/app-zxfw/zxfw/bzgfcx.jsp\nhttp://www.scctc.org.cn/templates/Download/index.aspx?nodeid=71\nTEE_ALG_SM2_KEP OCTA http://www.sca.gov.cn/app-zxfw/zxfw/bzgfcx.jsp\nhttp://www.scctc.org.cn/templates/Download/index.aspx?nodeid=71\nTEE_ALG_SM2_PKE OCTA http://www.sca.gov.cn/app-zxfw/zxfw/bzgfcx.jsp\nhttp://www.scctc.org.cn/templates/Download/index.aspx?nodeid=71\nTEE_ALG_SM3 OCTA http://www.sca.gov.cn/app-zxfw/zxfw/bzgfcx.jsp\nhttp://www.scctc.org.cn/templates/Download/index.aspx?nodeid=71\nTEE_ALG_HMAC_SM3 OCTA http://www.sca.gov.cn/app-zxfw/zxfw/bzgfcx.jsp\nhttp://www.scctc.org.cn/templates/Download/index.aspx?nodeid=71\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved. The technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform.\nUse of this information is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 366,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 366",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 367 / 375\nName References URL\nTEE_ALG_SM4_ECB_NOPAD OCTA http://www.sca.gov.cn/app-zxfw/zxfw/bzgfcx.jsp\nTEE_ALG_SM4_ECB_PKCS5 http://www.scctc.org.cn/templates/Download/index.aspx?nodeid=71\nTEE_ALG_SM4_CBC_NOPAD OCTA http://www.sca.gov.cn/app-zxfw/zxfw/bzgfcx.jsp\nTEE_ALG_SM4_CBC_PKCS5 http://www.scctc.org.cn/templates/Download/index.aspx?nodeid=71\nTEE_ALG_SM4_CTR OCTA http://www.sca.gov.cn/app-zxfw/zxfw/bzgfcx.jsp\nhttp://www.scctc.org.cn/templates/Download/index.aspx?nodeid=71\nTEE_ALG_SHA3_224 FIPS 202 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf\nTEE_ALG_SHA3_256 NIST SP800-185, SHA-3 https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-\nTEE_ALG_SHA3_384 Derived Functions 185.pdf\nTEE_ALG_SHA3_512\nTEE_ALG_SHAKE128\nTEE_ALG_SHAKE256\nTEE_ALG_HKDF RFC 5869 https://tools.ietf.org/html/rfc5869\n* This specification follows a superset of both FIPS 186-2 and FIPS 186-4. Available key sizes are\ndefined in this specification and so no key size exclusions in FIPS 186-2 or FIPS 186-4 apply to this\nspecification. Otherwise, when applied to this specification, if FIPS 186-4 conflicts with FIPS 186-2,\nthen FIPS 186-4 is taken as definitive.\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved. The technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform.\nUse of this information is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly prohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 367,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 367",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "has_api_definitions": false,
          "api_count": 0
        }
      },
      {
        "page_content": "368 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nAnnex D Peripheral API Usage (Informative)\nThe following example code is informative, and is intended to provide basic usage information on the Peripheral\nAPI. Error handling is deliberately extremely simplistic and does not represent production quality code. No\nguarantee is made as to the quality and correctness of this code sample.\n#include \"tee_internal_api.h\"\n#if (TEE_CORE_API_MAJOR_VERSION != 1) && (TEE_CORE_API_MINOR_VERSION < 2)\n#error \"TEE Peripheral API not supported on TEE Internal Core API < 1.2\"\n#endif\n#if !defined(TEE_CORE_API_EVENT)\n#error \"TEE Peripheral API not supported on this platform\"\n#endif\n#define MAX_BUFFER (256)\n// Define a proprietary serial peripheral (as no peripheral supporting the\n// polled Peripheral API is defined in this document). This is purely to\n// illustrate how the API is used where such a peripheral is invented.\n#define PROP_PERIPHERAL_UART (0x80000001)\n// The state below has tag=TEE_PERIPHERAL_VALUE_UINT32, ro=false\n#define PROP_PERIPHERAL_STATE_BAUDRATE (0x80000001)\n#define PROP_PERIPHERAL_UART_BAUD9600 (0x80)\n// Trivial error handling\n#define ta_assert(cond, val) if (!(cond)) TEE_Panic(val)\n#define TA_GETPERIPHERALS (1)\n#define TA_VERSIONFAIL (2)\n#define TA_GETSTATETABLE (3)\n#define TA_FAILBAUDRATE (4)\n#define TA_FAILOPEN (5)\n#define TA_FAILWRITE (6)\nstatic TEE_Peripheral* peripherals;\nstatic TEE_PeripheralState* peripheral_state;\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 368,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 368",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TA_FAILBAUDRATE,TA_FAILOPEN,TA_FAILWRITE,TA_GETPERIPHERALS,TA_GETSTATETABLE,TA_VERSIONFAIL,TEE_Panic",
          "has_api_definitions": true,
          "api_count": 7
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 369 / 375\nvoid TestPeripherals()\n{\nuint32_t ver;\nTEE_Result res;\nsize_t size;\nuint32_t max;\nTEE_PeripheralId tee_id;\nTEE_EventSourceHandle tee_e_handle;\nTEE_PeripheralDescriptor uart_descriptor;\nTEE_PeripheralId uart_id;\nTEE_PeripheralHandle uart_p_handle;\nuint32_t uart_baud;\nbool supports_exclusive;\nbool supports_baudrate_change;\nuint8_t buf[MAX_BUFFER];\n// Get TEE peripherals table. Catch errors, but assert rather than handle.\n// First call with NULL fetches the size of the peripherals table\nres = TEE_Peripheral_GetPeripherals(&ver, NULL, &size);\nperipherals = (TEE_Peripheral*) TEE_Malloc(size);\nres = TEE_Peripheral_GetPeripherals(&ver, peripherals, &size);\nta_assert((res == TEE_SUCCESS) && (size <= sizeof(peripherals)),\nTA_GETPERIPHERALS);\n//****************************************************************\n// Find Peripheral ID for OS pseudo-peripheral (there is only one)\n// and for the proprietary UART (there is also only one, for simplicity)\n//****************************************************************\nmax = size / sizeof(TEE_Peripheral);\nfor (uint32_t i = 0; i < max; i++) {\nta_assert(peripherals[i].version == 1, TA_VERSIONFAIL);\nif (peripherals[i].periphType == TEE_PERIPHERAL_TEE) {\ntee_id = peripherals[i].id;\ntee_e_handle = peripherals[i].e_handle;\n} else if (peripherals[i].periphType == PROP_PERIPHERAL_UART) {\nuart_id = peripherals[i].id;\nuart_p_handle = peripherals[i].p_handle;\n}\n}\n// Get state of the OS pseudo-peripheral.\n// Catch errors, but assert rather than recover.\nsize = sizeof(peripheral_state);\nres = TEE_Peripheral_GetStateTable(tee_id, peripheral_state, &size);\nta_assert((res == TEE_SUCCESS) && (size <= sizeof(peripheral_state)),\nTA_GETSTATETABLE);\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 369,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 369",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Malloc,TEE_Peripheral_GetPeripherals,TEE_Peripheral_GetStateTable",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "370 / 375 TEE Internal Core API Specification – Public Release v1.3.1\n// Check if exclusive access is supported by OS pseudo-peripheral\nsupports_exclusive = false;\nmax = size / sizeof(TEE_PeripheralState);\nfor (uint32_t i = 0; i < max; i++) {\nif (peripheral_state[i].id == TEE_PERIPHERAL_STATE_EXCLUSIVE_ACCESS) {\nsupports_exclusive = peripheral_state[i].u.boolVal;\nbreak;\n}\n}\n//****************************************************************\n// Set the baud rate on the proprietary UART pseudo-peripheral.\n//****************************************************************\n// Fetch the state table for the UART\nsize = sizeof(peripheral_state);\nres = TEE_Peripheral_GetStateTable(uart_id, peripheral_state, &size);\nta_assert((res == TEE_SUCCESS) && (size <= sizeof(peripheral_state)),\nTA_GETSTATETABLE);\n// Find the state information and check it is writeable\nmax = size / sizeof(TEE_PeripheralState);\nsupports_baudrate_change = false;\nuint32_t baudrate = PROP_PERIPHERAL_UART_BAUD9600;\nfor (uint32_t i = 0; i < max; i++) {\nif (peripheral_state[i].id == PROP_PERIPHERAL_STATE_BAUDRATE) {\nsupports_baudrate_change = peripheral_state[i].u.boolVal;\nbreak;\n}\n}\n// If so, change the baud rate.\nif (supports_baudrate_change) {\nres = TEE_PeripheralSetState(uart_id,\nPROP_PERIPHERAL_STATE_BAUDRATE,\nTEE_PERIPHERAL_VALUE_UINT32,\nbaudrate);\nta_assert(res == TEE_SUCCESS, TA_FAILBAUDRATE);\n}\n// Open the UART\nuart_descriptor.id = uart_id;\nuart_descriptor.p_handle = TEE_INVALID_HANDLE;\nuart_descriptor_e_handle = TEE_INVALID_HANDLE;\nres = TEE_Peripheral_Open(&uart_descriptor);\nta_assert((res == TEE_SUCCESS) &&\n(uart_descriptor.p_handle != TEE_INVALID_HANDLE),\nTA_FAILOPEN);\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 370,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 370",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_PeripheralSetState,TEE_Peripheral_GetStateTable,TEE_Peripheral_Open",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 371 / 375\n// Write to the UART.\nfor (uint32_t i = 0; i < MAX_BUFFER; i++)\nbuf[i] = i;\nres = TEE_Peripheral_Write(uart_descriptor.p_handle, buf, MAX_BUFFER);\nta_assert((res == TEE_SUCCESS), TA_FAILWRITE);\n}\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 371,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 371",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_Peripheral_Write",
          "has_api_definitions": true,
          "api_count": 1
        }
      },
      {
        "page_content": "372 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nFunctions\nTA_CloseSessionEntryPoint, 65 TEE_BigIntNeg, 280\nTA_CreateEntryPoint, 62 TEE_BigIntRelativePrime, 291\nTA_DestroyEntryPoint, 62 TEE_BigIntSetBit, 275\nTA_InvokeCommandEntryPoint, 66 TEE_BigIntShiftRight, 273\nTA_OpenSessionEntryPoint, 63 TEE_BigIntSizeInU32 (macro), 262\nTEE_AEDecryptFinal, 223 TEE_BigIntSquare, 282\nTEE_AEEncryptFinal, 222 TEE_BigIntSquareMod, 288\nTEE_AEInit, 217 TEE_BigIntSub, 279\nTEE_AEUpdate, 220 TEE_BigIntSubMod, 286\nTEE_AEUpdateAAD, 219 TEE_CheckMemoryAccessRights, 108\nTEE_AllocateOperation, 184 TEE_CipherDoFinal, 210\nTEE_AllocatePersistentObjectEnumerator, 166 TEE_CipherInit, 207\nTEE_AllocatePropertyEnumerator, 80 TEE_CipherUpdate, 209\nTEE_AllocateTransientObject, 139 TEE_CloseAndDeletePersistentObject\nTEE_AsymmetricDecrypt, 225 (deprecated), 355\nTEE_AsymmetricEncrypt, 225 TEE_CloseAndDeletePersistentObject1, 164\nTEE_AsymmetricSignDigest, 228 TEE_CloseObject, 138\nTEE_AsymmetricVerifyDigest, 231 TEE_CloseTASession, 100\nTEE_BigIntAbs, 277 TEE_CopyObjectAttributes (deprecated), 354\nTEE_BigIntAdd, 278 TEE_CopyObjectAttributes1, 151\nTEE_BigIntAddMod, 285 TEE_CopyOperation, 200\nTEE_BigIntAssign, 276 TEE_CreatePersistentObject, 159\nTEE_BigIntCmp, 272 TEE_DeriveKey, 233\nTEE_BigIntCmpS32, 272 TEE_DigestDoFinal, 204\nTEE_BigIntComputeExtendedGcd, 292 TEE_DigestExtract, 205\nTEE_BigIntComputeFMM, 296 TEE_DigestUpdate, 203\nTEE_BigIntConvertFromFMM, 295 TEE_Event_AddSources, 335\nTEE_BigIntConvertFromOctetString, 268 TEE_Event_CancelSources, 336\nTEE_BigIntConvertFromS32, 270 TEE_Event_CloseQueue, 337\nTEE_BigIntConvertToFMM, 294 TEE_Event_DropSources, 338\nTEE_BigIntConvertToOctetString, 269 TEE_Event_ListSources, 339\nTEE_BigIntConvertToS32, 271 TEE_Event_OpenQueue, 340\nTEE_BigIntDiv, 283 TEE_Event_TimerCreate, 342\nTEE_BigIntExpMod, 290 TEE_Event_Wait, 343\nTEE_BigIntFMMContextSizeInU32, 263 TEE_Free, 117\nTEE_BigIntFMMSizeInU32, 264 TEE_FreeOperation, 189\nTEE_BigIntGetBit, 274 TEE_FreePersistentObjectEnumerator, 166\nTEE_BigIntGetBitCount, 274 TEE_FreePropertyEnumerator, 80\nTEE_BigIntInit, 265 TEE_FreeTransientObject, 143\nTEE_BigIntInitFMM, 267 TEE_GenerateKey, 153\nTEE_BigIntInitFMMContext (deprecated), 356 TEE_GenerateRandom, 237\nTEE_BigIntInitFMMContext1, 266 TEE_GetCancellationFlag, 106\nTEE_BigIntInvMod, 289 TEE_GetInstanceData, 112\nTEE_BigIntIsProbablePrime, 293 TEE_GetNextPersistentObject, 169\nTEE_BigIntMod, 284 TEE_GetNextProperty, 83\nTEE_BigIntMul, 281 TEE_GetObjectBufferAttribute, 135\nTEE_BigIntMulMod, 287\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 372,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 372",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntInitFMMContext,TEE_BigIntSizeInU32,TEE_CopyObjectAttributes",
          "has_api_definitions": true,
          "api_count": 3
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 373 / 375\nTEE_GetObjectInfo (deprecated), 351 TEE_Peripheral_Close, 321\nTEE_GetObjectInfo1, 132 TEE_Peripheral_CloseMultiple, 322\nTEE_GetObjectValueAttribute, 137 TEE_Peripheral_GetPeripherals, 323\nTEE_GetOperationInfo, 190 TEE_Peripheral_GetState, 325\nTEE_GetOperationInfoMultiple, 192 TEE_Peripheral_GetStateTable, 326\nTEE_GetPropertyAsBinaryBlock, 77 TEE_Peripheral_Open, 327\nTEE_GetPropertyAsBool, 74 TEE_Peripheral_OpenMultiple, 329\nTEE_GetPropertyAsIdentity, 79 TEE_Peripheral_Read, 331\nTEE_GetPropertyAsString, 73 TEE_Peripheral_SetState, 333\nTEE_GetPropertyAsU32, 75 TEE_Peripheral_Write, 334\nTEE_GetPropertyAsU64, 76 TEE_PopulateTransientObject, 144\nTEE_GetPropertyAsUUID, 78 TEE_ReadObjectData, 171\nTEE_GetPropertyName, 82 TEE_Realloc, 115\nTEE_GetREETime, 257 TEE_RenamePersistentObject, 165\nTEE_GetSystemTime, 252 TEE_ResetOperation, 194\nTEE_GetTAPersistentTime, 254 TEE_ResetPersistentObjectEnumerator, 167\nTEE_InitRefAttribute, 149 TEE_ResetPropertyEnumerator, 81\nTEE_InitValueAttribute, 149 TEE_ResetTransientObject, 143\nTEE_InvokeTACommand, 101 TEE_RestrictObjectUsage (deprecated), 353\nTEE_IsAlgorithmSupported, 201 TEE_RestrictObjectUsage1, 134\nTEE_MACCompareFinal, 215 TEE_SeekObjectData, 176\nTEE_MACComputeFinal, 214 TEE_SetInstanceData, 111\nTEE_MACInit, 212 TEE_SetOperationKey, 195\nTEE_MACUpdate, 213 TEE_SetOperationKey2, 198\nTEE_Malloc, 113 TEE_SetTAPersistentTime, 256\nTEE_MaskCancellation, 107 TEE_StartPersistentObjectEnumerator, 168\nTEE_MemCompare, 119 TEE_StartPropertyEnumerator, 81\nTEE_MemFill, 120 TEE_TruncateObjectData, 175\nTEE_MemMove, 118 TEE_UnmaskCancellation, 107\nTEE_OpenPersistentObject, 157 TEE_Wait, 253\nTEE_OpenTASession, 98 TEE_WriteObjectData, 173\nTEE_Panic, 97\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 373,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 373",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_GetObjectInfo,TEE_RestrictObjectUsage",
          "has_api_definitions": true,
          "api_count": 2
        }
      },
      {
        "page_content": "374 / 375 TEE Internal Core API Specification – Public Release v1.3.1\nFunctions by Category\nAsymmetric Generic Object\nTEE_AsymmetricDecrypt, 225 TEE_CloseObject, 138\nTEE_AsymmetricEncrypt, 225 TEE_GetObjectBufferAttribute, 135\nTEE_AsymmetricSignDigest, 228 TEE_GetObjectInfo (deprecated), 351\nTEE_AsymmetricVerifyDigest, 231 TEE_GetObjectInfo1, 132\nAuthenticated Encryption TEE_GetObjectValueAttribute, 137\nTEE_AEDecryptFinal, 223 TEE_RestrictObjectUsage (deprecated), 353\nTEE_AEEncryptFinal, 222 TEE_RestrictObjectUsage1, 134\nTEE_AEInit, 217 Generic Operation\nTEE_AEUpdate, 220 TEE_AllocateOperation, 184\nTEE_AEUpdateAAD, 219 TEE_CopyOperation, 200\nBasic Arithmetic TEE_FreeOperation, 189\nTEE_BigIntAdd, 278 TEE_GetOperationInfo, 190\nTEE_BigIntDiv, 283 TEE_GetOperationInfoMultiple, 192\nTEE_BigIntMul, 281 TEE_IsAlgorithmSupported, 201\nTEE_BigIntNeg, 280 TEE_ResetOperation, 194\nTEE_BigIntSquare, 282 TEE_SetOperationKey, 195\nTEE_BigIntSub, 279 TEE_SetOperationKey2, 198\nCancellation Initialization\nTEE_GetCancellationFlag, 106 TEE_BigIntInit, 265\nTEE_MaskCancellation, 107 TEE_BigIntInitFMM, 267\nTEE_UnmaskCancellation, 107 TEE_BigIntInitFMMContext (deprecated), 356\nTEE_BigIntInitFMMContext1, 266\nConverter\nInternal Client API\nTEE_BigIntConvertFromOctetString, 268\nTEE_BigIntConvertFromS32, 270 TEE_CloseTASession, 100\nTEE_BigIntConvertToOctetString, 269 TEE_InvokeTACommand, 101\nTEE_BigIntConvertToS32, 271 TEE_OpenTASession, 98\nData Stream Access Key Derivation\nTEE_ReadObjectData, 171 TEE_DeriveKey, 233\nTEE_SeekObjectData, 176 Logical Operation\nTEE_TruncateObjectData, 175 TEE_BigIntAbs, 277\nTEE_WriteObjectData, 173 TEE_BigIntAssign, 276\nDeprecated TEE_BigIntCmp, 272\nTEE_BigIntInitFMMContext, 356 TEE_BigIntCmpS32, 272\nTEE_CloseAndDeletePersistentObject, 355 TEE_BigIntGetBit, 274\nTEE_CopyObjectAttributes, 354 TEE_BigIntGetBitCount, 274\nTEE_GetObjectInfo, 351 TEE_BigIntSetBit, 275\nTEE_RestrictObjectUsage, 353 TEE_BigIntShiftRight, 273\nEvents MAC\nTEE_Event_AddSources, 335 TEE_MACCompareFinal, 215\nTEE_Event_CancelSources, 336 TEE_MACComputeFinal, 214\nTEE_Event_CloseQueue, 337 TEE_MACInit, 212\nTEE_Event_DropSources, 338 TEE_MACUpdate, 213\nTEE_Event_ListSources, 339 Memory Allocation and Size of Objects\nTEE_Event_OpenQueue, 340 TEE_BigIntFMMContextSizeInU32, 263\nTEE_Event_TimerCreate, 342 TEE_BigIntFMMSizeInU32, 264\nTEE_Event_Wait, 343 TEE_BigIntSizeInU32 (macro), 262\nFast Modular Multiplication\nTEE_BigIntComputeFMM, 296\nTEE_BigIntConvertFromFMM, 295\nTEE_BigIntConvertToFMM, 294\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 374,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 374",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_BigIntInitFMMContext,TEE_BigIntSizeInU32,TEE_GetObjectInfo,TEE_RestrictObjectUsage",
          "has_api_definitions": true,
          "api_count": 4
        }
      },
      {
        "page_content": "TEE Internal Core API Specification – Public Release v1.3.1 375 / 375\nMemory Management Persistent Object Enumeration\nTEE_CheckMemoryAccessRights, 108 TEE_AllocatePersistentObjectEnumerator, 166\nTEE_Free, 117 TEE_FreePersistentObjectEnumerator, 166\nTEE_GetInstanceData, 112 TEE_GetNextPersistentObject, 169\nTEE_Malloc, 113 TEE_ResetPersistentObjectEnumerator, 167\nTEE_MemCompare, 119 TEE_StartPersistentObjectEnumerator, 168\nTEE_MemFill, 120 Property Access\nTEE_MemMove, 118\nTEE_AllocatePropertyEnumerator, 80\nTEE_Realloc, 115\nTEE_FreePropertyEnumerator, 80\nTEE_SetInstanceData, 111\nTEE_GetNextProperty, 83\nMessage Digest TEE_GetPropertyAsBinaryBlock, 77\nTEE_DigestDoFinal, 204 TEE_GetPropertyAsBool, 74\nTEE_DigestExtract, 205 TEE_GetPropertyAsIdentity, 79\nTEE_DigestUpdate, 203 TEE_GetPropertyAsString, 73\nModular Arithmetic TEE_GetPropertyAsU32, 75\nTEE_GetPropertyAsU64, 76\nTEE_BigIntAddMod, 285\nTEE_GetPropertyAsUUID, 78\nTEE_BigIntExpMod, 290\nTEE_GetPropertyName, 82\nTEE_BigIntInvMod, 289\nTEE_ResetPropertyEnumerator, 81\nTEE_BigIntMod, 284\nTEE_StartPropertyEnumerator, 81\nTEE_BigIntMulMod, 287\nTEE_BigIntSquareMod, 288 Random Data Generation\nTEE_BigIntSubMod, 286 TEE_GenerateRandom, 237\nOther Arithmetic Symmetric Cipher\nTEE_BigIntComputeExtendedGcd, 292 TEE_CipherDoFinal, 210\nTEE_BigIntIsProbablePrime, 293 TEE_CipherInit, 207\nTEE_BigIntRelativePrime, 291 TEE_CipherUpdate, 209\nPanic Function TA Interface\nTEE_Panic, 97 TA_CloseSessionEntryPoint, 65\nPeripherals TA_CreateEntryPoint, 62\nTA_DestroyEntryPoint, 62\nTEE_Peripheral_Close, 321\nTA_InvokeCommandEntryPoint, 66\nTEE_Peripheral_CloseMultiple, 322\nTA_OpenSessionEntryPoint, 63\nTEE_Peripheral_GetPeripherals, 323\nTEE_Peripheral_GetState, 325 Time\nTEE_Peripheral_GetStateTable, 326 TEE_GetREETime, 257\nTEE_Peripheral_Open, 327 TEE_GetSystemTime, 252\nTEE_Peripheral_OpenMultiple, 329 TEE_GetTAPersistentTime, 254\nTEE_Peripheral_Read, 331 TEE_SetTAPersistentTime, 256\nTEE_Peripheral_SetState, 333 TEE_Wait, 253\nTEE_Peripheral_Write, 334 Transient Object\nPersistent Object TEE_AllocateTransientObject, 139\nTEE_CloseAndDeletePersistentObject TEE_CopyObjectAttributes (deprecated), 354\n(deprecated), 355 TEE_CopyObjectAttributes1, 151\nTEE_CloseAndDeletePersistentObject1, 164 TEE_FreeTransientObject, 143\nTEE_CreatePersistentObject, 159 TEE_GenerateKey, 153\nTEE_OpenPersistentObject, 157 TEE_InitRefAttribute, 149\nTEE_RenamePersistentObject, 165 TEE_InitValueAttribute, 149\nTEE_PopulateTransientObject, 144\nTEE_ResetTransientObject, 143\nCopyright  2011-2021 GlobalPlatform, Inc. All Rights Reserved.\nThe technology provided or described herein is subject to updates, revisions, and extensions by GlobalPlatform. Use of this\ninformation is governed by the GlobalPlatform license agreement and any use inconsistent with that agreement is strictly\nprohibited.",
        "metadata": {
          "source": "/workspace/src/rag/documents/GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "page": 375,
          "total_pages": 375,
          "document_type": "TEE_Internal_API",
          "section": "Page 375",
          "file_name": "GPD_TEE_Internal_Core_API_Specification_v1.3.1_PublicRelease_CC.pdf",
          "extraction_method": "pdfplumber",
          "api_functions": "TEE_CopyObjectAttributes",
          "has_api_definitions": true,
          "api_count": 1
        }
      }
    ]
  }
}