[
  {
    "caller": "stair_activate_TA",
    "callee": "ta_floor"
  },
  {
    "caller": "logistic_activate_TA",
    "callee": "ta_exp"
  },
  {
    "caller": "loggy_activate_TA",
    "callee": "ta_exp"
  },
  {
    "caller": "elu_activate_TA",
    "callee": "ta_exp"
  },
  {
    "caller": "selu_activate_TA",
    "callee": "ta_exp"
  },
  {
    "caller": "tanh_activate_TA",
    "callee": "ta_exp"
  },
  {
    "caller": "stair_gradient_TA",
    "callee": "ta_floor"
  },
  {
    "caller": "forward_connected_layer_TA_new",
    "callee": "fill_cpu_TA"
  },
  {
    "caller": "forward_connected_layer_TA_new",
    "callee": "gemm_TA"
  },
  {
    "caller": "forward_connected_layer_TA_new",
    "callee": "forward_batchnorm_layer_TA"
  },
  {
    "caller": "forward_connected_layer_TA_new",
    "callee": "add_bias_TA"
  },
  {
    "caller": "forward_connected_layer_TA_new",
    "callee": "activate_array_TA"
  },
  {
    "caller": "backward_connected_layer_TA_new",
    "callee": "gradient_array_TA"
  },
  {
    "caller": "backward_connected_layer_TA_new",
    "callee": "backward_batchnorm_layer_TA"
  },
  {
    "caller": "backward_connected_layer_TA_new",
    "callee": "backward_bias_TA"
  },
  {
    "caller": "backward_connected_layer_TA_new",
    "callee": "gemm_TA"
  },
  {
    "caller": "update_connected_layer_TA_new",
    "callee": "axpy_cpu_TA"
  },
  {
    "caller": "update_connected_layer_TA_new",
    "callee": "scal_cpu_TA"
  },
  {
    "caller": "make_connected_layer_TA_new",
    "callee": "calloc"
  },
  {
    "caller": "make_connected_layer_TA_new",
    "callee": "ta_sqrt"
  },
  {
    "caller": "make_connected_layer_TA_new",
    "callee": "rand_uniform_TA"
  },
  {
    "caller": "im2col_cpu_TA",
    "callee": "im2col_get_pixel_TA"
  },
  {
    "caller": "diff_private_SGD",
    "callee": "ta_sqrt"
  },
  {
    "caller": "diff_private_SGD",
    "callee": "ta_log"
  },
  {
    "caller": "diff_private_SGD",
    "callee": "rand_normal_TA"
  },
  {
    "caller": "aes_cbc_TA",
    "callee": "trace_printf"
  },
  {
    "caller": "aes_cbc_TA",
    "callee": "AES_init_ctx_iv"
  },
  {
    "caller": "aes_cbc_TA",
    "callee": "strncmp"
  },
  {
    "caller": "aes_cbc_TA",
    "callee": "AES_CBC_encrypt_buffer"
  },
  {
    "caller": "aes_cbc_TA",
    "callee": "AES_CBC_decrypt_buffer"
  },
  {
    "caller": "transpose_matrix_TA",
    "callee": "calloc"
  },
  {
    "caller": "transpose_matrix_TA",
    "callee": "memcpy"
  },
  {
    "caller": "transpose_matrix_TA",
    "callee": "free"
  },
  {
    "caller": "load_weights_TA",
    "callee": "malloc"
  },
  {
    "caller": "load_weights_TA",
    "callee": "copy_cpu_TA"
  },
  {
    "caller": "load_weights_TA",
    "callee": "aes_cbc_TA"
  },
  {
    "caller": "load_weights_TA",
    "callee": "transpose_matrix_TA"
  },
  {
    "caller": "load_weights_TA",
    "callee": "free"
  },
  {
    "caller": "save_weights_TA",
    "callee": "copy_cpu_TA"
  },
  {
    "caller": "save_weights_TA",
    "callee": "aes_cbc_TA"
  },
  {
    "caller": "make_avgpool_layer_TA",
    "callee": "calloc"
  },
  {
    "caller": "forward_batchnorm_layer_TA",
    "callee": "copy_cpu_TA"
  },
  {
    "caller": "forward_batchnorm_layer_TA",
    "callee": "mean_cpu_TA"
  },
  {
    "caller": "forward_batchnorm_layer_TA",
    "callee": "variance_cpu_TA"
  },
  {
    "caller": "forward_batchnorm_layer_TA",
    "callee": "scal_cpu_TA"
  },
  {
    "caller": "forward_batchnorm_layer_TA",
    "callee": "axpy_cpu_TA"
  },
  {
    "caller": "forward_batchnorm_layer_TA",
    "callee": "normalize_cpu_TA"
  },
  {
    "caller": "forward_batchnorm_layer_TA",
    "callee": "scale_bias_TA"
  },
  {
    "caller": "forward_batchnorm_layer_TA",
    "callee": "add_bias_TA"
  },
  {
    "caller": "mean_delta_cpu_TA",
    "callee": "ta_sqrt"
  },
  {
    "caller": "variance_delta_cpu_TA",
    "callee": "ta_pow"
  },
  {
    "caller": "normalize_delta_cpu_TA",
    "callee": "ta_sqrt"
  },
  {
    "caller": "backward_batchnorm_layer_TA",
    "callee": "backward_bias_TA"
  },
  {
    "caller": "backward_batchnorm_layer_TA",
    "callee": "backward_scale_cpu_TA"
  },
  {
    "caller": "backward_batchnorm_layer_TA",
    "callee": "scale_bias_TA"
  },
  {
    "caller": "backward_batchnorm_layer_TA",
    "callee": "mean_delta_cpu_TA"
  },
  {
    "caller": "backward_batchnorm_layer_TA",
    "callee": "variance_delta_cpu_TA"
  },
  {
    "caller": "backward_batchnorm_layer_TA",
    "callee": "normalize_delta_cpu_TA"
  },
  {
    "caller": "backward_batchnorm_layer_TA",
    "callee": "copy_cpu_TA"
  },
  {
    "caller": "make_dropout_layer_TA_new",
    "callee": "calloc"
  },
  {
    "caller": "make_dropout_layer_TA_new",
    "callee": "malloc"
  },
  {
    "caller": "make_dropout_layer_TA_new",
    "callee": "ftoa"
  },
  {
    "caller": "resize_dropout_layer_TA",
    "callee": "realloc"
  },
  {
    "caller": "forward_dropout_layer_TA_new",
    "callee": "rand_uniform_TA"
  },
  {
    "caller": "make_network_TA",
    "callee": "calloc"
  },
  {
    "caller": "forward_network_TA",
    "callee": "malloc"
  },
  {
    "caller": "forward_network_TA",
    "callee": "printf"
  },
  {
    "caller": "forward_network_TA",
    "callee": "calloc"
  },
  {
    "caller": "forward_network_TA",
    "callee": "fill_cpu_TA"
  },
  {
    "caller": "forward_network_TA",
    "callee": "forward_TA"
  },
  {
    "caller": "forward_network_TA",
    "callee": "summary_array"
  },
  {
    "caller": "forward_network_TA",
    "callee": "calc_network_cost_TA"
  },
  {
    "caller": "update_network_TA",
    "callee": "update_TA"
  },
  {
    "caller": "calc_network_loss_TA",
    "callee": "ftoa"
  },
  {
    "caller": "calc_network_loss_TA",
    "callee": "trace_printf"
  },
  {
    "caller": "backward_network_TA",
    "callee": "backward_TA"
  },
  {
    "caller": "gemm_TA",
    "callee": "gemm_cpu_TA"
  },
  {
    "caller": "gemm_cpu_TA",
    "callee": "gemm_nn_TA"
  },
  {
    "caller": "gemm_cpu_TA",
    "callee": "gemm_tn_TA"
  },
  {
    "caller": "gemm_cpu_TA",
    "callee": "gemm_nt_TA"
  },
  {
    "caller": "gemm_cpu_TA",
    "callee": "gemm_tt_TA"
  },
  {
    "caller": "make_softmax_layer_TA_new",
    "callee": "_assert_log"
  },
  {
    "caller": "make_softmax_layer_TA_new",
    "callee": "_assert_break"
  },
  {
    "caller": "make_softmax_layer_TA_new",
    "callee": "calloc"
  },
  {
    "caller": "forward_softmax_layer_TA",
    "callee": "softmax_cpu_TA"
  },
  {
    "caller": "forward_softmax_layer_TA",
    "callee": "softmax_x_ent_cpu_TA"
  },
  {
    "caller": "forward_softmax_layer_TA",
    "callee": "sum_array_TA"
  },
  {
    "caller": "backward_softmax_layer_TA",
    "callee": "axpy_cpu_TA"
  },
  {
    "caller": "rand_uniform_TA",
    "callee": "ta_rand"
  },
  {
    "caller": "rand_normal_TA",
    "callee": "ta_rand"
  },
  {
    "caller": "rand_normal_TA",
    "callee": "ta_pow"
  },
  {
    "caller": "rand_normal_TA",
    "callee": "ta_sqrt"
  },
  {
    "caller": "rand_normal_TA",
    "callee": "ta_ln"
  },
  {
    "caller": "get_cost_type_TA",
    "callee": "strcmp"
  },
  {
    "caller": "get_cost_type_TA",
    "callee": "trace_printf"
  },
  {
    "caller": "make_cost_layer_TA_new",
    "callee": "calloc"
  },
  {
    "caller": "forward_cost_layer_TA",
    "callee": "smooth_l1_cpu_TA"
  },
  {
    "caller": "forward_cost_layer_TA",
    "callee": "l1_cpu_TA"
  },
  {
    "caller": "forward_cost_layer_TA",
    "callee": "l2_cpu_TA"
  },
  {
    "caller": "forward_cost_layer_TA",
    "callee": "sum_array_TA"
  },
  {
    "caller": "backward_cost_layer_TA",
    "callee": "axpy_cpu_TA"
  },
  {
    "caller": "summary_array",
    "callee": "ftoa"
  },
  {
    "caller": "summary_array",
    "callee": "trace_printf"
  },
  {
    "caller": "TA_CreateEntryPoint",
    "callee": "trace_printf"
  },
  {
    "caller": "TA_DestroyEntryPoint",
    "callee": "trace_printf"
  },
  {
    "caller": "TA_OpenSessionEntryPoint",
    "callee": "trace_printf"
  },
  {
    "caller": "TA_CloseSessionEntryPoint",
    "callee": "trace_printf"
  },
  {
    "caller": "make_netowork_TA_params",
    "callee": "make_network_TA"
  },
  {
    "caller": "make_convolutional_layer_TA_params",
    "callee": "get_activation_TA"
  },
  {
    "caller": "make_convolutional_layer_TA_params",
    "callee": "make_convolutional_layer_TA_new"
  },
  {
    "caller": "make_maxpool_layer_TA_params",
    "callee": "make_maxpool_layer_TA"
  },
  {
    "caller": "make_avgpool_layer_TA_params",
    "callee": "make_avgpool_layer_TA"
  },
  {
    "caller": "make_dropout_layer_TA_params",
    "callee": "make_dropout_layer_TA_new"
  },
  {
    "caller": "make_connected_layer_TA_params",
    "callee": "get_activation_TA"
  },
  {
    "caller": "make_connected_layer_TA_params",
    "callee": "make_connected_layer_TA_new"
  },
  {
    "caller": "make_softmax_layer_TA_params",
    "callee": "make_softmax_layer_TA_new"
  },
  {
    "caller": "make_cost_layer_TA_params",
    "callee": "get_cost_type_TA"
  },
  {
    "caller": "make_cost_layer_TA_params",
    "callee": "make_cost_layer_TA_new"
  },
  {
    "caller": "make_cost_layer_TA_params",
    "callee": "malloc"
  },
  {
    "caller": "transfer_weights_TA_params",
    "callee": "load_weights_TA"
  },
  {
    "caller": "save_weights_TA_params",
    "callee": "malloc"
  },
  {
    "caller": "save_weights_TA_params",
    "callee": "save_weights_TA"
  },
  {
    "caller": "save_weights_TA_params",
    "callee": "free"
  },
  {
    "caller": "forward_network_TA_params",
    "callee": "summary_array"
  },
  {
    "caller": "forward_network_TA_params",
    "callee": "forward_network_TA"
  },
  {
    "caller": "forward_network_back_TA_params",
    "callee": "summary_array"
  },
  {
    "caller": "backward_network_TA_params",
    "callee": "summary_array"
  },
  {
    "caller": "backward_network_TA_params",
    "callee": "backward_network_TA"
  },
  {
    "caller": "backward_network_TA_addidion_params",
    "callee": "summary_array"
  },
  {
    "caller": "backward_network_back_TA_params",
    "callee": "summary_array"
  },
  {
    "caller": "backward_network_back_TA_addidion_params",
    "callee": "summary_array"
  },
  {
    "caller": "update_network_TA_params",
    "callee": "update_network_TA"
  },
  {
    "caller": "calc_network_loss_TA_params",
    "callee": "calc_network_loss_TA"
  },
  {
    "caller": "net_output_return_TA_params",
    "callee": "free"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "make_netowork_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "update_net_agrv_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "make_convolutional_layer_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "make_maxpool_layer_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "make_avgpool_layer_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "make_dropout_layer_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "make_connected_layer_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "make_softmax_layer_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "make_cost_layer_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "transfer_weights_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "save_weights_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "forward_network_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "backward_network_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "backward_network_TA_addidion_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "update_network_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "net_truth_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "calc_network_loss_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "net_output_return_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "forward_network_back_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "backward_network_back_TA_params"
  },
  {
    "caller": "TA_InvokeCommandEntryPoint",
    "callee": "backward_network_back_TA_addidion_params"
  },
  {
    "caller": "get_activation_TA",
    "callee": "strcmp"
  },
  {
    "caller": "activate_TA",
    "callee": "linear_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "logistic_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "loggy_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "relu_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "elu_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "selu_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "relie_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "ramp_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "leaky_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "tanh_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "plse_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "stair_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "hardtan_activate_TA"
  },
  {
    "caller": "activate_TA",
    "callee": "lhtan_activate_TA"
  },
  {
    "caller": "activate_array_TA",
    "callee": "activate_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "linear_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "logistic_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "loggy_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "relu_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "elu_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "selu_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "relie_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "ramp_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "leaky_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "tanh_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "plse_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "stair_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "hardtan_gradient_TA"
  },
  {
    "caller": "gradient_TA",
    "callee": "lhtan_gradient_TA"
  },
  {
    "caller": "gradient_array_TA",
    "callee": "gradient_TA"
  },
  {
    "caller": "make_maxpool_layer_TA",
    "callee": "calloc"
  },
  {
    "caller": "resize_maxpool_layer_TA",
    "callee": "realloc"
  },
  {
    "caller": "col2im_cpu_TA",
    "callee": "col2im_add_pixel_TA"
  },
  {
    "caller": "ta_pow",
    "callee": "ta_pow"
  },
  {
    "caller": "ta_eee",
    "callee": "ta_eee"
  },
  {
    "caller": "ta_eee",
    "callee": "ta_pow"
  },
  {
    "caller": "ta_exp",
    "callee": "ta_exp"
  },
  {
    "caller": "ta_exp",
    "callee": "ta_pow"
  },
  {
    "caller": "ta_exp",
    "callee": "ta_eee"
  },
  {
    "caller": "ta_rand",
    "callee": "TEE_GenerateRandom"
  },
  {
    "caller": "ta_sqrt",
    "callee": "ta_sqrt"
  },
  {
    "caller": "F2",
    "callee": "ta_sqrt"
  },
  {
    "caller": "simpson",
    "callee": "F1"
  },
  {
    "caller": "simpson",
    "callee": "F2"
  },
  {
    "caller": "asr",
    "callee": "simpson"
  },
  {
    "caller": "asr",
    "callee": "asr"
  },
  {
    "caller": "asr0",
    "callee": "asr"
  },
  {
    "caller": "asr0",
    "callee": "simpson"
  },
  {
    "caller": "ta_ln",
    "callee": "asr0"
  },
  {
    "caller": "ta_log",
    "callee": "ta_ln"
  },
  {
    "caller": "ta_sin",
    "callee": "ta_cos"
  },
  {
    "caller": "ta_sin",
    "callee": "ta_pow"
  },
  {
    "caller": "ta_cos",
    "callee": "ta_sin"
  },
  {
    "caller": "ta_cos",
    "callee": "ta_pow"
  },
  {
    "caller": "ta_tan",
    "callee": "ta_sin"
  },
  {
    "caller": "ta_tan",
    "callee": "ta_cos"
  },
  {
    "caller": "intToStr",
    "callee": "reverse"
  },
  {
    "caller": "ftoa",
    "callee": "intToStr"
  },
  {
    "caller": "ftoa",
    "callee": "ta_pow"
  },
  {
    "caller": "AES_init_ctx",
    "callee": "KeyExpansion"
  },
  {
    "caller": "AES_init_ctx_iv",
    "callee": "KeyExpansion"
  },
  {
    "caller": "AES_init_ctx_iv",
    "callee": "memcpy"
  },
  {
    "caller": "AES_ctx_set_iv",
    "callee": "memcpy"
  },
  {
    "caller": "MixColumns",
    "callee": "xtime"
  },
  {
    "caller": "InvMixColumns",
    "callee": "xtime"
  },
  {
    "caller": "Cipher",
    "callee": "AddRoundKey"
  },
  {
    "caller": "Cipher",
    "callee": "SubBytes"
  },
  {
    "caller": "Cipher",
    "callee": "ShiftRows"
  },
  {
    "caller": "Cipher",
    "callee": "MixColumns"
  },
  {
    "caller": "InvCipher",
    "callee": "AddRoundKey"
  },
  {
    "caller": "InvCipher",
    "callee": "InvShiftRows"
  },
  {
    "caller": "InvCipher",
    "callee": "InvSubBytes"
  },
  {
    "caller": "InvCipher",
    "callee": "InvMixColumns"
  },
  {
    "caller": "AES_ECB_encrypt",
    "callee": "Cipher"
  },
  {
    "caller": "AES_ECB_decrypt",
    "callee": "InvCipher"
  },
  {
    "caller": "AES_CBC_encrypt_buffer",
    "callee": "XorWithIv"
  },
  {
    "caller": "AES_CBC_encrypt_buffer",
    "callee": "Cipher"
  },
  {
    "caller": "AES_CBC_encrypt_buffer",
    "callee": "memcpy"
  },
  {
    "caller": "AES_CBC_decrypt_buffer",
    "callee": "memcpy"
  },
  {
    "caller": "AES_CBC_decrypt_buffer",
    "callee": "InvCipher"
  },
  {
    "caller": "AES_CBC_decrypt_buffer",
    "callee": "XorWithIv"
  },
  {
    "caller": "AES_CTR_xcrypt_buffer",
    "callee": "memcpy"
  },
  {
    "caller": "AES_CTR_xcrypt_buffer",
    "callee": "Cipher"
  },
  {
    "caller": "variance_cpu_TA",
    "callee": "ta_pow"
  },
  {
    "caller": "normalize_cpu_TA",
    "callee": "ta_sqrt"
  },
  {
    "caller": "softmax_TA",
    "callee": "ta_exp"
  },
  {
    "caller": "softmax_cpu_TA",
    "callee": "softmax_TA"
  },
  {
    "caller": "softmax_x_ent_cpu_TA",
    "callee": "ta_ln"
  },
  {
    "caller": "backward_bias_TA",
    "callee": "sum_array_TA"
  },
  {
    "caller": "make_convolutional_layer_TA_new",
    "callee": "calloc"
  },
  {
    "caller": "make_convolutional_layer_TA_new",
    "callee": "ta_sqrt"
  },
  {
    "caller": "make_convolutional_layer_TA_new",
    "callee": "rand_normal_TA"
  },
  {
    "caller": "make_convolutional_layer_TA_new",
    "callee": "convolutional_out_width_TA"
  },
  {
    "caller": "make_convolutional_layer_TA_new",
    "callee": "convolutional_out_height_TA"
  },
  {
    "caller": "make_convolutional_layer_TA_new",
    "callee": "get_workspace_size"
  },
  {
    "caller": "forward_convolutional_layer_TA_new",
    "callee": "fill_cpu_TA"
  },
  {
    "caller": "forward_convolutional_layer_TA_new",
    "callee": "binarize_weights_TA"
  },
  {
    "caller": "forward_convolutional_layer_TA_new",
    "callee": "swap_binary_TA"
  },
  {
    "caller": "forward_convolutional_layer_TA_new",
    "callee": "binarize_cpu_TA"
  },
  {
    "caller": "forward_convolutional_layer_TA_new",
    "callee": "im2col_cpu_TA"
  },
  {
    "caller": "forward_convolutional_layer_TA_new",
    "callee": "gemm_TA"
  },
  {
    "caller": "forward_convolutional_layer_TA_new",
    "callee": "forward_batchnorm_layer_TA"
  },
  {
    "caller": "forward_convolutional_layer_TA_new",
    "callee": "add_bias_TA"
  },
  {
    "caller": "forward_convolutional_layer_TA_new",
    "callee": "activate_array_TA"
  },
  {
    "caller": "backward_convolutional_layer_TA_new",
    "callee": "gradient_array_TA"
  },
  {
    "caller": "backward_convolutional_layer_TA_new",
    "callee": "backward_batchnorm_layer_TA"
  },
  {
    "caller": "backward_convolutional_layer_TA_new",
    "callee": "backward_bias_TA"
  },
  {
    "caller": "backward_convolutional_layer_TA_new",
    "callee": "im2col_cpu_TA"
  },
  {
    "caller": "backward_convolutional_layer_TA_new",
    "callee": "gemm_TA"
  },
  {
    "caller": "backward_convolutional_layer_TA_new",
    "callee": "col2im_cpu_TA"
  },
  {
    "caller": "update_convolutional_layer_TA_new",
    "callee": "axpy_cpu_TA"
  },
  {
    "caller": "update_convolutional_layer_TA_new",
    "callee": "scal_cpu_TA"
  }
]