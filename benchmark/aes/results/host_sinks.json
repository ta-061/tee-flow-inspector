{
  "sinks": [
    {
      "kind": "function",
      "name": "prepare_tee_session",
      "param_index": 0
    },
    {
      "kind": "function",
      "name": "terminate_tee_session",
      "param_index": 0
    },
    {
      "kind": "function",
      "name": "prepare_aes",
      "param_index": 0
    },
    {
      "kind": "function",
      "name": "prepare_aes",
      "param_index": 1
    },
    {
      "kind": "function",
      "name": "prepare_aes",
      "param_index": 0
    },
    {
      "kind": "function",
      "name": "prepare_aes",
      "param_index": 1
    },
    {
      "kind": "function",
      "name": "considering 0-based indexing). \n\nSo, the answer is:\n\n`(set_key",
      "param_index": 1
    },
    {
      "kind": "function",
      "name": "set_iv",
      "param_index": 1
    },
    {
      "kind": "function",
      "name": "set_iv",
      "param_index": 2
    },
    {
      "kind": "function",
      "name": "set_iv",
      "param_index": 1
    },
    {
      "kind": "function",
      "name": "set_iv",
      "param_index": 2
    },
    {
      "kind": "function",
      "name": "parameter index 1): This parameter is likely to be a source of tainted data, as it represents the input buffer that may contain untrusted data.\n- `out` (parameter index 2): This parameter is also a potential sink, as it is the output buffer where the processed data will be written, and it may be affected by tainted input.\n\nThus, the parameter positions to check are:\n\n- `(cipher_buffer",
      "param_index": 1
    },
    {
      "kind": "function",
      "name": "cipher_buffer",
      "param_index": 2
    }
  ]
}