Continue to analyze the next function according to the above taint analysis results. Pay attention to data aliases and tainted operations.

Function to analyze: {source_function}
Potentially tainted parameters: {param_name}

You MUST respond first with a one-line JSON (no code fences):
{"function":"{source_function}","propagation":[],"sanitizers":[],"sinks":[],"evidence":[],"rule_matches":[]}

Instructions:
1) Analyze EACH listed parameter independently. Track taint for each and append steps (LHS <- RHS) to "propagation" (e.g., "arg0_len <- params[0].memref.size").
2) Record any validations/sanitizers that constrain each parameter in "sanitizers" with evidence "<file>:<line>" or "unknown".
3) List concrete sinks and which parameter they use in "sinks" with evidence lines.
4) If any DITING rule matches for ANY parameter, list its `id` in "rule_matches" and add supporting evidence.
5) Keep the JSON minimal; then add up to 3 concise bullet points with key insights.

Code to be analyzed:
{code}
