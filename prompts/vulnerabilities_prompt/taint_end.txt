Based on the taint analysis above, decide if there is an ACTUAL vulnerability in the analyzed code path.

## Decision Criteria
1. Does tainted data actually reach a dangerous sink?
2. Are there validation / sanitization steps that stop exploitation?

---

## OUTPUT CONTRACT (STRICT - FOLLOW EXACTLY)

**Line 1 MUST be EXACTLY one of the following (no code fences, no backticks, no leading spaces):**
{"vulnerability_found":"yes"}
{"vulnerability_found":"no"}

No other text on line 1.

**Starting from line 2**, provide an explanation *only* if needed:
- If "yes": briefly state CWE-XXX, exact code path, and why mitigations fail.
- If "no": briefly state why the flow is safe (validation, unreachable sink, etc.).

## Correct Examples

Vulnerable:
{"vulnerability_found":"yes"}
CWE-787: Tainted length `len` used in `memcpy(dst, src, len)` without bounds check in `foo()->bar()->TEE_MemMove`.

Not Vulnerable:
{"vulnerability_found":"no"}
Length validated (`len <= sizeof(buf)`) before copy; data encrypted before leaving secure world.