Continue to analyze the next function according to the above taint analysis results. Pay attention to data aliases and tainted operations.

Function to analyze: {source_function}
Potentially tainted parameters: {param_name}

## TEE API Documentation Context:
{rag_context}

You MUST respond first with a one-line JSON (no code fences):
{"function":"{source_function}","propagation":[],"sanitizers":[],"sinks":[],"evidence":[],"rule_matches":[]}

Additional output contract for inline findings:
Immediately after the one-line JSON above, output EXACTLY ONE more line:
FINDINGS={"items":[{"rule":"unencrypted_output|weak_input_validation|shared_memory_overwrite","file":"<path>","line":123,"why":"<one sentence>","evidence":"<file>:<line>","code_excerpt":"<short>"}]}
Rules:
- Always print the FINDINGS line, even when no items (use {"items":[]})
- rule MUST be one of: unencrypted_output, weak_input_validation, shared_memory_overwrite
- evidence MUST be "<file>:<line>" if known, else "unknown"
- The FINDINGS line must be a single line with no extra prose

Instructions:
1) Use ONLY the code and the Documentation Context above when referencing API semantics. If a required detail is absent, write "unknown" and do NOT speculate.
2) Analyze EACH listed parameter independently. Track taint for each and append steps (LHS <- RHS) to "propagation" (e.g., "arg0_len <- params[0].memref.size"). Add "implicit:<var>" for control-dependent flows.
3) Record validations/sanitizers that constrain each parameter in "sanitizers" with evidence "<file>:<line>" or "unknown".
4) List concrete sinks and which parameter they use in "sinks" with evidence lines.
5) If any DITING rule matches for ANY parameter, list its `id` in "rule_matches" and add supporting evidence.
6) Keep the JSON minimal; then add up to 3 concise bullet points with key insights.

Code to be analyzed:
{code}
