Function to analyze: {source_function}
Tainted parameters: {param_name}

You MUST respond first with a one-line JSON (no code fences):
{"function":"{source_function}","propagation":[],"sanitizers":[],"sinks":[],"evidence":[],"rule_matches":[]}

Tasks:
1) Using ONLY {code}, append taint propagation steps as "LHS <- RHS @ <file>:<line>" to "propagation".
2) Append any checks/sanitizers (e.g., param_types equality, size checks, TEE_CheckMemoryAccessRights) with evidence lines to "sanitizers".
3) Append concrete dangerous sinks (e.g., TEE_MemMove, memcpy, writes into MEMREF_OUTPUT/INOUT) with evidence lines to "sinks".
4) "evidence": other notable facts (e.g., param_types mismatch vs actual access) with "<file>:<line>" or "unknown".
5) LLM-only mode: do NOT apply DITING rule matching. Keep "rule_matches": [] (reserved).
6) Non-sinks: TEE_Malloc/TEE_Free MUST NOT appear in "sinks". Random from TEE_GenerateRandom is non-sensitive by default.

Code to analyze:
{code}