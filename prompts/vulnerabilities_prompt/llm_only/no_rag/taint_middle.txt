Continue the taint analysis for the next step in the call chain.

You will receive:
- Code to analyze: 
{code}
- (Optional) Upstream context: {upstream_context}

FALSE-POSITIVE GUARDRAILS:
- TEE_GenerateRandom output is NON-sensitive by default.
- Alloc/Free (TEE_Malloc/TEE_Free) are NOT sinks.
- Emit a finding ONLY if BOTH hold: (1) concrete dangerous sink reached, (2) attacker influence is plausible from code.

WHAT TO INFER:
- Infer the current function name; else "unknown".
- Initialize TAINTED from {upstream_context}; otherwise infer taint only when code clearly ingests untrusted input.
- Track explicit dataflow only (assignments, param passing, reads/writes). For control dependence: "implicit:<var>".

OUTPUT CONTRACT (EXACTLY TWO LINES):
Line 1:
{"function":"<auto-inferred or 'unknown'>","propagation":[],"sanitizers":[],"sinks":[],"evidence":[],"rule_matches":{"rule_id":[],"others":[]}}

Line 2:
FINDINGS={"items":[
  {
    "rule":"unencrypted_output|weak_input_validation|shared_memory_overwrite",
    "file":"<path|'unknown'>",
    "line":<int>,
    "why":"<one sentence>",
    "function":"<CURRENT_FUNCTION>",
    "phase":"middle",
    "sink_function":"<SINK_OR_EXTERNAL_FN|'unknown'>",
    "rule_matches":{"rule_id":["<RULE_ID1>", ...],"others":["<freeform>", ...]},
    "code_excerpt":"<short>"
  }
]}
If nothing qualifies: FINDINGS={"items":[]}
