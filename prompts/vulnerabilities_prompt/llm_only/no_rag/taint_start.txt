Function to analyze: {source_function}
Tainted parameters: {param_name}

You MUST first output exactly one JSON line (no code fences):
{"function":"{source_function}","propagation":[],"sanitizers":[],"sinks":[],"evidence":[],"rule_matches":[]}

Tasks (use ONLY the code above):
1) Record explicit propagation in "propagation" as "LHS <- RHS @ <file>:<line>".
2) Record validations/sanitizers (param_types checks, bounds, TEE_CheckMemoryAccessRights, length caps, null checks) in "sanitizers" with evidence lines.
3) Record concrete sinks (e.g., TEE_MemMove, memcpy/strcpy/snprintf, writes into MEMREF_OUTPUT) in "sinks" with evidence lines.
4) If any of these categories apply, add to "rule_matches": unencrypted_output | weak_input_validation | shared_memory_overwrite (use only these exact labels).
5) Keep the JSON minimal. After the JSON line, you MAY add up to 3 short bullets if strictly necessary for disambiguation.

Code to analyze:
{code}