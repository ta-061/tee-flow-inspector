Continue the taint analysis for the next step in the call chain (multiple parameter flows).

Inputs:
- Code to analyze: {code}
- (Optional) Upstream context: {upstream_context}

STRICT RATIONALE:
- Use {upstream_context} to initialize taint.
- Focus on parameter pairs/tuples (buf-len, dst-src-n, ptr-offset-size, index-bound).
- Exclude alloc/free as sinks; random bytes are non-sensitive by default.

OUTPUT CONTRACT:
Line 1 (single JSON):
{"function":"<auto or parsed name>","propagation":[],"sanitizers":[],"sinks":[],"evidence":[],"rule_matches":{"rule_id":[],"others":[]}}

Guidance:
1) Record aliasing/flows across multi-parameter relations: "LHS <- RHS @ <file>:<line>".
2) Record sanitizers (bounds checks, access rights, type validation).
3) Record dangerous sinks (memcpy/TEE_MemMove into shared/out buffers, storage/output APIs) with lines.
4) If param_types misuse or unchecked size couples attacker input to a sink, record in "evidence".
5) Classify rules into rule_matches: known IDs -> rule_id[], else others[].

Line 2 (FINDINGS):
FINDINGS={"items":[
  {
    "file":"<path|'unknown'>",
    "line":<int>,
    "rule":"<short_category>",
    "why":"<short_reason>",
    "function":"<CURRENT_FUNCTION>",
    "phase":"middle",
    "sink_function":"<SINK_OR_EXTERNAL_FN|'unknown'>",
    "rule_matches":{"rule_id":["<RULE_ID1>", ...],"others":["<freeform>", ...]},
    "code_excerpt":"<short>"
  }
]}
If nothing qualifies: FINDINGS={"items":[]}
