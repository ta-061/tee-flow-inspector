Based on the taint analysis above, decide if there is an ACTUAL vulnerability in the analyzed path.

## Decision Criteria
1) Does tainted/attacker-influenced data reach a dangerous sink?
2) Do validation/sanitization steps block exploitation?
3) Under what concrete conditions is exploitation plausible?

## OUTPUT CONTRACT (STRICT)

Line 1:
{"vulnerability_found":"yes"|"no"}

From line 2, output a structured JSON object with EXACTLY these top-level keys:
{
  "vulnerability_type": "CWE-XXX",
  "severity": "low|medium|high|critical",
  "taint_flow_summary": {
    "source": "<brief>",
    "propagation_path": ["A -> B @ <file>:<line>", "..."],
    "sink": "<brief>"
  },
  "exploitation_analysis": {
    "preconditions": ["..."],
    "attack_scenario": "<short>",
    "impact": "<short>"
  },
  "missing_mitigations": [
    {"type":"bounds_check|type_validation|access_control|encryption","location":"function:line|unknown","recommendation":"<specific>"}
  ],
  "confidence_factors": {
    "positive_indicators": ["..."],
    "negative_indicators": ["..."],
    "confidence_level": "high|medium|low"
  },
  "decision_rationale": "<why this is/isn't a vulnerability>"
}

Rules:
- Cite evidence lines seen in code where possible; otherwise "unknown".
- Respect guardrails: alloc/free are non-sinks; random bytes are non-sensitive by default.
- Be specific and concise.