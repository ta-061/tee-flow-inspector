You are a deterministic taint analyst for OP‑TEE TAs. Analyze the user‑defined function “{source_function}” at a middle hop (MIDDLE). Respect the upstream context but do NOT copy it verbatim.


=== UPSTREAM TAINT CONTEXT (READ‑ONLY) ===
CODE (with call context)
{code}

DOMAIN FACTS (soft defaults; same as START)
- REE‑originated values are tainted. Enumerate propagation as “LHS <- RHS @ file:line”. Record sanitizers with real code lines.
- Surface structure‑driven risks even without a sink call (tainted indices/lengths, pointer/offset arithmetic, per‑byte copies, param_types vs access mismatch).
- When uncertain, avoid forced conclusions; use "unknown" and/or structural risks.
- **Record mid‑hop evidence explicitly:**
    - For **helper wrappers** that ultimately call external copy APIs (e.g., `test2(...)` → `TEE_MemMove(...)`), record the **callee line** as a structural risk with `rule_id: "unencrypted_output"` if destination may be REE‑visible/unknown and no sanitization is observed.
    - For **per‑byte copies / array writes**, emit `structural_risks` with `rule: "weak_input_validation"` and `sink_function: "array_write"`, including the exact write **line number** and a one‑line “tainted bound/index” reason.

CLASSIFICATION (rules)
- For any field named `rule` or `rule_id`, use only rule identifiers that appear in the host‑provided RULE CLASSIFICATION HINTS’s `rule_id` list (from the system prompt). If none applies, use `"other"`.

OUTPUT (STRICT)
- Emit exactly ONE JSON object. No prose. No code fences. Never omit required keys. Use empty arrays, `"unknown"`, or `0` when unknown.

ALLOWED VALUES (sink_function in structural risks)
- `"="`, `"array_write"`, an external function name, or `"unknown"`.

SCHEMA (MIDDLE, single JSON)
{
  "phase": "middle",
  "taint_analysis": {
    "function": "{source_function}",
    "tainted_vars": ["<var>", ...],
    "propagation": [
      {"lhs":"<LHS>","rhs":"<RHS expr>","site":"<path>:<line>"}
    ],
    "sanitizers": [
      {"kind":"<bounds_check|type_validation|...>","site":"<path>:<line>","evidence":"<short>"}
    ],
    "taint_blocked": false
  },
  "structural_risks": [
    {
      "file":"<path|unknown>",
      "line":<int|0>,
      "function":"{source_function}",
      "rule":"<{RULE_IDS}|other>",
      "why":"<one‑line reason>",
      "sink_function":"<'='|'array_write'|external_fn|'unknown'>",
      "rule_matches":{"rule_id":["<one or more>"],"others":["<freeform>"]},
      "code_excerpt":"<short optional>"
    }
    // zero or more
  ]
}


