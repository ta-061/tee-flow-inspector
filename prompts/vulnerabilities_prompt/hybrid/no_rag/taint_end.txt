Based on the taint analysis above, decide if there is an ACTUAL vulnerability in the analyzed code path.

Decision Criteria
1) Does tainted data actually reach a dangerous sink?
2) Are validations/sanitizers sufficient to block exploitation?
3) Under what concrete conditions is exploitation plausible?

OUTPUT CONTRACT (STRICT):
Line 1:
{"vulnerability_found":"yes"|"no"}

From line 2, output EXACT JSON:
{
  "vulnerability_type": "CWE-XXX",
  "severity": "low|medium|high|critical",
  "taint_flow_summary": {
    "source": "<brief>",
    "propagation_path": ["A -> B @ <file>:<line>", "..."],
    "sink": "<brief>"
  },
  "exploitation_analysis": {
    "preconditions": ["..."],
    "attack_scenario": "<short>",
    "impact": "<short>"
  },
  "missing_mitigations": [
    {"type":"bounds_check|type_validation|access_control|encryption","location":"function:line|unknown","recommendation":"<specific>"}
  ],
  "confidence_factors": {
    "positive_indicators": ["..."],
    "negative_indicators": ["..."],
    "confidence_level": "high|medium|low"
  },
  "decision_rationale": "<why this is/isn't a vulnerability>"
}

Additionally, if a concrete security issue remains at the chain end, output a third line:
END_FINDINGS={"items":[
  {
    "file":"<path|'unknown'>",
    "line":<int>,
    "rule":"<short_category>",
    "why":"<one sentence>",
    "function":"<SINK_OR_END_FUNCTION>",
    "phase":"end",
    "sink_function":"<SINK_API_FN|'unknown'>",
    "rule_matches":{"rule_id":["<RULE_ID1>", ...],"others":["<freeform>", ...]},
    "refs":["inline:<id1>","inline:<id2>"],
    "code_excerpt":"<short>"
  }
]}
If none: END_FINDINGS={"items":[]}

Rules:
- Cite evidence lines where possible; otherwise "unknown".
- Respect guardrails: alloc/free are non-sinks; random bytes are non-sensitive.
- Keep outputs concise and follow the two/three line protocol exactly.
