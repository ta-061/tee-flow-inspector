Continue the taint analysis for the next step in the call chain (multiple parameter flows).

You will receive:
- Code to analyze: 
{code}
- (Optional) Upstream context: {upstream_context}   # a set of previously tainted symbols/params
- Target parameters (indices): {param_indices}

FALSE-POSITIVE GUARDRAILS:
- Random from TEE_GenerateRandom is NON-sensitive by default.
- Alloc/Free (TEE_Malloc/TEE_Free) are NOT sinks.
- Report a finding only when a concrete sink is reached and attacker influence is plausible.

WHAT TO INFER:
- Infer function name from the code signature; else "unknown".
- Build TAINTED from {upstream_context}; otherwise infer only when code clearly ingests untrusted input.
- Analyze EACH parameter/symbol independently; track explicit dataflow (buf-len, dst-src-n, ptr-offset-size, index-bound). For control dependence: "implicit:<var>".

OUTPUT CONTRACT (EXACTLY TWO LINES):
Line 1:
{"function":"<auto-inferred or 'unknown'>","propagation":[],"sanitizers":[],"sinks":[],"evidence":[],"rule_matches":{"rule_id":[],"others":[]}}

Line 2:
FINDINGS={"items":[
  {
    "rule":"unencrypted_output|weak_input_validation|shared_memory_overwrite",
    "file":"<path|'unknown'>",
    "line":<int>,
    "why":"<one sentence>",
    "function":"<CURRENT_FUNCTION>",
    "phase":"middle",
    "sink_function":"<SINK_OR_EXTERNAL_FN|'unknown'>",
    "rule_matches":{"rule_id":["<RULE_ID1>", ...],"others":["<freeform>", ...]},
    "code_excerpt":"<short>"
  }
]}
If nothing qualifies: FINDINGS={"items":[]}

Analysis steps:
1) For EACH possibly tainted parameter/symbol:
   - Append "LHS <- RHS @ <file>:<line>" into "propagation".
   - Record validators/sanitizers in "sanitizers" (bounds/type/access checks) with evidence lines.
   - Identify dangerous sinks and WHICH parameter/symbol they use; record in "sinks" with evidence lines.
2) If param_types misuse or unchecked size couples attacker input to a sink, note in "evidence" and map to a rule_id if applicable.
