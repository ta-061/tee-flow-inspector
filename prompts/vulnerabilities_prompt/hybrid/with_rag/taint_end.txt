Based on the taint analysis above, decide if there is an ACTUAL vulnerability in the analyzed path.

Decision Criteria:
1) Does tainted data reach a dangerous sink?
2) Do validations/sanitizers block exploitation?
3) Under what concrete conditions is exploitation plausible?

OUTPUT CONTRACT:
Line 1:
{"vulnerability_found":"yes"|"no"}

Line 2: Structured JSON:
{
  "vulnerability_type": "CWE-XXX",
  "severity": "low|medium|high|critical",
  "taint_flow_summary": {
    "source": "<brief>",
    "propagation_path": ["A -> B @ <file>:<line>", "..."],
    "sink": "<brief>"
  },
  "exploitation_analysis": {
    "preconditions": ["..."],
    "attack_scenario": "<short>",
    "impact": "<short>"
  },
  "missing_mitigations": [
    {"type":"bounds_check|type_validation|access_control|encryption","location":"function:line|unknown","recommendation":"<specific>"}
  ],
  "confidence_factors": {
    "positive_indicators": ["..."],
    "negative_indicators": ["..."],
    "confidence_level": "high|medium|low"
  },
  "decision_rationale": "<why this is/isn't a vulnerability>"
}

Line 3 (if vulnerable):
END_FINDINGS={"items":[
  {
    "file":"<path|'unknown'>",
    "line":<int>,
    "rule":"<short_category>",
    "why":"<short_reason>",
    "function":"<SINK_OR_END_FUNCTION>",
    "phase":"end",
    "sink_function":"<SINK_API_FN|'unknown'>",
    "rule_matches":{"rule_id":["<RULE_ID1>", ...],"others":["<freeform>", ...]},
    "rag_refs":["<doc:section|page?>", ...],
    "refs":["inline:<id1>","inline:<id2>"],
    "code_excerpt":"<short>"
  }
]}
If nothing qualifies: END_FINDINGS={"items":[]}

Rules:
- If DITING rule ID matches, include it in rule_matches.rule_id.
- If using {rag_context} for semantics, include rag_refs labels.
- Respect guardrails: alloc/free are non-sinks; random bytes are non-sensitive.
- Keep outputs concise, deterministic, and in the exact schema.
